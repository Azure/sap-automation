---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |      This pipeline removes the SAP systems, the workload zone (landscape)  |
# |      and the region via Terraform.                                         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


name: Removal

parameters:
  - name:                              cleanup_sap
    displayName:                       Remove the SAP system
    type:                              boolean
    default:                           true

  - name:                              sap_system
    displayName:                       "SAP System configuration name, use this format: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           DEV-WEEU-SAP01-X00

  - name:                              cleanup_zone
    displayName:                       Remove the SAP workload zone
    type:                              boolean
    default:                           true

  - name:                              workload_zone
    displayName:                       "SAP workload zone configuration name, use this format: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           DEV-WEEU-SAP01-INFRASTRUCTURE

  - name:                              cleanup_region
    displayName:                       Remove the control plane
    type:                              boolean
    default:                           true

  - name:                              deployer
    displayName:                       "Deployer configuration name, use this format: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           MGMT-WEEU-DEP00-INFRASTRUCTURE

  - name:                              library
    displayName:                       "Library configuration name, use this format: ENV-LOCA-SAP_LIBRARY"
    type:                              string
    default:                           MGMT-WEEU-SAP_LIBRARY

  - name:                              workload_environment_parameter
    displayName:                       Workload environment (DEV, QUA, PRD)
    type:                              string
    default:                           DEV

  - name:                              deployer_environment_parameter
    displayName:                       Deployer Environment name (MGMT, DEV, QA, PRD, ...)
    type:                              string
    default:                           MGMT

trigger:                               none

pool:
  name:                                $(Agent)

variables:
  - group:                             "SDAF-General"

  - name:                              parent_variable_group
    value:                             SDAF-${{ parameters.deployer_environment_parameter }}

  - name:                              variable_group
    value:                             SDAF-${{ parameters.workload_environment_parameter }}

  - name:                              deployer_folder
    value:                             ${{ parameters.deployer }}

  - name:                              deployer_configuration_file
    value:                             ${{ parameters.deployer }}.tfvars

  - name:                              library_folder
    value:                             ${{ parameters.library }}

  - name:                              library_configuration_file
    value:                             ${{ parameters.library }}.tfvars

  - name:                              workload_zone_folder
    value:                             ${{ parameters.workload_zone }}

  - name:                              workload_zone_configuration_file
    value:                             ${{ parameters.workload_zone }}.tfvars

  - name:                              sap_system_folder
    value:                             ${{ parameters.sap_system }}

  - name:                              sap_system_configuration
    value:                             ${{ parameters.sap_system }}.tfvars

  - name:                              tf_url
    value:                             https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip

stages:
  - stage:                             Remove_SAP_systems
    displayName:                       "Removing the SAP System"
    condition:                         eq(${{ parameters.cleanup_sap }}, true)
    jobs:
      - job:                           Remove_SAP_systems
        displayName:                   "Removing the SAP System"
        variables:
          - group:                     SDAF-${{ parameters.workload_environment_parameter }}
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
          - bash: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Removing the SAP System defined in $(sap_system_folder)"
              green="\e[1;32m" ; reset="\e[0m"
              export                  SID=$(echo $(sap_system_folder) | awk -F'-' '{print $4}' | xargs) ; echo Location    $SID
              export          ENVIRONMENT=$(echo $(sap_system_folder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
              export             LOCATION=$(echo $(sap_system_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION

              echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)


              echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config

                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration) ]; then
                  echo -e "$boldred--- $(sap_system_configuration) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(sap_system_configuration) was not found."
                  exit 2
                fi

                workload_environment_file_name=$HOME/.sap_deployment_automation/${ENVIRONMENT}$LOCATION

                if [ ! -n $(Deployer_Key_Vault) ]; then
                  if [ ! -f ${workload_environment_file_name} ]; then
                    echo -e "$boldred--- $workload_environment_file_name was not found ---$reset"
                    echo "##vso[task.logissue type=error]Workload Zone configuration file ${workload_environment_file_name} was not found."
                    exit 2
                  fi
                fi

                if [ -n $(Deployer_Key_Vault) ]; then
                  export key_vault=$(Deployer_Key_Vault) ; echo 'Deployer Key Vault' ${key_vault}
                else
                  export key_vault=$(cat ${workload_environment_file_name}  | grep keyvault=   -m1      | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' ${key_vault}
                fi
                
                if [ -n $(Terraform_Remote_Storage_Subscription) ]; then
                  export STATE_SUBSCRIPTION=$(Terraform_Remote_Storage_Subscription)  ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                else
                  export STATE_SUBSCRIPTION=$(cat ${workload_environment_file_name}  | grep STATE_SUBSCRIPTION   | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                fi

                if [ ! -n $(Workload_Key_Vault) ]; then
                  export workload_key_vault=$(Workload_Key_Vault) ; echo 'Workload Key Vault' ${workload_key_vault}
                else
                  export workload_key_vault=$(cat ${workload_environment_file_name}  | grep workloadkeyvault     | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault' ${workload_key_vault}
                fi

              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
                az login --service-principal --username $(ARM_CLIENT_ID) --password $ARM_CLIENT_SECRET --tenant $(ARM_TENANT_ID) --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                ip_added=0

                az account set --subscription ${STATE_SUBSCRIPTION}
                if [[ "Azure Pipelines" == "$(Agent)" ]]; then
                  this_ip=$(curl -s ipinfo.io/ip) >/dev/null 2>&1
                  echo -e "$green--- Set IP ---$reset"
                  az keyvault network-rule add --name ${key_vault} --ip-address ${this_ip} --output none --only-show-errors
                  ip_added=1
                fi

                az account set --subscription $(ARM_SUBSCRIPTION_ID)

                if [[ "Azure Pipelines" == "$(Agent)" ]]; then
                  this_ip=$(curl -s ipinfo.io/ip) >/dev/null 2>&1
                  echo -e "$green--- Set IP ---$reset"
                  az keyvault network-rule add --name ${workload_key_vault} --ip-address ${this_ip}  --output none --only-show-errors
                  ip_added=1
                fi

              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip

              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q SYSTEM/$(sap_system_folder)/$(sap_system_configuration)

              echo -e "$green--- Pull latest from DevOps Repository ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull

              echo -e "$green--- Run the remover script that destroys the SAP system ---$reset"
                cd $HOME/SYSTEM/$(sap_system_folder)
                ${DEPLOYMENT_REPO_PATH}/deploy/scripts/remover.sh --parameterfile $(sap_system_configuration) --type sap_system --auto-approve
                git pull
                return_code=$?
                echo "Return code from remover.sh $return_code."
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from remover.sh $return_code."
                fi

              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)

                changed=0

                if [ -d $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/.terraform ]; then
                  git rm -q -f -r $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/.terraform
                  changed=1
                fi
                if [ -f  $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/sap-parameters.yaml ]; then
                  git rm -q    $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                  changed=1
                fi

                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/*_hosts.yaml | wc -l ) -gt 0 ] ; then
                  git rm -q    $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/*_hosts.yaml
                  changed=1
                fi

                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/*.md | wc -l ) -gt 0 ] ; then
                  git rm -q    $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/*.md
                  changed=1
                fi

                if [ 1 == $changed ]; then
                  git commit -m "Infrastructure for ${sap_system_folder} removed. [skip ci]" 
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push 
                fi

              exit $return_code

            displayName:               Remove SAP systems
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false

  - stage:                             Remove_SAP_workload_zone
    displayName:                       "Removing the SAP workload zone"
    condition:                         eq(${{ parameters.cleanup_zone }}, true)
    jobs:
      - job:                           Remove_SAP_workload_zone
        displayName:                   Remove the SAP Workload Zone
        variables:
          - group:                     SDAF-${{ parameters.workload_environment_parameter }}
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
          - bash: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Removing the SAP Workload zone defined in $(workload_zone_folder)"
              green="\e[1;32m" ; reset="\e[0m"

              echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
              echo -e "$green--- Configure devops CLI extension ---$reset"
                az config set extension.use_dynamic_install=yes_without_prompt >/dev/null 2>&1
                export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)

                az devops configure -d organization=$(System.CollectionUri)
                az devops configure -d project=$(System.TeamProject)

                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]"); echo VARIABLE_GROUP_ID $VARIABLE_GROUP_ID

                export PARENT_VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(parent_variable_group)'].id | [0]"); echo PARENT_VARIABLE_GROUP_ID $PARENT_VARIABLE_GROUP_ID

              echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation

                if [ ! -f LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file) ]; then
                  echo -e "$boldred--- $(workload_zone_configuration_file) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(workload_zone_configuration_file) was not found."
                  exit 2
                fi

                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
                export          ENVIRONMENT=$(echo $(workload_zone_folder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
                export             LOCATION=$(echo $(workload_zone_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION

                workload_environment_file_name=$HOME/.sap_deployment_automation/$ENVIRONMENT$LOCATION

                if [ -n $(Deployer_Key_Vault) ]; then
                  export key_vault=$(Deployer_Key_Vault) ; echo 'Deployer Key Vault' ${key_vault}
                else
                  export key_vault=$(cat ${workload_environment_file_name}  | grep keyvault=   -m1      | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' ${keyvault}
                fi
                
                az_var=$(az pipelines variable-group variable list --group-id ${PARENT_VARIABLE_GROUP_ID} --query "Terraform_Remote_Storage_Subscription.value" | tr -d \")
                if [ ! -z "${az_var}" ]; then
                  export STATE_SUBSCRIPTION="${az_var}"  ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                else
                  export STATE_SUBSCRIPTION=$(cat ${workload_environment_file_name}  | grep STATE_SUBSCRIPTION   | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                fi

                if [ -n $(Workload_Key_Vault) ]; then
                  export workload_key_vault=$(Workload_Key_Vault) ; echo 'Workload Key Vault' ${workload_key_vault}
                else
                  export workload_key_vault=$(cat ${workload_environment_file_name}  | grep workloadkey_vault     | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault' ${workload_key_vault}
                fi

                if [ ! -n $(Workload_Key_Vault) ]; then
                  if [ ! -f $workload_environment_file_name ]; then
                    echo -e "$boldred--- $ENVIRONMENT$LOCATION was not found ---$reset"
                    echo "##vso[task.logissue type=error]Workload zone configuration file $ENVIRONMENT$LOCATION was not found."
                    exit 2
                  fi
                fi

              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi

                az login --service-principal --username $(ARM_CLIENT_ID) --password $ARM_CLIENT_SECRET --tenant $(ARM_TENANT_ID) --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                ip_added=0

                az account set --subscription ${STATE_SUBSCRIPTION}
                if [[ "Azure Pipelines" == "$(Agent)" ]]; then
                  this_ip=$(curl -s ipinfo.io/ip) >/dev/null 2>&1
                  echo -e "$green--- Set IP ---$reset"
                  az keyvault network-rule add --name ${key_vault} --ip-address ${this_ip} --output none --only-show-errors
                  ip_added=1
                fi

                az account set --subscription $(ARM_SUBSCRIPTION_ID)

                if [[ "Azure Pipelines" == "$(Agent)" ]]; then
                  this_ip=$(curl -s ipinfo.io/ip) >/dev/null 2>&1
                  echo -e "$green--- Set IP ---$reset"
                  az keyvault network-rule add --name ${workload_key_vault} --ip-address ${this_ip} --output none --only-show-errors
                  ip_added=1
                fi

              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip

              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file)
              echo -e "$green--- Pull latest ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git pull

              echo -e "$green--- Run the remover script that destroys the SAP workload zone (landscape) ---$reset"
                cd $HOME/LANDSCAPE/$(workload_zone_folder)
                $DEPLOYMENT_REPO_PATH/deploy/scripts/remover.sh --parameterfile $(workload_zone_configuration_file) --type sap_landscape --auto-approve
                return_code=$?
                echo "Return code from remover.sh $return_code."
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from remover.sh $return_code."
                fi

              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                export ENVIRONMENT=$(echo $(workload_zone_folder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
                export    LOCATION=$(echo $(workload_zone_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION
                changed=0

                if [ -d $(Deployment_Configuration_Path)/LANDSCAPE/$(workload_zone_folder)/.terraform ]; then
                  git rm -r -f $(Deployment_Configuration_Path)/LANDSCAPE/$(workload_zone_folder)/.terraform
                  changed=1
                fi
                if [ -f  ${workload_environment_file_name} ]; then
                  git rm -q -f ${workload_environment_file_name}
                  changed=1
                fi
                if [ -f  ${workload_environment_file_name}.md ]; then
                  git rm -q -f ${workload_environment_file_name}.md
                  changed=1
                fi

                if [ 1 == $changed ] ; then
                  git commit -m "Workload zone ${workload_zone_folder} removal.[skip ci]" 
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push 
                fi

              echo -e "$green--- Deleting variables ---$reset"
                az logout
                if [ -n $VARIABLE_GROUP_ID ]; then
                  echo "Deleting variables"
                  if [ -n $(Terraform_Remote_Storage_Account_Name) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Account_Name --yes --only-show-errors 
                  fi

                  if [ -n $(Terraform_Remote_Storage_Subscription) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Subscription --yes --only-show-errors
                  fi

                  if [ -n $(Deployer_State_FileName) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Deployer_State_FileName               --yes --only-show-errors
                  fi

                  if [ -n $(Deployer_Key_Vault) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Deployer_Key_Vault                    --yes --only-show-errors
                  fi

                  if [ -n $(Workload_Key_Vault) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Workload_Key_Vault                    --yes --only-show-errors
                  fi

                  if [ -n $(Workload_Zone_State_FileName) ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Workload_Zone_State_FileName          --yes --only-show-errors
                  fi
                fi


              exit $return_code
            displayName:               Remove SAP workload_zone
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false

  - stage:                             Remove_control_plane
    displayName:                       "Remove the control plane"
    condition:                         eq(${{ parameters.cleanup_region }}, true)
    jobs:
      - job:                           Remove_control_plane
        displayName:                   "Remove the control plane"
        variables:
          - group:                     SDAF-${{ parameters.deployer_environment_parameter }}
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
          - bash: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Removing the control plane defined in $(deployer_folder) $(library_folder)"
              green="\e[1;32m" ; reset="\e[0m"

              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config

              echo -e "$green--- az login ---$reset"

                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
                az login --service-principal --username $(ARM_CLIENT_ID) --password $ARM_CLIENT_SECRET --tenant $(ARM_TENANT_ID) --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Convert config files to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q DEPLOYER/$(deployer_folder)/$(deployer_configuration_file) 2> /dev/null
                dos2unix -q LIBRARY/$(library_folder)/$(library_configuration_file)    2> /dev/null

              echo -e "$green--- Pull latest ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull

              echo -e "$green--- Running the remove region script that destroys deployer VM and SAP library ---$reset"
                export ENVIRONMENT=$(echo $(deployer_folder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
                export    LOCATION=$(echo $(deployer_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION

                deployer_environment_file_name=$HOME/.sap_deployment_automation/$ENVIRONMENT$LOCATION

                export    REMOTE_STATE_SA=$(cat ${deployer_environment_file_name}  | grep REMOTE_STATE_SA      | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file storage account' $REMOTE_STATE_SA
                export    REMOTE_STATE_RG=$(cat ${deployer_environment_file_name}  | grep REMOTE_STATE_RG      | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file resource group' $REMOTE_STATE_RG
                export           key_vault=$(cat ${deployer_environment_file_name}  | grep keyvault -m1         | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' ${key_vault}
                export STATE_SUBSCRIPTION=$(cat ${deployer_environment_file_name}  | grep STATE_SUBSCRIPTION   | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION

                ip_added=0
                az account set --subscription ${STATE_SUBSCRIPTION}

                if [[ "Azure Pipelines" == "$(Agent)" ]]; then
                  if [ -n ${key_vault} ]; then
                    echo -e "$green--- Set IP ---$reset"
                    this_ip=$(curl -s ipinfo.io/ip) >/dev/null 2>&1
                    az keyvault network-rule add --name ${key_vault} --ip-address ${this_ip} --no-wait
                    ip_added=1
                  fi
                fi

                $DEPLOYMENT_REPO_PATH/deploy/scripts/remove_controlplane.sh                                  \
                  --deployer_parameter_file DEPLOYER/$(deployer_folder)/$(deployer_configuration_file) \
                  --library_parameter_file LIBRARY/$(library_folder)/$(library_configuration_file)     \
                  --storage_account $REMOTE_STATE_SA                                                   \
                  --subscription ${STATE_SUBSCRIPTION}                                                 \
                  --resource_group $REMOTE_STATE_RG                                                    \
                  --ado --auto-approve

                return_code=$?
                git pull
                echo "Return code from remove_controlplane $return_code."
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from remove_controlplane $return_code."
                fi

              echo -e "$green--- Adding deployment automation configuration to devops repository ---$reset"
                cd $(Build.Repository.LocalPath)

                changed=0

                if [ -f "$(Deployment_Configuration_Path)/DEPLOYER/$(deployer_folder)/.terraform/terraform.tfstate" ]; then
                  git rm -q -f --ignore-unmatch "$(Deployment_Configuration_Path)/DEPLOYER/$(deployer_folder)/.terraform/terraform.tfstate"
                  changed=1
                fi
                if [ -f "$(Deployment_Configuration_Path)/DEPLOYER/$(deployer_folder)/terraform.tfstate" ]; then
                  git rm -q -f --ignore-unmatch "$(Deployment_Configuration_Path)/DEPLOYER/$(deployer_folder)/terraform.tfstate"
                  changed=1
                fi

                if [ -f "$(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/.terraform/terraform.tfstate" ]; then
                  git rm -q -f --ignore-unmatch "$(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/.terraform/terraform.tfstate"
                  changed=1
                fi

                if [ -f "$(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/terraform.tfstate" ]; then
                  git rm -q -f --ignore-unmatch "$(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/terraform.tfstate"
                  changed=1
                fi

                if [ -f  ${deployer_environment_file_name} ]; then
                  git rm -q -f  ${deployer_environment_file_name}
                  changed=1
                fi

                if [ -f  ${deployer_environment_file_name}.md ]; then
                  git rm -q -f ${deployer_environment_file_name}.md
                  changed=1
                fi

                if [ -f  $(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/backend-config.tfvars ]; then
                  git rm -q -f $(Deployment_Configuration_Path)/LIBRARY/$(library_folder)/backend-config.tfvars
                  changed=1
                fi

                if [ 1 == $changed ] ; then
                  git commit -m "Control Plane ${deployer_folder} removal[skip ci]" 
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push 
                fi
              echo -e "$green--- Configure devops CLI extension ---$reset"
                az logout
                az config set extension.use_dynamic_install=yes_without_prompt >/dev/null 2>&1
                if [ -n $(PAT) ]; then
                  export AZURE_DEVOPS_EXT_PAT=$(PAT)
                else
                  export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)
                fi

                az devops configure -d organization=$(System.CollectionUri)
                az devops configure -d project=$(System.TeamProject)

                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(parent_variable_group)'].id | [0]")
                if [ -n $VARIABLE_GROUP_ID ]; then
                  echo "Deleting variables"
                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Terraform_Remote_Storage_Account_Name.value" )

                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Account_Name --yes --only-show-errors 
                  fi

                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Terraform_Remote_Storage_Subscription.value" )

                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Subscription --yes --only-show-errors 
                  fi

                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Deployer_State_FileName.value" )

                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Deployer_State_FileName               --yes --only-show-errors 
                  fi

                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Deployer_Key_Vault.value" )

                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name Deployer_Key_Vault                    --yes --only-show-errors 
                  fi

                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "WEBAPP_URL_BASE.value" )

                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name WEBAPP_URL_BASE                       --yes --only-show-errors
                  fi

                  variable_value=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "WEBAPP_IDENTITY.value" )
                  if [ ! -z $variable_value ]; then
                    az pipelines variable-group variable delete --group-id ${VARIABLE_GROUP_ID} --name WEBAPP_IDENTITY                       --yes --only-show-errors
                  fi                  
                fi


              exit $return_code
            displayName:               Remove control plane
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false
...
