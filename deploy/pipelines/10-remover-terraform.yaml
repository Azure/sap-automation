---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |      This pipeline removes the SAP systems, the workload zone (landscape)  |
# |      and the region via Terraform.                                         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


name: ${{ sap_system }} ${{ workloadzone }}  ${{ deployer }} ${{ library }} $(Date:yyyyMMdd)

parameters:
  - name:                              cleanupsap
    displayName:                       "Remove the SAP system (Note: VMs must be in running state)"
    type:                              boolean
    default:                           false

  - name:                              sap_system
    displayName:                       "Use this format: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           DEV-WEEU-SAP01-X00

  - name:                              cleanupzone
    displayName:                       Remove the SAP workload zone
    type:                              boolean
    default:                           false

  - name:                              workloadzone
    displayName:                       "Use this format: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           DEV-WEEU-SAP01-INFRASTRUCTURE

  - name:                              cleanupregion
    displayName:                       Remove the control plane
    type:                              boolean
    default:                           false

  - name:                              deployer
    displayName:                       "Use this format: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           MGMT-WEEU-DEP00-INFRASTRUCTURE

  - name:                              library
    displayName:                       "Use this format: ENV-LOCA-SAP_LIBRARY"
    type:                              string
    default:                           MGMT-WEEU-SAP_LIBRARY

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: "SAP-deployment-variables-general"
  - group: "SAP-deployment-variables-specific"
  - name:  deployerfolder
    value: ${{ parameters.deployer }}
  - name:  deployerconfig
    value: ${{ parameters.deployer }}.tfvars
  - name:  libraryfolder
    value: ${{ parameters.library }}
  - name:  libraryconfig
    value: ${{ parameters.library }}.tfvars
  - name:  zonefolder
    value: ${{ parameters.workloadzone }}
  - name:  zoneconfig
    value: ${{ parameters.workloadzone }}.tfvars
  - name:  sapsystemfolder
    value: ${{ parameters.sap_system }}
  - name:  sapsystemconfig
    value: ${{ parameters.sap_system }}.tfvars
  - name:  log
    value: logfile_$(Build.BuildId)
  - name: tf_url
    value: https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip

stages:
  - stage: Remove_SAP_systems
    condition: eq(${{ parameters.cleanupsap }}, true)
    jobs:
      - job: Remove_SAP_systems
        steps:
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m"
              SID=$(echo $(sapsystemfolder) | cut -d'-' -f4 | xargs)
              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip
              echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
              echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q SYSTEM/$(sapsystemfolder)/$(sapsystemconfig)
              echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
                organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
                git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
              echo -e "$green--- Run the remover script that destroys the SAP system ---$reset"
                cd $HOME/SYSTEM/$(sapsystemfolder)
                ${DEPLOYMENT_REPO_PATH}/deploy/scripts/remover.sh --parameterfile $(sapsystemconfig) --type sap_system --auto-approve
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)" 
                git pull  origin $(Branch)
                git rm -r $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/.terraform
                git rm    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/sap-parameters.yaml
                git rm    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/*_hosts.yaml
                git rm    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/*.md
                git rm    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/*.zip
                git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push  origin HEAD:$(Branch)
              git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
            displayName: Remove SAP systems
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            failOnStderr: true

  - stage: Remove_SAP_workloadzone
    condition: eq(${{ parameters.cleanupzone }}, true)
    jobs:
      - job: Remove_SAP_workloadzone
        steps:
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m"
              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip
              echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
              echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q LANDSCAPE/$(zonefolder)/$(zoneconfig)
              echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
                organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
                git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
              echo -e "$green--- Run the remover script that destroys the SAP workload zone (landscape) ---$reset"
                cd $HOME/LANDSCAPE/$(zonefolder)
                $DEPLOYMENT_REPO_PATH/deploy/scripts/remover.sh --parameterfile $(zoneconfig) --type sap_landscape --auto-approve
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)" 
                export  ENV=$(echo $(zonefolder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(zonefolder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCA
                git pull  origin $(Branch)
                git rm    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}
                git rm    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}.md
                git rm -r $(Deployment_Configuration_Path)/LANDSCAPE/$(zonefolder)/.terraform
                git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push  origin HEAD:$(Branch)
              git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
            displayName: Remove SAP workloadzone
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            failOnStderr: true

  - stage: Remove_region
    condition: eq(${{ parameters.cleanupregion }}, true)
    jobs:
      - job: Remove_region
        steps:
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m"
              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
                export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
                organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
                git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
              echo -e "$green--- Convert config files to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q DEPLOYER/$(deployerfolder)/$(deployerconfig) 2> /dev/null
                dos2unix -q LIBRARY/$(libraryfolder)/$(libraryconfig)    2> /dev/null
              echo -e "$green--- Running the remove region script that destroys deployer VM and SAP library ---$reset"
                $DEPLOYMENT_REPO_PATH/deploy/scripts/remove_region.sh --deployer_parameter_file DEPLOYER/$(deployerfolder)/$(deployerconfig) --library_parameter_file LIBRARY/$(libraryfolder)/$(libraryconfig)
              echo -e "$green--- Adding deployment automation configuration to devops repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                export  ENV=$(echo $(deployerfolder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(deployerfolder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCA
                git pull  origin $(Branch)
                git rm    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}
                git rm    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}.md
                git rm -r $(Deployment_Configuration_Path)/DEPLOYER/$(deployerfolder)/.terraform
                git rm -r $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/.terraform
                git rm    $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/backend-config.tfvars
                git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push  origin HEAD:$(Branch)
              git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
            displayName: Remove region
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            failOnStderr: true
...
