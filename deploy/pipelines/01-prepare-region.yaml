# This pipeline prepares the region with a deployer and a SAP library

parameters:
- name: deployer
  displayName: ENV-LOCA-VNET-INFRASTRUCTURE
  type: string
  default: MGMT-WEEU-DEP00-INFRASTRUCTURE

- name: library
  displayName: ENV-LOCA-SAP_LIBRARY
  type: string
  default: MGMT-WEEU-SAP_LIBRARY

trigger:
  none

pool:
  vmImage: ubuntu-latest

variables:
  deployerfolder: ${{ parameters.deployer }}
  deployerconfig: ${{ parameters.deployer }}.tfvars
  libraryfolder: ${{ parameters.library }}
  libraryconfig: ${{ parameters.library }}.tfvars
  log: logfile_$(Build.BuildId)

name: $(deployerfolder)_$(libraryfolder)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Prepare_region
  jobs:
  - job: Prepare_region
    steps:
    - script: |
        #!/bin/bash
        green="\e[1;32m" ; reset="\e[0m"
        echo -e "$green--- Install Terraform ---$reset"
          wget -q https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
          unzip -qq terraform_1.0.8_linux_amd64.zip ; sudo mv terraform /bin/
        echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
          export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
          export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
          cd $HOME; mkdir -p .sap_deployment_automation
          echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
        echo -e "$green--- az login ---$reset"
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
        echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
          organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
          git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
        echo -e "$green--- Convert config files to UX format ---$reset"
          sudo apt-get -qq install dos2unix
          dos2unix -q DEPLOYER/$(deployerfolder)/$(deployerconfig)
          dos2unix -q LIBRARY/$(libraryfolder)/$(libraryconfig) 
        echo -e "$green--- Running the prepare region script that deploys the subscription hub with the Deployer VM and SAP Library ---$reset"
          $DEPLOYMENT_REPO_PATH/deploy/scripts/prepare_region.sh --deployer_parameter_file DEPLOYER/$(deployerfolder)/$(deployerconfig) --library_parameter_file LIBRARY/$(libraryfolder)/$(libraryconfig)  --subscription $(ARM_SUBSCRIPTION_ID)  --spn_id $(ARM_CLIENT_ID) --spn_secret $(ARM_CLIENT_SECRET) --tenant_id $(ARM_TENANT_ID)  --auto-approve 2> /dev/null
          return_code=$?
        echo -e "$green--- Adding deployment automation configuration to devops repository ---$reset"
          cd $(Build.Repository.LocalPath)
          git config --global user.email "$(Build.RequestedForEmail)"
          git config --global user.name  "$(Build.RequestedFor)"
          export ENV=$(echo $(deployerfolder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
          export LOCA=$(echo $(deployerfolder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCA
          git add    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}                  &>  /tmp/$(log)
          git add -f $(Deployment_Configuration_Path)/DEPLOYER/$(deployerfolder)/.terraform/terraform.tfstate   &>> /tmp/$(log)
          git add -f $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/.terraform/terraform.tfstate     &>> /tmp/$(log)
          git add    $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/backend-config.tfvars            &>> /tmp/$(log)
          git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"                &>> /tmp/$(log)                                                                                       &>> /tmp/$(log)
          git pull origin $(Branch)                                                                             &>> /tmp/$(log)
          git push origin HEAD:$(Branch)                                                                        &>> /tmp/$(log)
          cat /tmp/$(log)
          git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
          exit $return_code
      displayName: Prepare region
      env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      failOnStderr: false