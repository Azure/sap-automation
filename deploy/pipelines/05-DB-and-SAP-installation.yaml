---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline performs the software installation             |
# |              and must run on a self hosted deployment agent                |
# |                      due to long run time                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name:                                  OS Configuration and SAP Installation $(sap_system_folder) $(bom) [$(Date:yyyyMMdd)]

parameters:
  - name:                              sap_system
    displayName:                       "SAP System configuration name, use the following syntax: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           DEV-WEEU-SAP01-X00

  - name:                              environment
    displayName:                       Workload Environment (DEV, QUA, PRD, ...)
    type:                              string
    default:                           DEV

  - name:                              bom_base_name
    displayName:                       Bill of Materials name
    type:                              string
    default:                           S41909SPS03_v0010ms
    values:
      - S41909SPS03_v0010ms
      - S41909SPS03_v0009ms
      - S41909SPS03_v0008ms
      - S41909SPS03_v0007ms
      - BW4HANA2021SPS01_v0002ms
      - HANA_2_00_055_v0005ms
      - NW750SPS20_v0002ms

  - name:                              sap_fqdn
    displayName:                       SAP Fully Qualified Domain Name
    type:                              string
    default:                           sap.contoso.net

  - name:                              base_os_configuration
    displayName:                       Core Operating System Configuration
    type:                              boolean
    default:                           true

  - name:                              sap_os_configuration
    displayName: SAP Operating System Configuration
    type:                              boolean
    default:                           true

  - name:                              bom_processing
    displayName: Software Acquisition
    type:                              boolean
    default:                           true

  - name:                              database_install
    displayName: Database Installation
    type:                              boolean
    default:                           true

  - name:                              scs_installation
    displayName: SCS Installation
    type:                              boolean
    default:                           true

  - name:                              db_load
    displayName: Database Load
    type:                              boolean
    default:                           true

  - name:                              pas_installation
    displayName: PAS Installation
    type:                              boolean
    default:                           true

  - name:                              application_server_installation
    displayName: APP Installation
    type:                              boolean
    default:                           true

  - name:                              webdispatcher_installation
    displayName:                       WebDispatcher Installation
    type:                              boolean
    default:                           false

  - name:                              high_availability_configuration
    displayName:                       SAP & DB High Availability Setup
    type:                              boolean
    default:                           false

trigger:                               none

pool:
  name:                                $(Agent)

variables:
  - group:                             "SDAF-General"
  - group:                             SDAF-${{ parameters.environment }}
  - name:                              sap_system_folder
    value:                             ${{ parameters.sap_system }}
  - name:                              sap_system_configuration
    value:                             ${{ parameters.sap_system }}.tfvars
  - name:                              bom
    value:                             ${{ parameters.bom_base_name }}
  - name:                              fqdn
    value:                             ${{ parameters.sap_fqdn }}

stages:
  - stage:                             Preparation_for_Ansible
    displayName:                       Preparation steps
    jobs:
      - job:                           Preparation_step
        displayName:                   Preparation steps
        workspace:
          clean:                       all
        steps:
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME
              echo -e "$green--- Validations ---$reset"
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration) ]; then
                  echo -e "$boldred--- $(sap_system_configuration) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(sap_system_configuration) was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration)
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                export SID=$(echo $(sap_system_folder)  | awk -F'-' '{print $4}' | xargs) ; echo SID $SID
                if [ ! -n ${SID} ]; then
                  echo "##vso[task.logissue type=error]SID was not found in $(sap_system_configuration)."
                  exit 2
                fi
                echo "##vso[task.setvariable variable=SAP_PARAMETERS;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml"
                echo "##vso[task.setvariable variable=FOLDER;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)"
                echo "##vso[task.setvariable variable=DEPLOYMENT_REPO_PATH;isOutput=true]$(Build.Repository.LocalPath)"
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found."
                  exit 2
                fi
                echo "##vso[task.setvariable variable=HOSTS;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml"
                echo $DEPLOYMENT_REPO_PATH
              echo -e "$green--- Add BOM Base Name and SAP FQDN to sap-parameters.yaml ---$reset"
                sed -i 's|bom_base_name:.*|bom_base_name:                 '"$(bom)"'|'  SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                sed -i 's|sap_fqdn:.*|sap_fqdn:                      '"$(fqdn)"'|'      SYSTEM/$(sap_system_folder)/sap-parameters.yaml
              echo -e "$green--- Get SID and copy hosts file over for ansible runs ---$reset"
                cp -p $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml $(Build.Repository.LocalPath)/sap_hosts.yaml
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Get sshkey to connect to SAP VMs ---$reset"
                export ENV=$(echo $(sap_system_folder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(sap_system_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location $LOCA
                export VNET=$(echo $(sap_system_folder) | awk -F'-' '{print $3}' | xargs) ; echo VNET $VNET
                export kv_name=$(cat .sap_deployment_automation/${ENV}${LOCA}  | grep workloadkeyvault | awk -F'=' '{print $2}' | xargs) ; echo SAP_Keyvault $kv_name
                az keyvault secret show --name ${ENV}-${LOCA}-${VNET}-sid-sshkey --vault-name $kv_name --query value -o tsv > $(Build.Repository.LocalPath)/sshkey
                chmod 600 $(Build.Repository.LocalPath)/sshkey
                echo $(Build.Repository.LocalPath)/sshkey
                
                echo "##vso[task.setvariable variable=SSHKEY;isOutput=true]$(Build.Repository.LocalPath)/sshkey"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull --append origin $(Branch)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                added=0
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/sap-parameters.yaml ]; then
                  git add  $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin HEAD:$(Branch)
                fi
            name:                      Preparation
            displayName:               Preparation for Ansible
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
            failOnStderr:              false

  - stage:                             Core_Operating_System_Configuration
    displayName:                       Core Operating System Configuration
    condition:                         eq(${{ parameters.base_os_configuration }}, true)
    dependsOn:
      - Preparation_for_Ansible
    jobs:
      - job:                           Core_Operating_System_Configuration
        displayName:                   Core Operating System Configuration
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        
        steps:
          - checkout:                  none
            persistCredentials:        true
          - script: |
              echo $(SID_hosts)
              echo $(SAP_parameters)
              echo $(parameters_folder)
              echo $(key_path)
              echo $(DEPLOYMENT_REPO_PATH)
          - task:                      Ansible@0
            displayName:               Core Operating System Configuration
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_01_os_base_config.yaml"

              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false

            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          
            

  - stage:                             SAP_Operating_System_Configuration
    displayName:                       SAP Operating System Configuration
    condition:                         eq(${{ parameters.sap_os_configuration }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
    jobs:
      - job:                           SAP_Operating_System_Configuration
        displayName:                   SAP Operating System Configuration
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               SAP Operating System Configuration
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_02_os_sap_specific_config.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)
            continueOnError:           false

  - stage:                             Software_Acquisition
    displayName:                       Software Acquisition
    condition:                         eq(${{ parameters.bom_processing }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
      - SAP_Operating_System_Configuration
    jobs:
      - job:                           Software_Acquisition
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               Software Acquisition
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_03_bom_processing.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: Database_Installation
    displayName:                       Database Installation
    condition:                         eq(${{ parameters.database_install }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
    jobs:
      - job:                           Database_Installation
        displayName:                   Database Installation
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               Database Installation
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_04_00_00_db_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)
            continueOnError:           false

  - stage: SCS_Installation
    displayName:                       SCS Installation
    condition:                         eq(${{ parameters.scs_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
    jobs:
      - job:                           SCS_Installation
        displayName:                   SCS Installation
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - task:                      Ansible@0
            displayName:               SCS Installation
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_00_00_sap_scs_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: Database_Load
    displayName:                       Database Load
    condition:                         eq(${{ parameters.db_load }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
    jobs:
      - job:                           Database_Load
        displayName:                   Database Load
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               Database Load
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_01_sap_db_load.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: PAS_Installation
    displayName:                       PAS Installation
    condition:                         eq(${{ parameters.pas_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
    jobs:
      - job:                           PAS_Installation
        displayName:                   PAS Installation
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               PAS Installation
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_02_sap_pas_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: APP_Install
    displayName:                       Application Server Install
    condition:                         eq(${{ parameters.application_server_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
    jobs:
      - job:                           APP_Install
        displayName:                   Application Server Install
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               Application Server Install
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_03_sap_app_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: WebDispatcher_Installation
    displayName:                       WebDispatcher Installation
    condition:                         eq(${{ parameters.webdispatcher_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
      - APP_Install
    jobs:
      - job:                           WebDispatcher_Installation
        displayName:                   WebDispatcher Installation
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               WebDispatcher Installation
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_04_sap_web_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(SID_hosts)
              args:                    '--private-key $(key_path) -e "@$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            continueOnError:           false          

  - stage: HighAvailability_Setup
    displayName:                       High Availability Setup
    condition:                         eq(${{ parameters.high_availability_configuration }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - Database_Load
    jobs:
      - job:                           HighAvailability_Setup
        displayName:                   High Availability Setup
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - bash: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Performing the HA configuration for $(sap_system_folder)"
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)

                cd $HOME
              echo -e "$green--- Pull the latest content from DevOps ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git pull
              echo -e "$green--- Validations ---$reset"
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration) ]; then
                  echo -e "$boldred--- $(sap_system_configuration) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(sap_system_configuration) was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration)
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                export SID=$(echo $(sap_system_folder)  | awk -F'-' '{print $4}' | xargs) ; echo SID $SID
                if [ ! -n ${SID} ]; then
                  echo "##vso[task.logissue type=error]SID was not found in $(sap_system_configuration)."
                  exit 2
                fi
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found."
                  exit 2
                fi
              echo -e "$green--- Get SID and copy hosts file over for ansible runs ---$reset"
                cp -p $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml $(Build.Repository.LocalPath)/sap_hosts.yaml
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Get sshkey to connect to SAP VMs ---$reset"
                export ENV=$(echo $(sap_system_folder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(sap_system_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location $LOCA
                export VNET=$(echo $(sap_system_folder) | awk -F'-' '{print $3}' | xargs) ; echo VNET $VNET
                export kv_name=$(cat .sap_deployment_automation/${ENV}${LOCA}  | grep workloadkeyvault | awk -F'=' '{print $2}' | xargs) ; echo SAP_Keyvault $kv_name
                az keyvault secret show --name ${ENV}-${LOCA}-${VNET}-sid-sshkey --vault-name $kv_name --query value -o tsv > $(Build.Repository.LocalPath)/sshkey

                password_secret=$(az keyvault secret show --vault-name ${kv_name} --name ${ENV}-${LOCA}-${VNET}-sid-password | jq -r .value)
                export ANSIBLE_PASSWORD=$password_secret
                chmod 600 $(Build.Repository.LocalPath)/sshkey
                
                cd $HOME/SYSTEM/$(sap_system_folder)
                
                export           ANSIBLE_HOST_KEY_CHECKING=False
                export           ANSIBLE_COLLECTIONS_PATHS=/opt/ansible/collections${ANSIBLE_COLLECTIONS_PATHS:+${ANSIBLE_COLLECTIONS_PATHS}}
                export           ANSIBLE_REMOTE_USER=azureadm
                export           ANSIBLE_PYTHON_INTERPRETER=auto_silent
                unset ANSIBLE_BECOME_EXE
                export           ANSIBLE_CALLBACK_WHITELIST=profile_tasks
                # Don't show the skipped hosts
                export ANSIBLE_DISPLAY_SKIPPED_HOSTS=false

                #pb=playbook_tester.yaml
                pb=playbook_04_00_01_db_ha.yaml
 
                ansible-playbook -i $(Build.Repository.LocalPath)/sap_hosts.yaml ${DEPLOYMENT_REPO_PATH}/deploy/ansible/$pb  --private-key $(Build.Repository.LocalPath)/sshkey -e @$HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml -e ansible_ssh_pass='{{ lookup("env", "ANSIBLE_PASSWORD") }}' -e "_workspace_directory=@$HOME/SYSTEM/$(sap_system_folder)" $(ExtraParams)  
                rm $(Build.Repository.LocalPath)/sshkey

                return_code=$?
                echo "Return code from ansible-playbook $return_code."
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from remover.sh $return_code."
                fi
              exit $return_code
            name: HA
            displayName: HA Ansible

  - stage: Post_Installation_Steps
    displayName:                       Post Installation Steps
    condition:                         always()
    jobs:
      - job:                           Post_Installation_Steps
        displayName:                   Post Installation Steps
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          key_path:                    $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SSHKEY'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - checkout:                  none
            persistCredentials:        true
          - task:                      PostBuildCleanup@3
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops Ansible deployment $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/${SID}.md ]; then
                  echo "##vso[task.uploadsummary]$HOME/SYSTEM/$(sap_system_folder)/${SID}.md"
                fi

            displayName:               Copy Log files
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)    
            failOnStderr:              false

...
