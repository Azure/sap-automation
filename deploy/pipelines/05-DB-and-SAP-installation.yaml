---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline performs the software installation             |
# |              and must run on a self hosted deployment agent                |
# |                      due to long run time                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

parameters:
  - name: sap_system_configuration_name
    displayName: "SAP System configuration name, use the following syntax: ENV-LOCA-VNET-SID"
    type: string
    default: DEV-WEEU-SAP01-X00

  - name: environment
    displayName: Workload Environment (DEV, QUA, PRD, ...)
    type: string
    default: DEV

  - name: bom_base_name
    displayName: Bill of Materials name
    type: string
    values:
      - S4HANA_2021_ISS_v0001ms
      - S42020SPS04_v0001ms
      - S41909SPS03_v0011ms
      - HANA_2_00_063_v0001ms
      - HANA_2_00_061_v0001ms
      - HANA_2_00_059_v0003ms
      - HANA_2_00_055_v0006ms
      - NW750SPS20_v0004ms
      - NW752SPS09_v0001ms
      - ORACLE_19_00_v0002ms
      - NW750SPS20_DB2_v0001ms
      - ORACLE_19_00_ORA_MSID_v0002ms

  - name: base_os_configuration
    displayName: Core Operating System Configuration
    type: boolean
    default: true

  - name: sap_os_configuration
    displayName: SAP Operating System Configuration
    type: boolean
    default: true

  - name: bom_processing
    displayName: Software Acquisition
    type: boolean
    default: true

  - name: database_install
    displayName: Database Installation
    type: boolean
    default: true

  - name: scs_installation
    displayName: SCS Installation
    type: boolean
    default: true

  - name: db_load
    displayName: Database Load
    type: boolean
    default: true

  - name: high_availability_configuration
    displayName: SAP & DB High Availability Setup
    type: boolean
    default: true

  - name: pas_installation
    displayName: PAS Installation
    type: boolean
    default: true

  - name: application_server_installation
    displayName: APP Installation
    type: boolean
    default: true

  - name: webdispatcher_installation
    displayName: WebDispatcher Installation
    type: boolean
    default: false

  # 20220929 MKD - ACSS Registration <BEGIN>
  - name: acss_registration
    displayName: Register System in ACSS
    type: boolean
    default: true

  - name: acss_environment
    displayName: ACSS Prod/NonProd
    type: string
    values:
      - NonProd
      - Prod

  - name: acss_sap_product
    displayName: System Type
    type: string
    values:
      - S4HANA
      - ECC
      - Other
  # 20220929 MKD - ACSS Registration <END>

  - name: sap_automation_repo_path
    displayName: The local path on the agent where the sap_automation repo can be found
    type: string

  - name: config_repo_path
    displayName: The local path on the agent where the config repo can be found
    type: string

stages:
  - stage: Preparation_for_Ansible
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Preparation steps
    jobs:
      - job: Preparation_step
        displayName: Preparation steps
        workspace:
          clean: all
        steps:
          - task: PostBuildCleanup@3
          - checkout: sap-automation
          - checkout: self
            persistCredentials: true
            fetchDepth: 0
          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              if [[ ! -f /etc/profile.d/deploy_server.sh ]]; then
                echo -e "$green --- Install dos2unix ---$reset"
                  sudo apt-get -qq install dos2unix
              fi
              echo -e "$green--- --- Convert config file to UX format ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export HOME=${CONFIG_REPO_PATH}/$(Deployment_Configuration_Path)
                cd $HOME

              echo -e "$green--- Configure devops CLI extension ---$reset"
                devops_extension_installed=$(az extension list --query [].path | grep azure-devops)
                if [ -z "$devops_extension_installed" ]; then
                  az extension add --name azure-devops --output none
                fi
                az devops configure -d organization=$(System.CollectionUri)
                az devops configure -d project=$(System.TeamProject)

              echo -e "$green--- Validations ---$reset"
                ENVIRONMENT=$(echo ${SAP_SYSTEM_CONFIGURATION_NAME} | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
                   LOCATION=$(echo ${SAP_SYSTEM_CONFIGURATION_NAME} | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION
                    NETWORK=$(echo ${SAP_SYSTEM_CONFIGURATION_NAME} | awk -F'-' '{print $3}' | xargs) ; echo Virtual network logical name $NETWORK
                        SID=$(echo ${SAP_SYSTEM_CONFIGURATION_NAME} | awk -F'-' '{print $4}' | xargs) ; echo SID $SID

                environment_file_name=$HOME/.sap_deployment_automation/$ENVIRONMENT$LOCATION$NETWORK ; echo configuration_file $environment_file_name
                          params_file=$HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/sap-parameters.yaml              ;  echo sap_parameters_file $params_file

              if [ "azure pipelines" = "$(this_agent)" ]; then
                  echo "##vso[task.logissue type=error]Please use a self hosted agent for this playbook. Define it in the SDAF-${ENVIRONMENT} variable group using the 'POOL' variable."
                  exit 2
                fi

                if [ ! -f $environment_file_name ]; then
                  echo -e "$boldred--- $environment_file_name was not found ---$reset"
                  echo "##vso[task.logissue type=error]Workload zone configuration file $environment_file_name was not found."
                  exit 2
                fi

                if [ ! -f $params_file ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/sap-parameters.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/sap-parameters.yaml was not found."
                  exit 2
                else
                  dos2unix -q $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/sap-parameters.yaml
                fi

                if [ ! -n ${SID} ]; then
                  echo "##vso[task.logissue type=error]SID was not found in ${SAP_SYSTEM_CONFIGURATION_NAME}."
                  exit 2
                fi

                if [ ! -f $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}_hosts.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}_hosts.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}_hosts.yaml was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}_hosts.yaml

                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]")
                echo '$(variable_group) id: ' $VARIABLE_GROUP_ID
                if [ -z ${VARIABLE_GROUP_ID} ]; then
                    echo "##vso[task.logissue type=error]Variable group $(variable_group) could not be found."
                    exit 2
                fi

                echo "##vso[build.updatebuildnumber]Deploying ${SAP_SYSTEM_CONFIGURATION_NAME} using BoM ${BOM_BASE_NAME}"

                echo "##vso[task.setvariable variable=SID;isOutput=true]${SID}"
                echo "##vso[task.setvariable variable=SAP_PARAMETERS;isOutput=true]sap-parameters.yaml"
                echo "##vso[task.setvariable variable=FOLDER;isOutput=true]$HOME/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}"
                echo "##vso[task.setvariable variable=HOSTS;isOutput=true]${SID}_hosts.yaml"

              echo -e "$green--- Get Files from the DevOps Repository ---$reset"
                cd ${CONFIG_REPO_PATH}/$(Deployment_Configuration_Path)/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}
                sap_params_updated=0

              echo -e "$green--- Add BOM Base Name and SAP FQDN to sap-parameters.yaml ---$reset"
                sed -i 's|bom_base_name:.*|bom_base_name:                 '"$BOM_BASE_NAME"'|'  sap-parameters.yaml

                fqdn="$(grep -m1 "$sap_fqdn:" sap-parameters.yaml | cut -d':' -f2-  | tr -d ' ' | tr -d '"')"
                if [ -z $fqdn ] ; then
                  sed -i 's|sap_fqdn:.*|sap_fqdn:                      '"$(sap_fqdn)"'|'  sap-parameters.yaml
                fi

              echo -e "$green--- Get connection details ---$reset"
                mkdir -p artifacts

                az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "${NETWORK}"Workload_Key_Vault.value | tr -d \")
                if [ -z ${az_var} ]; then
                  export workload_key_vault=$(cat "${environment_file_name}"  | grep workload_key_vault      | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault' ${workload_key_vault}
                else
                  export workload_key_vault=${az_var} ; echo 'Workload Key Vault' ${workload_key_vault}
                fi

                echo "##vso[task.setvariable variable=SSH_KEY_NAME;isOutput=true]${ENVIRONMENT}-${LOCATION}-${NETWORK}-sid-sshkey"
                echo "##vso[task.setvariable variable=VAULT_NAME;isOutput=true]$workload_key_vault"

              echo -e "$green--- az login ---$reset"
                #If the deployer_file exists we run on a deployer configured by the framework instead of a azdo hosted one
                deployer_file=/etc/profile.d/deploy_server.sh
                if [ -f "$deployer_file" ]; then
                  az login --identity --allow-no-subscriptions --output none
                else
                  az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID --output none
                  az account set --subscription $AZURE_SUBSCRIPTION_ID
                fi

                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $AZURE_SUBSCRIPTION_ID

                az keyvault secret show --name ${ENVIRONMENT}-${LOCATION}-${NETWORK}-sid-sshkey --vault-name $workload_key_vault --query value -o tsv > artifacts/${SAP_SYSTEM_CONFIGURATION_NAME}_sshkey
                cp sap-parameters.yaml artifacts/.
                cp ${SID}_hosts.yaml artifacts/.

                2> >(while read line; do (>&2 echo "STDERROR: $line"); done)
            name: Preparation
            displayName: Preparation for Ansible
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
              ANSIBLE_HOST_KEY_CHECKING: false
              AZURE_CLIENT_ID: $(ARM_CLIENT_ID)
              AZURE_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              AZURE_TENANT_ID: $(ARM_TENANT_ID)
              AZURE_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              CONFIG_REPO_PATH: ${{ parameters.config_repo_path }}
              BOM_BASE_NAME: ${{ parameters.bom_base_name }}
              SAP_SYSTEM_CONFIGURATION_NAME: ${{ parameters.sap_system_configuration_name }}
            failOnStderr: true
          - publish: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/artifacts
            artifact: ansible_data

  - stage: Validate_Parameters
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Validate the input parameters
    condition: always()
    dependsOn:
      - Preparation_for_Ansible
    jobs:
      - job: Validate_Parameters
        displayName: Validate the input parameters
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Validate the input parameters"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_00_validate_parameters.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

  - stage: Core_Operating_System_Configuration
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Core Operating System Configuration

    dependsOn:
      - Preparation_for_Ansible
      - Validate_Parameters
    condition: |
      and
      (
        eq(${{ parameters.base_os_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: Core_Operating_System_Configuration
        displayName: Core Operating System Configuration
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          SAP_AUTOMATION_REPO_PATH: ${{ parameters.sap_automation_repo_path }}

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Core Operating System Configuration"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_01_os_base_config.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

  - stage: SAP_Operating_System_Configuration
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: SAP Operating System Configuration

    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
    condition: |
      and
      (
        eq(${{ parameters.sap_os_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: SAP_Operating_System_Configuration
        displayName: SAP Operating System Configuration
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          SAP_AUTOMATION_REPO_PATH: ${{ parameters.sap_automation_repo_path }}

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "SAP Operating System Configuration"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_02_os_sap_specific_config.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

  - stage: Software_Acquisition
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Software Acquisition

    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
      - SAP_Operating_System_Configuration
    condition: |
      and
      (
        eq(${{ parameters.bom_processing }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: Software_Acquisition
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          SAP_AUTOMATION_ROOT_PATH: ${{ parameters.sap_automation_repo_path }}

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Software Acquisition"
              ansibleFilePath: $(SAP_AUTOMATION_ROOT_PATH)/deploy/ansible/playbook_03_bom_processing.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

  - stage: Database_Installation
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Database Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
    condition: |
      and
      (
        eq(${{ parameters.database_install }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: Database_Installation
        displayName: Database Installation
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Database Installation"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_04_00_00_db_install.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: SCS_Installation
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: SCS Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
    condition: |
      and
      (
        eq(${{ parameters.scs_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: SCS_Installation
        displayName: SCS Installation
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "SCS Installation"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_05_00_00_sap_scs_install.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: Database_Load
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Database Load
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
    condition: |
      and
      (
        eq(${{ parameters.db_load }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.SCS_Installation.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: Database_Load
        displayName: Database Load
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Database Load"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_05_01_sap_dbload.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: HighAvailability_Setup
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: High Availability Setup

    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - Database_Load
    condition: |
      and
      (
        eq(${{ parameters.high_availability_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: HighAvailability_Setup
        displayName: High Availability Setup
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "High Availability Setup"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_04_00_01_db_ha.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

  - stage: PAS_Installation
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: PAS Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - HighAvailability_Setup
      - Database_Load
    condition: |
      and
      (
        eq(${{ parameters.pas_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: PAS_Installation
        displayName: PAS Installation
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "PAS Installation"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_05_02_sap_pas_install.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: APP_Install
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Application Server Install
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
    condition: |
      and
      (
        eq(${{ parameters.application_server_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        in(dependencies.PAS_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job: APP_Install
        displayName: Application Server Install
        timeoutInMinutes: 0
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "Application Server Install"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_05_03_sap_app_install.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: WebDispatcher_Installation
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: WebDispatcher Installation
    condition: eq(${{ parameters.webdispatcher_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
      - APP_Install
    jobs:
      - job: WebDispatcher_Installation
        displayName: WebDispatcher Installation
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]

        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - template: templates\run-ansible.yaml
            parameters:
              displayName: "WebDispatcher Installation"
              ansibleFilePath: ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_05_04_sap_web_install.yaml
              privateKey: $(Pipeline.Workspace)/ansible_data/${{ parameters.sap_system_configuration_name }}_sshkey
              parametersFolder: "_workspace_directory=$(parameters_folder)"
              sapParams: "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)"
              sidHosts: $(SID_hosts)
              extraParams: $(ExtraParams)
              azureClientId: $(ARM_CLIENT_ID)
              azureClientSecret: $(ARM_CLIENT_SECRET)
              azureTenantId: $(ARM_TENANT_ID)
              azureSubscriptionId: $(ARM_SUBSCRIPTION_ID)

          - template: templates\collect-log-files.yaml
            parameters:
              logPath: ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)/SYSTEM/${{ parameters.sap_system_configuration_name }}/logs

  - stage: Post_Installation_Steps
    variables:
      - template: variables/05-DB-and-SAP-installation-variables.yaml
        parameters:
          environment: ${{ parameters.environment }}
    displayName: Post Installation Steps
    condition: always()
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - HighAvailability_Setup
      - Database_Load
      - PAS_Installation
      - APP_Install
      - WebDispatcher_Installation
    jobs:
      - job: Post_Installation_Steps
        displayName: Post Installation Steps
        variables:
          SID_hosts: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder: $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          CONFIG_REPO_PATH: ${{ parameters.config_repo_path }}
        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          - script: |
              #!/bin/bash
              if [ -f $CONFIG_REPO_PATH/$(Deployment_Configuration_Path)/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}.md ]; then
                echo "##vso[task.uploadsummary]$CONFIG_REPO_PATH/$(Deployment_Configuration_Path)/SYSTEM/${SAP_SYSTEM_CONFIGURATION_NAME}/${SID}.md"
              fi
            displayName: Copy system specifications
            env:
              CONFIG_REPO-PATH: $(CONFIG_REPO_PATH)
            failOnStderr: false

  # 20220929 MKD - ACSS Registration <BEGIN>
  - stage: ACSS_Registration
    displayName: Register System in ACSS
    condition: eq(${{ parameters.acss_registration }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
      - APP_Install
      - WebDispatcher_Installation
      - Post_Installation_Steps
    jobs:
      - job: ACSS_Registration
        displayName: Register System in ACSS
        steps:
          - template: templates\download.yaml
            parameters:
              configurationName: ${{ parameters.sap_system_configuration_name }}

          # Parameters Required:
          #   parameters.acss_environment                     = Prod|NonProd
          #   parameters.acss_sap_product                     = S4HANA|ECC|Other
          #   parameters.sap_system_configuration_name        = ENV-REGION-VNET-SID
          #   ARM_CLIENT_ID                                   = 00000000-0000-0000-0000-000000000000
          #   ARM_CLIENT_SECRET                               = ****
          #   ARM_SUBSCRIPTION_ID                             = 00000000-0000-0000-0000-000000000000
          #   ARM_TENANT_ID                                   = 00000000-0000-0000-0000-000000000000
          #   SAP_SYSTEM_FOLDER                               = ENV-REGION-VNET-SID
          #   TERRAFORM_REMOTE_STORAGE_RESOURCE_GROUP_NAME    = ENV-REGION-SAP_LIBRARY
          #   TERRAFORM_REMOTE_STORAGE_ACCOUNT_NAME           = xxxxxxxxxxxxxxxxxxx
          - script: |
              #!/bin/bash

              #--------------------------------------+---------------------------------------8
              #                                                                              |
              # Setup variables                                                              |
              #                                                                              |
              #--------------------------------------+---------------------------------------8
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              __basedir=`pwd`
              acss_environment=${{ parameters.acss_environment }}
              acss_sap_product=${{ parameters.acss_sap_product }}
              acss_workloads_extension_url="https://github.com/Azure/Azure-Center-for-SAP-solutions-preview/raw/main/CLI_Documents/ACSS_CLI_Extension/workloads-0.1.0-py3-none-any.whl"
              #--------------------------------------+---------------------------------------8



              #--------------------------------------+---------------------------------------8
              #                                                                              |
              # Install ACSS Workloads extension for Azure CLI                               |
              #                                                                              |
              #--------------------------------------+---------------------------------------8
              set -x
              if [ -z "$(az extension list | grep \"name\": | grep \"workloads\")" ]
              then
                echo -e "$green--- Installing ACSS \"Workloads\" CLI extension ---$reset"
                wget $acss_workloads_extension_url || exit 1
                az extension add --source=./workloads-0.1.0-py3-none-any.whl --yes || exit 1
              else
                echo -e "$green--- ACSS \"Workloads\" CLI extension already installed ---$reset"
              fi
              set +x
              #--------------------------------------+---------------------------------------8



              #--------------------------------------+---------------------------------------8
              #                                                                              |
              # Authenticate to Azure                                                        |
              #                                                                              |
              #--------------------------------------+---------------------------------------8
              az login --service-principal --username $(ARM_CLIENT_ID) --password $ARM_CLIENT_SECRET --tenant $(ARM_TENANT_ID)  --output none
              #--------------------------------------+---------------------------------------8



              #--------------------------------------+---------------------------------------8
              #                                                                              |
              # Initialize Terraform and access State File                                   |
              #                                                                              |
              #--------------------------------------+---------------------------------------8
              # Get Terraform State Outputs
              # TODO: Should test if Terraform is available or needs to be installed
              #
              echo -e "$green--- Initializing Terraform for: ${{ parameters.sap_system_configuration_name }} ---$reset"
              __configDir=${__basedir}/WORKSPACES/SYSTEM/${SAP_SYSTEM_FOLDER}
              __moduleDir=${__basedir}/deploy/terraform/run/sap_system/
              TF_DATA_DIR=${__configDir}

              cd ${__configDir}

              # Init Terraform
              __output=$( \
              terraform -chdir="${__moduleDir}"                                                       \
              init -upgrade=true                                                                      \
              --backend-config "subscription_id=${ARM_SUBSCRIPTION_ID}"                               \
              --backend-config "resource_group_name=${TERRAFORM_REMOTE_STORAGE_RESOURCE_GROUP_NAME}"  \
              --backend-config "storage_account_name=${TERRAFORM_REMOTE_STORAGE_ACCOUNT_NAME}"        \
              --backend-config "container_name=tfstate"                                               \
              --backend-config "key=${SAP_SYSTEM_FOLDER}.terraform.tfstate"                           \
              )
              [ $? -ne 0 ] && echo "$__output" && exit 1
              echo -e "$green--- Successfully configured the backend "azurerm"! Terraform will automatically use this backend unless the backend configuration changes. ---$reset"

              # Fetch values from Terraform State file
              acss_scs_vm_id=$(     terraform -chdir="${__moduleDir}" output scs_vm_ids                  | awk -F\" '{print $2}' | tr -d '\n\r\t[:space:]')
              acss_sid=$(           terraform -chdir="${__moduleDir}" output sid                         | tr -d '"')
              acss_resource_group=$(terraform -chdir="${__moduleDir}" output created_resource_group_name | tr -d '"')
              acss_location=$(      terraform -chdir="${__moduleDir}" output region                      | tr -d '"')

              unset TF_DATA_DIR __configDir __moduleDir __output
              cd $__basedir
              #--------------------------------------+---------------------------------------8



              #--------------------------------------+---------------------------------------8
              #                                                                              |
              # Register in ACSS                                                             |
              #                                                                              |
              #--------------------------------------+---------------------------------------8
              echo -e "$green--- Registering SID: $acss_sid in ACSS ---$reset"

              # Create JSON Payload as variable
              acss_configuration=$(cat << EOF
                {
                  "configurationType": "Discovery",
                  "centralServerVmId": "${acss_scs_vm_id}"
                }
              EOF
              )

              # ACSS Registration Command
              set -x

              az workloads sap-virtual-instance create              \
              --sap-virtual-instance-name  "${acss_sid}"            \
              --resource-group             "${acss_resource_group}" \
              --location                   "${acss_location}"       \
              --environment                "${acss_environment}"    \
              --sap-product                "${acss_sap_product}"    \
              --configuration              "${acss_configuration}"  \
               || exit 1

              set +x
              #--------------------------------------+---------------------------------------8

            displayName: ACSS Registration
            env:
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
# 20220929 MKD - ACSS Registration <BEND>

