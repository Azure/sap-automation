---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline performs the software installation             |
# |              and must run on a self hosted deployment agent                |
# |                      due to long run time                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name:                                  OS Configuration and SAP Installation $(sap_system_folder) $(bom)

parameters:
  - name:                              sap_system_configuration_name
    displayName:                       "SAP System configuration name, use the following syntax: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           DEV-WEEU-SAP01-X00

  - name:                              environment
    displayName:                       Workload Environment (DEV, QUA, PRD, ...)
    type:                              string
    default:                           DEV

  - name:                              bom_base_name
    displayName:                       Bill of Materials name
    type:                              string
    values:
      - S4HANA_2021_ISS_v0001ms
      - S42020SPS04_v0001ms
      - S41909SPS03_v0011ms
      - HANA_2_00_063_v0001ms
      - HANA_2_00_061_v0001ms
      - HANA_2_00_059_v0003ms
      - HANA_2_00_055_v0006ms
      - NW750SPS20_v0004ms
      - NW752SPS09_v0001ms
      - ORACLE_19_00_v0002ms
      - ORACLE_19_00_ORA_MSID_v0002ms

  - name:                              base_os_configuration
    displayName:                       Core Operating System Configuration
    type:                              boolean
    default:                           true

  - name:                              sap_os_configuration
    displayName: SAP Operating System Configuration
    type:                              boolean
    default:                           true

  - name:                              bom_processing
    displayName: Software Acquisition
    type:                              boolean
    default:                           true

  - name:                              database_install
    displayName: Database Installation
    type:                              boolean
    default:                           true

  - name:                              scs_installation
    displayName: SCS Installation
    type:                              boolean
    default:                           true

  - name:                              db_load
    displayName: Database Load
    type:                              boolean
    default:                           true

  - name:                              high_availability_configuration
    displayName:                       SAP & DB High Availability Setup
    type:                              boolean
    default:                           true

  - name:                              pas_installation
    displayName: PAS Installation
    type:                              boolean
    default:                           true

  - name:                              application_server_installation
    displayName: APP Installation
    type:                              boolean
    default:                           true

  - name:                              webdispatcher_installation
    displayName:                       WebDispatcher Installation
    type:                              boolean
    default:                           false

trigger:                               none

variables:
  - group:                             "SDAF-General"
  - group:                             SDAF-${{ parameters.environment }}

  - name:                              sap_system_folder
    value:                             ${{ parameters.sap_system_configuration_name }}

  - name:                              bom
    value:                             ${{ parameters.bom_base_name }}

  - name:                              agent_name
    value:                             $[coalesce(variables['POOL'], variables['Agent'])]

  - name:                              this_agent
    value:                             $[lower(coalesce(variables['POOL'], variables['Agent']))]

  - name:                              variable_group
    value:                             SDAF-${{ parameters.environment }}

pool:
  name:                                $[coalesce(variables['POOL'], variables['Agent'])]

stages:
  - stage:                             Preparation_for_Ansible
    displayName:                       Preparation steps
    jobs:
      - job:                           Preparation_step
        displayName:                   Preparation steps
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
            submodules:                true

          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              if [[ ! -f /etc/profile.d/deploy_server.sh ]]; then
                echo -e "$green --- Install dos2unix ---$reset"
                  sudo apt-get -qq install dos2unix
              fi
              echo -e "$green--- --- Convert config file to UX format ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME

              echo -e "$green--- Configure devops CLI extension ---$reset"
                devops_extension_installed=$(az extension list --query [].path | grep azure-devops)
                if [ -z "$devops_extension_installed" ]; then
                  az extension add --name azure-devops --output none
                fi
                az devops configure -d organization=$(System.CollectionUri)
                az devops configure -d project=$(System.TeamProject)

              echo -e "$green--- Validations ---$reset"
                ENVIRONMENT=$(echo $(sap_system_folder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENVIRONMENT
                   LOCATION=$(echo $(sap_system_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCATION
                    NETWORK=$(echo $(sap_system_folder) | awk -F'-' '{print $3}' | xargs) ; echo Virtual network logical name $NETWORK
                        SID=$(echo $(sap_system_folder) | awk -F'-' '{print $4}' | xargs) ; echo SID $SID

                environment_file_name=$HOME/.sap_deployment_automation/$ENVIRONMENT$LOCATION$NETWORK ; echo configuration_file $environment_file_name
                          params_file=$HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml              ;  echo sap_parameters_file $params_file

              if [[ "azure pipelines" == $(this_agent) ]]; then
                  echo "##vso[task.logissue type=error]Please use a self hosted agent for this playbook. Define it in the SDAF-${ENVIRONMENT} variable group using the 'POOL' variable."
                  exit 2
                fi

                if [ ! -f $environment_file_name ]; then
                  echo -e "$boldred--- $environment_file_name was not found ---$reset"
                  echo "##vso[task.logissue type=error]Workload zone configuration file $environment_file_name was not found."
                  exit 2
                fi

                if [ ! -f $params_file ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found."
                  exit 2
                else
                  dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                fi

                if [ ! -n ${SID} ]; then
                  echo "##vso[task.logissue type=error]SID was not found in $(sap_system_folder)."
                  exit 2
                fi

                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml

                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]")
                echo '$(variable_group) id: ' $VARIABLE_GROUP_ID
                if [ -z ${VARIABLE_GROUP_ID} ]; then
                    echo "##vso[task.logissue type=error]Variable group $(variable_group) could not be found."
                    exit 2
                fi


                echo "##vso[build.updatebuildnumber]Deploying $(sap_system_folder) using BoM ${bom_file}"

                echo "##vso[task.setvariable variable=SID;isOutput=true]${SID}"
                echo "##vso[task.setvariable variable=SAP_PARAMETERS;isOutput=true]sap-parameters.yaml"
                echo "##vso[task.setvariable variable=FOLDER;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)"
                echo "##vso[task.setvariable variable=DEPLOYMENT_REPO_PATH;isOutput=true]$(Build.Repository.LocalPath)"
                echo "##vso[task.setvariable variable=HOSTS;isOutput=true]${SID}_hosts.yaml"
                echo "##vso[task.setvariable variable=CONFIGURATION_NAME;isOutput=true]$(sap_system_folder)"

              echo -e "$green--- Get Files from the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)
                sap_params_updated=0

              echo -e "$green--- Add BOM Base Name and SAP FQDN to sap-parameters.yaml ---$reset"
                sed -i 's|bom_base_name:.*|bom_base_name:                 '"$(bom)"'|'  sap-parameters.yaml

                fqdn="$(grep -m1 "$sap_fqdn:" sap-parameters.yaml | cut -d':' -f2-  | tr -d ' ' | tr -d '"')"
                if [ -z $fqdn ] ; then
                  sed -i 's|sap_fqdn:.*|sap_fqdn:                      '"$(sap_fqdn)"'|'  sap-parameters.yaml
                fi

              echo -e "$green--- Get sshkey to connect to SAP VMs ---$reset"
                mkdir -p artifacts

                az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "${NETWORK}"Workload_Key_Vault.value | tr -d \")
                if [ -z ${az_var} ]; then
                  export workload_key_vault=$(cat "${environment_file_name}"  | grep workload_key_vault      | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault' ${workload_key_vault}
                else
                  export workload_key_vault=${az_var} ; echo 'Workload Key Vault' ${workload_key_vault}
                fi

              echo -e "$green--- az login ---$reset"

                az login --identity --allow-no-subscriptions --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az keyvault secret show --name ${ENVIRONMENT}-${LOCATION}-${NETWORK}-sid-sshkey --vault-name $workload_key_vault --query value -o tsv > artifacts/$(sap_system_folder)_sshkey
                cp sap-parameters.yaml artifacts/.
                cp ${SID}_hosts.yaml artifacts/.

                2> >(while read line; do (>&2 echo "STDERROR: $line"); done)
            name:                      Preparation
            displayName:               Preparation for Ansible
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              AZURE_DEVOPS_EXT_PAT:    $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ANSIBLE_HOST_KEY_CHECKING: false
            failOnStderr:              true
          - publish:                   $(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/artifacts
            artifact:                  ansible_data

  - stage:                             Validate_Parameters
    displayName:                       Validate the input parameters
    condition:                         always()
    dependsOn:
      - Preparation_for_Ansible
    jobs:
      - job:                           Validate_Parameters
        displayName:                   Validate the input parameters
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              echo $(SID_hosts)
              echo $(SAP_parameters)
              echo $(parameters_folder)
              echo $(DEPLOYMENT_REPO_PATH)
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               "Variables & Process sshkey"

          - task:                      Ansible@0
            displayName:               Validate the input parameters
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_00_validate_parameters.yaml"

              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)

              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false

            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false

  - stage:                             Core_Operating_System_Configuration
    displayName:                       Core Operating System Configuration
    dependsOn:
      - Preparation_for_Ansible
      - Validate_Parameters
    condition: |
      and
      (
        eq(${{ parameters.base_os_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           Core_Operating_System_Configuration
        displayName:                   Core Operating System Configuration
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               Core Operating System Configuration
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_01_os_base_config.yaml"

              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false

            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false

  - stage:                             SAP_Operating_System_Configuration
    displayName:                       SAP Operating System Configuration
    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
    condition: |
      and
      (
        eq(${{ parameters.sap_os_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           SAP_Operating_System_Configuration
        displayName:                   SAP Operating System Configuration
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               SAP Operating System Configuration
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_02_os_sap_specific_config.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false

  - stage:                             Software_Acquisition
    displayName:                       Software Acquisition
    dependsOn:
      - Preparation_for_Ansible
      - Core_Operating_System_Configuration
      - SAP_Operating_System_Configuration
    condition: |
      and
      (
        eq(${{ parameters.bom_processing }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           Software_Acquisition
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               Software Acquisition
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_03_bom_processing.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false

  - stage: Database_Installation
    displayName:                       Database Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
    condition: |
      and
      (
        eq(${{ parameters.database_install }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           Database_Installation
        displayName:                   Database Installation
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               Database Installation
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_04_00_00_db_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files

  - stage: SCS_Installation
    displayName:                       SCS Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
    condition: |
      and
      (
        eq(${{ parameters.scs_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           SCS_Installation
        displayName:                   SCS Installation
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               SCS Installation
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_00_00_sap_scs_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
              continueOnError:           true
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files


  - stage: Database_Load
    displayName:                       Database Load
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
    condition: |
      and
      (
        eq(${{ parameters.db_load }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.SCS_Installation.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           Database_Load
        displayName:                   Database Load
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               Database Load
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_01_sap_dbload.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           true
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files
  - stage:                             HighAvailability_Setup
    displayName:                       High Availability Setup
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - Database_Load
    condition: |
      and
      (
        eq(${{ parameters.high_availability_configuration }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           HighAvailability_Setup
        displayName:                   High Availability Setup
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               High Availability Setup
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_04_00_01_db_ha.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           false
            name: HA

  - stage: PAS_Installation
    displayName:                       PAS Installation
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - HighAvailability_Setup
      - Database_Load
    condition: |
      and
      (
        eq(${{ parameters.pas_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           PAS_Installation
        displayName:                   PAS Installation
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               PAS Installation
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_02_sap_pas_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent

              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           true
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull

                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files

  - stage: APP_Install
    displayName:                       Application Server Install
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
    condition: |
      and
      (
        eq(${{ parameters.application_server_installation }}, true),
        eq(dependencies.Preparation_for_Ansible.result, 'Succeeded'),
        in(dependencies.Software_Acquisition.result, 'Succeeded', 'Skipped'),
        in(dependencies.Database_Installation.result, 'Succeeded', 'Skipped'),
        in(dependencies.PAS_Installation.result, 'Succeeded', 'Skipped'),
        eq(dependencies.Validate_Parameters.result, 'Succeeded')
      )
    jobs:
      - job:                           APP_Install
        displayName:                   Application Server Install
        timeoutInMinutes:              0
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
            timeoutInMinutes:          0
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               Application Server Install
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_03_sap_app_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent

              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           true
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull

                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files

  - stage: WebDispatcher_Installation
    displayName:                       WebDispatcher Installation
    condition:                         eq(${{ parameters.webdispatcher_installation }}, true)
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - Database_Load
      - PAS_Installation
      - APP_Install
    jobs:
      - job:                           WebDispatcher_Installation
        displayName:                   WebDispatcher Installation
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SID:                         $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SID'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
          CONFIGURATION_NAME:          $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.CONFIGURATION_NAME'] ]

        steps:
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - download:                  current
            artifact:                  ansible_data
          - script: |
              sudo chmod 600 $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey
            displayName:               Process sshkey
          - task:                      Ansible@0
            displayName:               WebDispatcher Installation
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: "$(DEPLOYMENT_REPO_PATH)/deploy/ansible/playbook_05_04_sap_web_install.yaml"
              inventoriesAgentMachine: "file"
              inventoryFileOnAgentMachine: $(Pipeline.Workspace)/ansible_data/$(SID_hosts)
              args:                    '--private-key $(Pipeline.Workspace)/ansible_data/$(CONFIGURATION_NAME)_sshkey -e "@$(Pipeline.Workspace)/ansible_data/$(SAP_parameters)" -e "_workspace_directory=$(parameters_folder)" $(ExtraParams)'
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_HOST_KEY_CHECKING:     false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(DEPLOYMENT_REPO_PATH)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
            continueOnError:           true
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added Logs Database Installation $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
            displayName:               Copy Log files

  - stage: Post_Installation_Steps
    displayName:                       Post Installation Steps
    condition:                         always()
    dependsOn:
      - Preparation_for_Ansible
      - SAP_Operating_System_Configuration
      - Software_Acquisition
      - Database_Installation
      - SCS_Installation
      - HighAvailability_Setup
      - Database_Load
      - PAS_Installation
      - APP_Install
      - WebDispatcher_Installation
    jobs:
      - job:                           Post_Installation_Steps
        displayName:                   Post Installation Steps
        variables:
          SID_hosts:                   $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.HOSTS'] ]
          SAP_parameters:              $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.SAP_PARAMETERS'] ]
          parameters_folder:           $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.FOLDER'] ]
          DEPLOYMENT_REPO_PATH:        $[ stageDependencies.Preparation_for_Ansible.Preparation_step.outputs['Preparation.DEPLOYMENT_REPO_PATH'] ]
        steps:
          - task:                      PostBuildCleanup@3
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                git checkout -q $(Build.SourceBranchName)
                git branch --set-upstream-to=origin/$(Build.SourceBranchName)
                git pull
                cd $(Build.Repository.LocalPath)
                added=0
                if [ $(ls $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs/*.zip | wc -l ) -gt 0 ] ; then
                  git add --ignore-errors $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/logs
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Copy all Logs $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sap_system_folder)/${SID}.md ]; then
                  echo "##vso[task.uploadsummary]$HOME/SYSTEM/$(sap_system_folder)/${SID}.md"
                fi

            displayName:               Copy Log files
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              DEPLOYMENT_REPO_PATH:    $(DEPLOYMENT_REPO_PATH)
            failOnStderr:              false

...
