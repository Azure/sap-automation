# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:

- name: sap_system
  displayName: ENV-LOCA-VNET-SID
  type: string
  default: DEV-NOEU-SAP01-X00

- name: bom_base_name
  displayName: BOM Base Name
  type: string
  default: S41909SPS03_v0006ms

- name: sap_fqdn
  displayName: SAP Domain Name
  type: string
  default: sap.contoso.net

- name: baseosconfig
  displayName: Base OS Configuration
  type: boolean
  default: true

- name: saposconfig
  displayName: SAP specific OS Configuration
  type: boolean
  default: true

- name: bomprocessing
  displayName: BOM Processing
  type: boolean
  default: true

- name: dbinstall
  displayName: Database Install 
  type: boolean
  default: true

- name: scsinstall
  displayName: SCS Install
  type: boolean
  default: true

- name: dbload
  displayName: DB Load
  type: boolean
  default: true

- name: pasinstall
  displayName: PAS Install
  type: boolean
  default: true

- name: appinstall
  displayName: APP Install
  type: boolean
  default: true

- name: webdispinstall
  displayName: WebDisp Install
  type: boolean
  default: false

- name: highavailability
  displayName: SAP & DB High Availability
  type: boolean
  default: false

trigger:
  none

pool:
  name: $(agent)

variables:
  sapsystemfolder: ${{ parameters.sap_system }}
  sapsystemconfig: ${{ parameters.sap_system }}.tfvars
  bom: ${{ parameters.bom_base_name }}
  fqdn: ${{ parameters.sap_fqdn }}
  log: logfile_$(Build.BuildId)

name: $(sapsystemfolder)_$(bom)_$(fqdn)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Prepare_DB_SAP_Installation
  jobs:
  - job: Prepare_DB_SAP_Installation
    steps:
    - script: |
        #!/bin/bash
        green="\e[1;32m"
        reset="\e[0m"
        echo -e "$green--- Clone the $(Branch) branch of repository $(Repository) ---$reset"
          git clone --quiet --single-branch --branch $(Branch) $(Repository)
        echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and                                                       ---$reset"
        echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
          export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)/sap-hana
          echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
        echo -e "$green--- Set local build repo path as new home ---$reset"
          export HOME=$(Build.Repository.LocalPath)
        echo -e "$green--- --- Convert config file to UX format ---$reset"
          sudo apt-get -qq install dos2unix
          dos2unix -q SYSTEM/$(sapsystemfolder)/sap-parameters.yaml
          dos2unix -q SYSTEM/$(sapsystemfolder)/$(sapsystemconfig)
        echo -e "$green--- Add BOM Base Name and SAP FQDN to sap-parameters.yaml ---$reset"
          sed -i 's|bom_base_name:.*|bom_base_name:                 '"$(bom)"'|'  SYSTEM/$(sapsystemfolder)/sap-parameters.yaml
          sed -i 's|sap_fqdn:.*|sap_fqdn:                      '"$(fqdn)"'|'      SYSTEM/$(sapsystemfolder)/sap-parameters.yaml
        echo -e "$green--- Get SID and copy hosts file over for ansible runs ---$reset"
          export SID=$(cat SYSTEM/$(sapsystemfolder)/$(sapsystemconfig) | grep sid'=' | awk -F'=' '{print $2}' | xargs) ; echo SID $SID
          cp -p SYSTEM/$(sapsystemfolder)/${SID}_hosts.yaml ./sap_hosts.yaml
        echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
          organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
          git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
        echo -e "$green--- az login ---$reset"
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
        echo -e "$green--- Get sshkey to connect to SAP VMs ---$reset"
          export ENV=$(echo $(sapsystemfolder) | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
          export LOCA=$(echo $(sapsystemfolder) | awk -F'-' '{print $2}' | xargs) ; echo Environment $LOCA
          export location=$(cat SYSTEM/$(sapsystemfolder)/$(sapsystemconfig) | grep location'=' | awk -F'=' '{print $2}' | xargs) ; echo Location $location
          export kv_name=$(cat .sap_deployment_automation/$ENV$location      | grep workloadkeyvault | awk -F'=' '{print $2}' | xargs) ; echo SAP_Keyvault $kv_name
          az keyvault secret show --name ${ENV}-${LOCA}-SAP-sid-sshkey --vault-name $kv_name --query value -o tsv > sshkey
          chmod 600 sshkey
        echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
          git config --global user.email "$(Build.RequestedForEmail)"
          git config --global user.name "$(Build.RequestedFor)" 
          git add .sap_deployment_automation                      &>> /tmp/$(log)
          git add SYSTEM/$(sapsystemfolder)/sap-parameters.yaml   &>> /tmp/$(log)
          git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]" &>> /tmp/$(log)
          git push -f origin HEAD:main                            &>> /tmp/$(log)
        echo "output the log ---$reset"
          cat /tmp/$(log)
        git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
      displayName: Prepare_DB_SAP_Installation
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      failOnStderr: true

- stage: Base_OS_Config
  condition: eq(${{ parameters.baseosconfig }}, true)
  dependsOn:
    - Prepare_DB_SAP_Installation
  jobs:
  - job: Base_OS_Config
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: Base_OS_Config
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_01_os_base_config.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: SAP_OS_Config
  condition: eq(${{ parameters.saposconfig }}, true)
  dependsOn:
    - Prepare_DB_SAP_Installation
    - Base_OS_Config
  jobs:
  - job: SAP_OS_Config
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: SAP_OS_Config
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_02_os_sap_specific_config.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: BOM_Processing
  condition: eq(${{ parameters.bomprocessing }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - Base_OS_Config
  - SAP_OS_Config
  jobs:
  - job: BOM_Processing
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: BOM_Processing
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_03_bom_processing.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false


- stage: DB_Install
  condition: eq(${{ parameters.hanadbinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  jobs:
  - job: DB_Install
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: HANA_DB_Install
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_04_00_00_hana_db_install.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: SCS_Install
  condition: eq(${{ parameters.scsinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  jobs:
  - job: SCS_Install
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: SCS_Install
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_05_00_00_sap_scs_install.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: DB_Load
  condition: eq(${{ parameters.dbload }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  - SCS_Install
  jobs:
  - job: DB_Load
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: DB_Load
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_05_01_sap_dbload.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: PAS_Install
  condition: eq(${{ parameters.pasinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  - SCS_Install
  - DB_Load
  jobs:
  - job: PAS_Install
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: PAS_Install
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_05_02_sap_pas_install.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: APP_Install
  condition: eq(${{ parameters.appinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  - SCS_Install
  - DB_Load
  - PAS_Install
  jobs:
  - job: APP_Install
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: APP_Install
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_05_03_sap_app_install.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: WebDisp_Install
  condition: eq(${{ parameters.webdispinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  - SCS_Install
  - DB_Load
  - PAS_Install
  - APP_Install
  jobs:
  - job: WebDisp_Install
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: WebDisp_Install
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_05_04_sap_web_install.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false

- stage: HA_Setup
  condition: eq(${{ parameters.webdispinstall }}, true)
  dependsOn:
  - Prepare_DB_SAP_Installation
  - SAP_OS_Config
  - BOM_Processing
  - DB_Install
  - SCS_Install
  - DB_Load
  - PAS_Install
  - APP_Install
  jobs:
  - job: HA_Setup
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: HA_Setup
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_04_00_01_db_ha.yaml'
        inventoriesAgentMachine: 'file'
        inventoryFileOnAgentMachine: 'sap_hosts.yaml'
        args: '--private-key sshkey -e "@SYSTEM/$(sapsystemfolder)/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/SYSTEM/$(sapsystemfolder)/"'
        failOnStderr: false