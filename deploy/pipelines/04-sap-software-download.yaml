---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline performs the software download                 |
# |              and must run on a self hosted deployment agent                |
# |                      due to long run time                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name:                                  SAP Software download $(bom) $(env) $(loc) [$(Date:yyyyMMdd)]

parameters:
  - name:                              bom_base_name
    displayName:                       Name of Bill of Materials (BoM)
    type: string
    default:                           S41909SPS03_v0010ms
    values:
      - S41909SPS03_v0010ms
      - HCMT_v0001ms
      - BW4HANA2021SPS01_v0001ms
      - HANA_2_00_055_v0005ms
      - NW750SPS20_v0002ms

  - name:                              environment
    displayName:                       Control Plane Environment
    type:                              string
    default:                           MGMT

  - name:                              region
    displayName:                       Control Plane (SAP Library) Locationcode
    type:                              string
    default:                           WEEU

trigger:                               none

pool:
  name:                                $(Agent)

variables:
  - group:                             "SAP-deployment-variables-general"
  - group:                             ${{ parameters.environment }}
  - name:                              bom
    value:                             ${{ parameters.bom_base_name }}
  - name:                              env
    value:                             ${{ parameters.environment }}
  - name:                              loc
    value:                             ${{ parameters.region }}

stages:
  - stage:                             Prepare_download
    displayName:                       Preparation
    jobs:
      - job:                           Prepare_download
        displayName:                   Preparation
        workspace:
          clean:                       all
        steps:
          - script: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
              echo -e "$green--- Git checkout and pull DevOps Repository ---$reset"
                git checkout $(Branch)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull
              echo -e "$green--- Validations ---$reset"
              if [ ! -f .sap_deployment_automation/$(env)$(loc) ]; then
                echo -e "$boldred--- .sap_deployment_automation/$(env)$(loc) was not found ---$reset"
                echo "##vso[task.logissue type=error]File .sap_deployment_automation/$(env)$(loc) was not found."
                exit 2
              fi
              if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_CLIENT_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_TENANT_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                exit 2
              fi
              ls $(Build.Repository.LocalPath)
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Convert config files to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q $HOME/BOMS/sap-parameters.yaml
                kv_name=$(cat .sap_deployment_automation/$(env)$(loc) | grep keyvault |awk -F'=' '{print $2}')
                sapbits_sa_url=$(az keyvault secret show --vault-name $kv_name --name sapbits-location-base-path --query value |xargs)
                sed -i 's|bom_base_name:.*|bom_base_name:   '"$(bom)"'|' BOMS/sap-parameters.yaml
                sed -i 's|sapbits_location_base_path:.*|sapbits_location_base_path:    '"$sapbits_sa_url"'|' BOMS/sap-parameters.yaml
                sed -i 's|deployer_kv_name:.*|deployer_kv_name:    '"$kv_name"'|' BOMS/sap-parameters.yaml
              echo -e "$green--- Content of BOMS/sap-parameters.yaml ---$reset"
                cat $HOME/BOMS/sap-parameters.yaml
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                added=0
                if [ -f $HOME/BOMS/sap-parameters.yaml ]; then
                  git add $HOME/BOMS/sap-parameters.yaml
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
              echo -e "$green--- Set S-Username and S-Password in the key_vault if not yet there ---$reset"
                export SUsername=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Username | xargs)
                if [ -z "$SUsername" ]; then 
                  az keyvault secret set --output none --name S-Username --vault-name $kv_name --value $(S-Username)
                else
                  echo -e "$green--- $SUsername present in keyvault. In case of download errors check that user and password are correct ---$reset"
                fi
                export SPassword=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Password | xargs)
                if [ -z "$SPassword" ]; then 
                  az keyvault secret set --output none --name S-Password --vault-name $kv_name --value $(S-Password)
                fi
            displayName:               Prepare download
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
            failOnStderr:              false

  - stage:                             Software_download
    displayName:                       Download software
    jobs:
      - job:                           Software_download
        displayName:                   Download software
        timeoutInMinutes:              0
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
          - task:                      Ansible@0
            displayName:               Download software
            timeoutInMinutes:          0
            inputs:
              ansibleInterface:        "agentMachine"
              playbookPathOnAgentMachine: $DEPLOYMENT_REPO_PATH/deploy/ansible/playbook_bom_downloader.yaml
              args:                    '-e "HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)" -e "@$(Deployment_Configuration_Path)/BOMS/sap-parameters.yaml" -e "_workspace_directory=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)/BOMS" $(ExtraParams) '
              failOnStderr:            false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
...
