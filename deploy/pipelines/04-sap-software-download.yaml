---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline performs the software download                 |
# |              and must run on a self hosted deployment agent                |
# |                      due to long run time                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name:                                  SAP Software download $(bom) $(environment_code) $(location_code)

parameters:
  - name:                              bom_base_name
    displayName:                       Name of Bill of Materials (BoM)
    type: string
    default:
    values:
      - S4HANA_2021_ISS_v0001ms
      - S42020SPS04_v0001ms
      - S41909SPS03_v0011ms
      - HCMT_v0002ms
      - BW4HANA2021SPS01_v0003ms
      - HANA_2_00_063_v0001ms
      - HANA_2_00_061_v0001ms
      - HANA_2_00_059_v0003ms
      - HANA_2_00_055_v0006ms
      - NW750SPS20_v0004ms
      - NW752SPS09_v0001ms
      - ⁠NW750SPS20_DB2_v0001ms
      - ORACLE_19_00_v0002ms
      - NW750SPS20_DB2_v0001ms
      - DB2_UDB_11_5_v0001ms
      - ORACLE_19_00_ORA_MSID_v0001ms
      - ORACLE_19_00_ORA_MSID_v0002ms
      - ERP6_EHP8_WIN_MSS2019_v0001ms

  - name:                              environment
    displayName:                       Control Plane Environment
    default:                           MGMT

  - name:                              region
    displayName:                       Control Plane (SAP Library) location code
    type:                              string
    default:                           WEEU

  - name:                              re_download
    displayName:                       Re-download software from SAP
    type:                              boolean
    default:                           false

trigger:                               none

pool:
  name:                                $[coalesce(variables['POOL'], variables['Agent'])]

variables:
  - group:                             "SDAF-General"
  - group:                             SDAF-${{ parameters.environment }}

  - name:                              bom
    value:                             $[coalesce(variables['BoM_OverRide'], '${{ parameters.bom_base_name }}','foo')]

  - name:                              variable_group
    value:                             SDAF-${{ parameters.environment }}

  - name:                              environment_code
    value:                             ${{ parameters.environment }}

  - name:                              location_code
    value:                             ${{ parameters.region }}

  - name:                              check_storage_account
    value:                             $[not(${{ parameters.re_download }})]

  - name:                              this_agent
    value:                             $[lower(coalesce(variables['POOL'], variables['Agent']))]

  - name:                              key_vault
    value:                             $[variables['Deployer_Key_Vault']]

stages:
  - stage:                             Prepare_download
    displayName:                       Preparation
    jobs:
      - job:                           Prepare_download_job
        displayName:                   Preparation
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
            submodules:                true
          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"

                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                environment_file_name=$HOME/.sap_deployment_automation/$(environment_code)$(location_code)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config

              echo -e "$green--- Configure devops CLI extension ---$reset"
                az config set extension.use_dynamic_install=yes_without_promp --output none
                export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)

                devops_extension_installed=$(az extension list --query [].path | grep azure-devops)
                if [ -z $devops_extension_installed ]; then
                  az extension add --name azure-devops --output none
                fi

                az devops configure -d organization=$(System.CollectionUri)
                az devops configure -d project=$(System.TeamProject)
                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]")

              echo -e "$green--- Validations ---$reset"
              if [ ! -f ${environment_file_name} ]; then
                echo -e "$boldred--- ${environment_file_name} was not found ---$reset"
                echo "##vso[task.logissue type=error]File ${environment_file_name} was not found."
                exit 2
              fi
              if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                exit 2
              fi

              if [ "azure pipelines" == $(this_agent) ]; then
                echo "##vso[task.logissue type=error]Please use a self hosted agent for this playbook. Define it in the SDAF-$(environment_code) variable group"
                exit 2
              fi

              echo -e "$green--- az login ---$reset"

                az login --service-principal --username $(ARM_CLIENT_ID) --password $ARM_CLIENT_SECRET --tenant $(ARM_TENANT_ID) --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi

                az account set --subscription $(ARM_SUBSCRIPTION_ID)

              echo -e "$green--- Get key_vault name ---$reset"

                az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Deployer_Key_Vault.value" | tr -d \")
                if [ -n ${az_var} ]; then
                    kv_name=${az_var}; echo "Key Vault="$kv_name
                else
                    kv_name=$(cat .sap_deployment_automation/$(environment_code)$(location_code) | grep keyvault |awk -F'=' '{print $2}'); echo "Key Vault="$kv_name
                fi

                echo "##vso[task.setvariable variable=KV_NAME;isOutput=true]$kv_name"

              echo -e "$green--- BoM $(bom) ---$reset"

              echo -e "$green--- Save BOM ---$reset"
                  echo "##vso[build.updatebuildnumber]Downloading BoM defined in $(bom)"
                  echo "##vso[task.setvariable variable=BOM_NAME;isOutput=true]$(bom)"

              echo -e "$green--- Set S-Username and S-Password in the key_vault if not yet there ---$reset"

                export SUsername=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Username | xargs)
                if [ -z $SUsername ]; then
                  az keyvault secret set --output none --name S-Username --vault-name $kv_name --value $(S-Username)
                  echo "##vso[task.setvariable variable=SUSERNAME;isOutput=true]$(S-Username)"
                else
                  echo -e "$green--- $SUsername present in keyvault. In case of download errors check that user and password are correct ---$reset"
                  echo "##vso[task.setvariable variable=SUSERNAME;isOutput=true]$SUsername"
                fi

                export SPassword=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Password | xargs)
                if [ -z $SPassword ]; then
                  az keyvault secret set --output none --name S-Password --vault-name $kv_name --value $(S-Password)
                  echo "##vso[task.setvariable variable=SPASSWORD;isOutput=true]$(S-Password)"
                else
                  echo "##vso[task.setvariable variable=SPASSWORD;isOutput=true]${SPassword}"
                fi

            displayName:               Prepare download
            name:                      Preparation
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false

  - stage:                             Software_download
    displayName:                       Download software

    jobs:
      - job:                           Software_download
        displayName:                   Download software
        variables:
          kv_name:                     $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.KV_NAME'] ]
          S-USER:                      $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.SUSERNAME'] ]
          S-PASSWORD:                  $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.SPASSWORD'] ]
          BOM_NAME:                    $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.BOM_NAME'] ]
        timeoutInMinutes:              0
        steps:
          - task:                      PostBuildCleanup@3
          - checkout:                  self
            persistCredentials:        true
          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"


              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                environment_file_name=$HOME/.sap_deployment_automation/$(environment_code)$(location_code)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config

              echo -e "$green--- Validations ---$reset"
              if [ ! -f ${environment_file_name} ]; then
                echo -e "$boldred--- ${environment_file_name} was not found ---$reset"
                echo "##vso[task.logissue type=error]File ${environment_file_name} was not found."
                exit 2
              fi

              echo -e "$green--- az login ---$reset"
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi

                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi

                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi

                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi

                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi

                az account set --subscription $(ARM_SUBSCRIPTION_ID)
          - task:                            Ansible@0
            displayName:                     Download software
            timeoutInMinutes:                0
            inputs:
              ansibleInterface:              "agentMachine"
              playbookPathOnAgentMachine:    deploy/ansible/playbook_bom_downloader.yaml
              args:                          ' -e "bom_base_name=$(BOM_NAME)" -e "deployer_kv_name=$(kv_name)" -e "check_storage_account=$(check_storage_account)" $(ExtraParams) '
              failOnStderr:                  false
            env:
              ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
              ANSIBLE_PYTHON_INTERPRETER:    auto_silent
              DEPLOYMENT_REPO_PATH:          $(Build.Repository.LocalPath)
              ARM_CLIENT_ID:                 $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:             $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:                 $(ARM_TENANT_ID)

...
