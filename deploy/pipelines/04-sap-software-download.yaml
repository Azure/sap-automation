---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline downloads the SAP software                     |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
parameters:
  - name:                              bom_base_name
    displayName:                       Name of Bill of Materials (BoM)
    type:                              string

  - name:                              environment
    displayName:                       Control Plane Environment
    default:                           MGMT

  - name:                              region
    displayName:                       Control Plane (SAP Library) location code
    type:                              string
    default:                           WEEU

  - name:                              re_download
    displayName:                       Re-download software from SAP
    type:                              boolean
    default:                           false

  - name:                              sap_automation_repo_path
    displayName:                       The local path on the agent where the sap_automation repo can be found
    type:                              string

  - name:                              config_repo_path
    displayName:                       The local path on the agent where the config repo can be found
    type:                              string

  - name:                              sample_repo_path
    displayName:                       The local path on the agent where the config repo can be found
    type:                              string

  - name:                              ExtraParams
    displayName:                       Extra parameters to pass to Ansible
    type:                              string

stages:
  - stage: Prepare_download
    condition: and(not(failed()), not(canceled()))
    variables:
      - template:                      variables/04-sap-software-download-variables.yaml
        parameters:
          bom_base_name:               ${{ parameters.bom_base_name }}
          environment:                 ${{ parameters.environment }}
          re_download:                 ${{ parameters.re_download }}
          region:                      ${{ parameters.region }}
    displayName:                       Preparation
    jobs:
      - job: Prepare_download_job
        displayName:                   Preparation
        workspace:
          clean:                       all
        steps:
          - template:                  templates\download_samples.yaml
          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

              echo -e "$green--- Configure devops CLI extension ---$reset"
                az config set extension.use_dynamic_install=yes_without_prompt --output none
                export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)

                az devops configure --defaults organization=$(System.CollectionUri) project='$(System.TeamProject)' --output none

              echo -e "$green--- Validations ---$reset"
                if [ ! -f ${environment_file_name} ]; then
                  echo -e "$boldred--- ${environment_file_name} was not found ---$reset"
                  echo "##vso[task.logissue type=error]File ${environment_file_name} was not found."
                  exit 2
                fi
                if [ ! -n $ARM_SUBSCRIPTION_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi

                if [ "azure pipelines" == $(this_agent) ]; then
                  echo "##vso[task.logissue type=error]Please use a self hosted agent for this playbook. Define it in the SDAF-$(environment_code) variable group"
                  exit 2
                fi

                if [ "your S User" == "${SUsername}" ]; then
                  echo "##vso[task.logissue type=error]Please define the S-Username variable."
                  exit 2
                fi

                if [ "your S user password" == "${SPassword}" ]; then
                  echo "##vso[task.logissue type=error]Please define the S-Password variable."
                  exit 2
                fi

              echo -e "$green--- az login ---$reset"

                az login --service-principal --username $ARM_CLIENT_ID --password=${ARM_CLIENT_SECRET} --tenant $ARM_TENANT_ID --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi

                az account set --subscription $ARM_SUBSCRIPTION_ID --output none

              echo -e "$green--- Get key_vault name ---$reset"
                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]")
                echo '$(variable_group) id: ' $VARIABLE_GROUP_ID
                if [ -z ${VARIABLE_GROUP_ID} ]; then
                    echo "##vso[task.logissue type=error]Variable group $(variable_group) could not be found."
                    exit 2
                fi
                az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Deployer_Key_Vault.value" | tr -d \")
                if [ -n ${az_var} ]; then
                    kv_name=${az_var}; echo "Key Vault="$kv_name
                else
                    kv_name=$(cat .sap_deployment_automation/$(environment_code)$(location_code) | grep keyvault |awk -F'=' '{print $2}'); echo "Key Vault="$kv_name
                fi

                echo "##vso[task.setvariable variable=KV_NAME;isOutput=true]$kv_name"

              echo -e "$green--- BoM $(bom) ---$reset"
                  echo "##vso[build.updatebuildnumber]Downloading BoM defined in $(bom)"
                  echo "##vso[task.setvariable variable=BOM_NAME;isOutput=true]$(bom)"

              echo -e "$green--- Set S-Username and S-Password in the key_vault if not yet there ---$reset"

                export SUsernamefromVault=$(az keyvault secret list --vault-name "${kv_name}" --subscription "${ARM_SUBSCRIPTION_ID}" --query "[].{Name:name} | [? contains(Name,'S-Username')] | [0]"  -o tsv)
                if [ $SUsernamefromVault == $SUsername ]; then
                  echo -e "$green--- $SUsername present in keyvault. In case of download errors check that user and password are correct ---$reset"
                  echo "##vso[task.setvariable variable=SUSERNAME;isOutput=true]$SUsernamefromVault"
                else
                  echo -e "$green--- Setting the S username in key vault ---$reset"
                  az keyvault secret set --name "S-Username" --vault-name $kv_name --value="${SUsername}" --subscription "${ARM_SUBSCRIPTION_ID}" --output none
                  echo "##vso[task.setvariable variable=SUSERNAME;isOutput=true]$SUsername"
                fi

                export SPasswordfromVault=$(az keyvault secret list --vault-name "${kv_name}" --subscription "${ARM_SUBSCRIPTION_ID}" --query "[].{Name:name} | [? contains(Name,'S-Password')] | [0]"  -o tsv)
                if [ ${SPassword} == $SPasswordfromVault ]; then
                  echo "##vso[task.setvariable variable=SPASSWORD;isOutput=true]${SPasswordfromVault}"
                  echo -e "$green--- Password present in keyvault. In case of download errors check that user and password are correct ---$reset"
                else
                  echo -e "$green--- Setting the S user name password in key vault ---$reset"
                  az keyvault secret set --name "S-Password" --vault-name $kv_name --value "${SPassword}" --subscription "${ARM_SUBSCRIPTION_ID}" --output none
                  echo "##vso[task.setvariable variable=SPASSWORD;isOutput=true]${SPassword}"
                fi
            displayName:                Prepare download
            name:                       Preparation
            env:
              SYSTEM_ACCESSTOKEN:       $(System.AccessToken)
              ARM_CLIENT_ID:            $(CP_ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:        $(CP_ARM_CLIENT_SECRET)
              ARM_TENANT_ID:            $(CP_ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID:      $(CP_ARM_SUBSCRIPTION_ID)
              SUsername:                $(S-Username)
              SPassword:                $(S-Password)
              SAP_AUTOMATION_REPO_PATH: ${{ parameters.sap_automation_repo_path }}
              SAMPLE_REPO_PATH:         ${{ parameters.sample_repo_path }}
              CONFIG_REPO_PATH:         ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
            failOnStderr:               false

  - stage:                             Software_download
    variables:
      - template:                      variables/04-sap-software-download-variables.yaml
        parameters:
          bom_base_name:               ${{ parameters.bom_base_name }}
          environment:                 ${{ parameters.environment }}
          re_download:                 ${{ parameters.re_download }}
          region:                      ${{ parameters.region }}
    displayName:                       Download software

    jobs:
      - job:                           Software_download
        displayName:                   Download software
        variables:
          BOM_NAME:                    $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.BOM_NAME'] ]
          KV_NAME:                     $[ stageDependencies.Prepare_download.Prepare_download_job.outputs['Preparation.KV_NAME'] ]
        timeoutInMinutes:              0
        steps:
          - template:                  templates\download_samples.yaml
          - bash: |

              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

              cd $CONFIG_REPO_PATH

              sample_path=$SAMPLE_REPO_PATH/SAP

              echo -e "$green--- az login ---$reset"
                if [ ! -n $ARM_SUBSCRIPTION_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi

                if [ ! -n $ARM_CLIENT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi

                if [ ! -n $ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi

                if [ ! -n $ARM_TENANT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi

                az login --service-principal --username $ARM_CLIENT_ID --password=$ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID --output none
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi

                command="ansible-playbook '-e "download_directory=$(Agent.TempDirectory)" -e "BOM_directory=${sample_path}" -e "bom_base_name=$(BOM_NAME)" -e "deployer_kv_name=$(KV_NAME)" -e "check_storage_account=$(check_storage_account)" ' $ExtraParams ${{ parameters.sap_automation_repo_path }}/deploy/ansible/playbook_bom_downloader.yaml"

                echo "##[section]Executing [$command]..."
                echo "##[group]- output"
                eval $command
                return_code=$?
                echo "##[endgroup]"
                exit $return_code
            displayName:               Download
            name:                      download
            env:
              ARM_CLIENT_ID:                 $(CP_ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:             $(CP_ARM_CLIENT_SECRET)
              ARM_TENANT_ID:                 $(CP_ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID:           $(CP_ARM_SUBSCRIPTION_ID)
              SAP_AUTOMATION_REPO_PATH:      ${{ parameters.sap_automation_repo_path }}
              SAMPLE_REPO_PATH:              ${{ parameters.sample_repo_path }}
              CONFIG_REPO_PATH:              ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
              ANSIBLE_COLLECTIONS_PATHS:     ~/.ansible/collections:/opt/ansible/collections
              ExtraParams:                   ${{ parameters.ExtraParams }}
            failOnStderr:                    false

