---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline prepares the control plane                     |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name: Deploying the control plane defined in $(deployerfolder) $(libraryfolder)  [$(Date:yyyyMMdd)]

parameters:
  - name:                              deployer
    displayName:                       "Deployer configuration name, use the following syntax: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           MGMT-WEEU-DEP00-INFRASTRUCTURE

  - name:                              library
    displayName:                       "SAP Library configuration name, use the following syntax: ENV-LOCA-SAP_LIBRARY"
    type:                              string
    default:                           MGMT-WEEU-SAP_LIBRARY

  - name:                              environment
    displayName:                       "Environment name, MGMT, DEV, QA, etc"
    type:                              string
    default:                           MGMT
trigger:                               none

pool:
  vmImage:                             ubuntu-latest

variables:
  - group:                             "SDAF-General"
  - group:                             SDAF-${{ parameters.environment }}
  - name:                              deployerfolder
    value:                             ${{ parameters.deployer }}
  - name:                              deployerconfig
    value:                             ${{ parameters.deployer }}.tfvars
  - name:                              libraryfolder
    value:                             ${{ parameters.library }}
  - name:                              libraryconfig
    value:                             ${{ parameters.library }}.tfvars
  - name:                              log
    value:                             logfile_$(Build.BuildId)
  - name:                              tf_url
    value:                             https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip

stages:
  - stage:                             Deploy_controlplane
    displayName:                       Deploy the control plane
    jobs:
      - job:                           Deploy_controlplane
        displayName:                   Deploy the control plane
        workspace:
          clean:                       all
        steps:
          - script: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Deploying the control plane defined in $(deployerfolder) $(libraryfolder)  [$(Date:yyyyMMdd)]"
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/

              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config

              echo -e "$green--- Validations ---$reset"
                if [ ! -f DEPLOYER/$(deployerfolder)/$(deployerconfig) ]; then
                  echo -e "$boldred--- File DEPLOYER/$(deployerfolder)/$(deployerconfig) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File DEPLOYER/$(deployerfolder)/$(deployerconfig) was not found."
                  exit 2
                fi
                if [ ! -f LIBRARY/$(libraryfolder)/$(libraryconfig) ]; then
                  echo -e "$boldred--- File LIBRARY/$(libraryfolder)/$(libraryconfig)  was not found ---$reset"
                  echo "##vso[task.logissue type=error]File LIBRARY/$(libraryfolder)/$(libraryconfig) was not found."
                  exit 2
                fi
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi

              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi

                az account set --subscription $(ARM_SUBSCRIPTION_ID)
                az extension add --name storage-blob-preview > /dev/null
              echo -e "$green--- Pull the latest content from DevOps ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout -q $(Branch)
                git pull

              echo -e "$green--- Convert config files to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q DEPLOYER/$(deployerfolder)/$(deployerconfig)
                dos2unix -q LIBRARY/$(libraryfolder)/$(libraryconfig)

              echo -e "$green--- Deploys the Control Plane ---$reset"
                $DEPLOYMENT_REPO_PATH/deploy/scripts/prepare_region.sh --deployer_parameter_file DEPLOYER/$(deployerfolder)/$(deployerconfig) --library_parameter_file LIBRARY/$(libraryfolder)/$(libraryconfig)  --subscription $(ARM_SUBSCRIPTION_ID)  --spn_id $(ARM_CLIENT_ID) --spn_secret $(ARM_CLIENT_SECRET) --tenant_id $(ARM_TENANT_ID)  --auto-approve
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from prepare_region $return_code."
                fi

              echo -e "$green--- Adding deployment automation configuration to devops repository ---$reset"
                cd $(Build.Repository.LocalPath)
                export ENV=$(echo $(deployerfolder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(deployerfolder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCA
                added=0
                if [ -f $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA} ]; then
                  git add    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}.md ]; then
                  git add $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}.md
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/DEPLOYER/$(deployerfolder)/.terraform/terraform.tfstate ]; then
                  git add -f $(Deployment_Configuration_Path)/DEPLOYER/$(deployerfolder)/.terraform/terraform.tfstate
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/.terraform/terraform.tfstate ]; then
                  git add -f $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/.terraform/terraform.tfstate
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/backend-config.tfvars ]; then
                  git add $(Deployment_Configuration_Path)/LIBRARY/$(libraryfolder)/backend-config.tfvars
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
                if [ -f $HOME/.sap_deployment_automation/${ENV}${LOCA}.md ]; then
                  echo "##vso[task.uploadsummary]$HOME/.sap_deployment_automation/${ENV}${LOCA}.md"
                fi
                exit $return_code
            displayName:               Deploy control plane
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false
...