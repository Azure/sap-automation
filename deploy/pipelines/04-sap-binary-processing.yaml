# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:

- name: bom_base_name
  displayName: BOM Base Name
  type: string
  default: S41909SPS03_v0006ms

- name: environment
  displayName: Deployer Environment
  type: string
  default: MGMT

- name: region
  displayName: SAP Binary Storage Account Location
  type: string
  default: germanywestcentral

trigger:
  none

# This pipeline must run on a self hosted devops agent running as the download from SAP is around 80GB and a large temp drive is required (e.g. on D4ds_v4)
pool:
  name: $(agent)
#  vmImage: ubuntu-latest

variables:
  bom: ${{ parameters.bom_base_name }}
  env: ${{ parameters.environment }}
  loc: ${{ parameters.region }}

name: $(bom)_$(env)_$(loc)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Prepare_Download_Configuration
  jobs:
  - job: Prepare_Download_Configuration
    steps:
    - script: |
        #!/bin/bash
        green="\e[1;32m"
        reset="\e[0m"
        echo -e "$green--- Clone the $(Branch) branch of repository $(Repository) ---$reset"
          git clone --quiet --single-branch --branch $(Branch) $(Repository)
        echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
          export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)/sap-hana
          mkdir -p .sap_deployment_automation
          echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
          export HOME=$(Build.Repository.LocalPath)
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
        echo -e "$green--- Convert config files to UX format ---$reset"
          sudo apt-get -qq install dos2unix
          dos2unix -q BOMS/sap-parameters.yaml
          kv_name=$(cat .sap_deployment_automation/$(env)$(loc) | grep keyvault |awk -F'=' '{print $2}')
        echo -e "$green--- Set S-Username and S-Password in the key_vault if not yet there ---$reset"
          export SUsername=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Username | xargs)
          echo $SUsername
          if [ -z "$SUsername" ]; then 
            az keyvault secret set --name S-Username --vault-name $kv_name --value $(S-Username)
          fi
          export SPassword=$(az keyvault secret list --vault-name $kv_name --query [].name -o tsv | grep S-Password | xargs)
          if [ -z "$SPassword" ]; then 
            az keyvault secret set --name S-Password --vault-name $kv_name --value $(S-Password)
          fi
      displayName: Prepare_Download_Configuration
      env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      failOnStderr: true

- stage: Process_Binaries
  jobs:
  - job: Process_Binaries
    timeoutInMinutes: 0
    steps:
    - checkout: none
    - task: Ansible@0
      displayName: Process_Binaries
      timeoutInMinutes: 0
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'sap-automation/deploy/ansible/playbook_bom_downloader.yaml'
        args: ' -e "HOME=$(Build.Repository.LocalPath)" -e "_workspace_directory=$(Build.Repository.LocalPath)/BOMS/" -e "bom_base_name=$(bom)" -e "deployer_kv_name=$(kv_name)"  -e "s_user=$(S-Username)"  -e "s_password=$(S-Password)"'
        failOnStderr: false