---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |      This pipeline removes the SAP systems, the workload zone (landscape)  |
# |      and the region via Terraform.                                         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


name: Tester [$(Date:yyyyMMdd)]

parameters:

  - name:                              sap_system
    displayName:                       "SAP System configuration name, use the following syntax: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           QA-WEEU-SAP05-RH8

  - name:                              environment
    displayName:                       Workload Environment (DEV, QUA, PRD, ...)
    type:                              string
    default:                           QA

trigger:                               none

pool:
  name:                                $(Agent)
  vmImage:                             ubuntu-latest

variables:
  - group:                             "SDAF-General"
  - group:                             SDAF-${{ parameters.environment }}
  - name:                              sap_system_folder
    value:                             ${{ parameters.sap_system }}
  - name:                              sap_system_configuration
    value:                             ${{ parameters.sap_system }}.tfvars

stages:
  - stage:                             Tester
    displayName:                       "Tester"
    jobs:
      - job:                           Tester
        displayName:                   "Tester"
        workspace:
          clean:                       all
        steps:
          - task:                      PostBuildCleanup@3
          - bash: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Testing the SAP System defined in $(sap_system_folder)"
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)

                cd $HOME
              echo -e "$green--- Validations ---$reset"
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration) ]; then
                  echo -e "$boldred--- $(sap_system_configuration) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(sap_system_configuration) was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/$(sap_system_configuration)
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml was not found."
                  exit 2
                fi
                dos2unix -q $HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml
                export SID=$(echo $(sap_system_folder)  | awk -F'-' '{print $4}' | xargs) ; echo SID $SID
                if [ ! -n ${SID} ]; then
                  echo "##vso[task.logissue type=error]SID was not found in $(sap_system_configuration)."
                  exit 2
                fi
                echo "##vso[task.setvariable variable=SAP_PARAMETERS;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml"
                echo "##vso[task.setvariable variable=FOLDER;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)"
                echo "##vso[task.setvariable variable=DEPLOYMENT_REPO_PATH;isOutput=true]$(Build.Repository.LocalPath)"
                if [ ! -f $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml ]; then
                  echo -e "$boldred--- $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml was not found."
                  exit 2
                fi
                echo "##vso[task.setvariable variable=HOSTS;isOutput=true]$HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml"
                echo $DEPLOYMENT_REPO_PATH
              echo -e "$green--- Get SID and copy hosts file over for ansible runs ---$reset"
                cp -p $HOME/SYSTEM/$(sap_system_folder)/${SID}_hosts.yaml $(Build.Repository.LocalPath)/sap_hosts.yaml
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- Get sshkey to connect to SAP VMs ---$reset"
                export ENV=$(echo $(sap_system_folder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(sap_system_folder) | awk -F'-' '{print $2}' | xargs) ; echo Location $LOCA
                export VNET=$(echo $(sap_system_folder) | awk -F'-' '{print $3}' | xargs) ; echo VNET $VNET
                export kv_name=$(cat .sap_deployment_automation/${ENV}${LOCA}  | grep workloadkeyvault | awk -F'=' '{print $2}' | xargs) ; echo SAP_Keyvault $kv_name
                az keyvault secret show --name ${ENV}-${LOCA}-${VNET}-sid-sshkey --vault-name $kv_name --query value -o tsv > $(Build.Repository.LocalPath)/sshkey

                password_secret=$(az keyvault secret show --vault-name ${kv_name} --name ${ENV}-${LOCA}-${VNET}-sid-password | jq -r .value)
                export ANSIBLE_PASSWORD=$password_secret
                chmod 600 $(Build.Repository.LocalPath)/sshkey
                echo $(Build.Repository.LocalPath)/sshkey
                
                cd $HOME/SYSTEM/$(sap_system_folder)
                ls

                
                export           ANSIBLE_HOST_KEY_CHECKING=False
                export           ANSIBLE_COLLECTIONS_PATHS=/opt/ansible/collections${ANSIBLE_COLLECTIONS_PATHS:+${ANSIBLE_COLLECTIONS_PATHS}}
                export           ANSIBLE_REMOTE_USER=azureadm
                export           ANSIBLE_PYTHON_INTERPRETER=auto_silent
                unset ANSIBLE_BECOME_EXE
                export           ANSIBLE_CALLBACK_WHITELIST=profile_tasks
                # Don't show the skipped hosts
                export ANSIBLE_DISPLAY_SKIPPED_HOSTS=false

                pb=playbook_tester.yaml
                # pb=playbook_04_00_01_db_ha.yaml
 
                ansible-playbook -i $(Build.Repository.LocalPath)/sap_hosts.yaml ${DEPLOYMENT_REPO_PATH}/deploy/ansible/$pb  --private-key $(Build.Repository.LocalPath)/sshkey -e @$HOME/SYSTEM/$(sap_system_folder)/sap-parameters.yaml -e ansible_ssh_pass='{{ lookup("env", "ANSIBLE_PASSWORD") }}' -e "_workspace_directory=@$HOME/SYSTEM/$(sap_system_folder)" -vv  

                return_code=$?
                echo "Return code from ansible-playbook $return_code."
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from remover.sh $return_code."
                fi
              exit $return_code

            displayName:               Testing
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
            failOnStderr:              false
...
