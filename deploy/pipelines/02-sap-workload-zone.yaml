---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline deploys the Workload Zone                      |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name: "Deploying the SAP Workload zone defined in $(zonefolder) $(Date:yyyyMMdd)"

parameters:
  - name:                              workloadzone
    displayName:                       "Workload zone configuration name, use the following syntax: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           DEV-WEEU-SAP01-INFRASTRUCTURE

  - name:                              environment
    displayName:                       Deployer Environment name (MGMT, DEV, QA, PRD, ...)
    type:                              string
    default:                           MGMT

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: "SAP-deployment-variables-general"
  - group: "SAP-deployment-variables-specific"
  - name: zonefolder
    value: ${{ parameters.workloadzone }}
  - name: zoneconfig
    value: ${{ parameters.workloadzone }}.tfvars
  - name: env
    value: ${{ parameters.environment }}
  - name: log
    value: logfile_$(Build.BuildId)
  - name: tf_url
    value: https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip

stages:
  - stage:                             Deploy_SAP_workloadzone
    displayName:                       Deploy SAP workload zone
    jobs:
      - job:                           Deploy_SAP_workloadzone
        displayName:                   Deploy SAP workload zone
        steps:
          - checkout:                  self
            persistCredentials:        true
          - script: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Deploying the SAP Workload zone defined in $(zonefolder) $(Date:yyyyMMdd)"
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
              echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
                export ENV=$(echo $(zonefolder)  | awk -F'-' '{print $1}' | xargs) ; echo Environment $ENV
                export LOCA=$(echo $(zonefolder) | awk -F'-' '{print $2}' | xargs) ; echo Location    $LOCA
                export deployer_tfstate_key=$(cat .sap_deployment_automation/$(env)${LOCA}  | grep deployer_tfstate_key | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer State File' $deployer_tfstate_key
                export keyvault=$(cat .sap_deployment_automation/$(env)${LOCA}  | grep keyvault | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' $keyvault
                export REMOTE_STATE_SA=$(cat .sap_deployment_automation/$(env)${LOCA}  | grep REMOTE_STATE_SA | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform statefile storage account' $REMOTE_STATE_SA
                export STATE_SUBSCRIPTION=$(cat .sap_deployment_automation/$(env)${LOCA}  | grep STATE_SUBSCRIPTION | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform statefile subscription' $STATE_SUBSCRIPTION

              echo -e "$green--- Validations ---$reset"
                if [ ! -f $HOME/.sap_deployment_automation/$(env)$LOCA ]; then
                  echo -e "$boldred--- $(env)$LOCA was not found ---$reset"
                  echo "##vso[task.logissue type=error]Control plane configuration file $(env)$LOC was not found."
                  exit 2
                fi
                if [ ! -f $HOME/LANDSCAPE/$(zonefolder)/$(zoneconfig) ]; then
                  echo -e "$boldred--- $(zoneconfig) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(zoneconfig) was not found."
                  exit 2
                fi
                if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                  exit 2
                fi
                if [ ! -n $(ARM_TENANT_ID) ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                  exit 2
                fi
              echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q LANDSCAPE/$(zonefolder)/$(zoneconfig)
              echo -e "$green--- Run the install workloadzone script that deploys the SAP networks ---$reset"
                cd $HOME/LANDSCAPE/$(zonefolder)
                $DEPLOYMENT_REPO_PATH/deploy/scripts/install_workloadzone.sh --parameterfile $(zoneconfig) --deployer_environment $(env) --subscription $(ARM_SUBSCRIPTION_ID) --spn_id $(ARM_CLIENT_ID) --spn_secret $(ARM_CLIENT_SECRET) --tenant_id $(ARM_TENANT_ID) --deployer_tfstate_key "${deployer_tfstate_key}" --keyvault "${keyvault}" --storageaccountname "${REMOTE_STATE_SA}" --subscription "${STATE_SUBSCRIPTION}" --auto-approve --ado
                return_code=$?
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git pull --append origin $(Branch)
                added=0
                if [ -f $HOME/.sap_deployment_automation/${ENV}${LOCA} ]; then
                  git add    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}
                  added=1
                fi
                if [ -f $HOME/.sap_deployment_automation/${ENV}${LOCA}.md ]; then
                  git add    $(Deployment_Configuration_Path)/.sap_deployment_automation/${ENV}${LOCA}.md
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/LANDSCAPE/$(zonefolder)/.terraform/terraform.tfstate ]; then
                  git add -f $(Deployment_Configuration_Path)/LANDSCAPE/$(zonefolder)/.terraform/terraform.tfstate
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"

                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin HEAD:$(Branch)
                fi
                if [ -f $HOME/.sap_deployment_automation/${ENV}${LOCA}.md ]; then
                  echo "##vso[task.uploadsummary]$HOME/.sap_deployment_automation/${ENV}${LOCA}.md"
                fi
              exit $return_code
              
            displayName:               Deploy SAP Workload Zone
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
              REMOTE_STATE_SA:         ${REMOTE_STATE_SA}
            failOnStderr:              false
...
