---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline deploys the Workload Zone                      |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

parameters:
  - name:                              workload_zone
    displayName:                       "Workload zone configuration name, use the following syntax: ENV-LOCA-VNET-INFRASTRUCTURE"
    type:                              string
    default:                           DEV-WEEU-SAP01-INFRASTRUCTURE

  - name:                              workload_environment
    displayName:                       Workload Environment (DEV, QA, PRD, ...)
    type:                              string
    default:                           DEV

  - name:                              deployer_environment
    displayName:                       Deployer Environment name (MGMT, DEV, QA, PRD, ...)
    type:                              string
    default:                           MGMT

  - name:                              deployer_region
    displayName:                       Deployer region name code (MGMT, DEV, QA, PRD, ...)
    type:                              string
    default:                           WEEU
    values:
      - AUCE
      - AUC2
      - AUEA
      - AUSE
      - BRSO
      - BRSE
      - BRUS
      - CACE
      - CAEA
      - CEIN
      - CEUS
      - CEUA
      - EAAS
      - EAUS
      - EUS2
      - FRCE
      - FRSO
      - GENO
      - GEWC
      - JAEA
      - JAWE
      - JINC
      - JINW
      - KOCE
      - KOSO
      - NCUS
      - NOEU
      - NOEA
      - NOWE
      - SANO
      - SAWE
      - SCUS
      - SCUG
      - SOEA
      - SOIN
      - SECE
      - SWNO
      - SWWE
      - UACE
      - UANO
      - UKSO
      - UKWE
      - WCUS
      - WEEU
      - WEIN
      - WEUS
      - WUS2
      - WUS3

  - name:                              inherit_settings
    displayName:                       Inherit Terraform state file information from control plane
    type:                              boolean
    default:                           true

  - name:                              sap_automation_repo_path
    displayName:                       The local path on the agent where the sap_automation repo can be found
    type:                              string

  - name:                              config_repo_path
    displayName:                       The local path on the agent where the config repo can be found
    type:                              string

  - name:                              test
    type:                              boolean
    default:                           false

stages:
  - stage: Deploy_SAP_workload_zone
    condition: and(not(failed()), not(canceled()))
    displayName: Deploy SAP workload zone
    variables:
      - template:                      variables/02-sap-workload-zone-variables.yaml
        parameters:
          workload_zone:               ${{ parameters.workload_zone }}
          workload_environment:        ${{ parameters.workload_environment }}
          deployer_environment:        ${{ parameters.deployer_environment }}
          deployer_region:             ${{ parameters.deployer_region }}
          inherit_settings:            ${{ parameters.inherit_settings }}
    jobs:
      - job:                           Deploy_SAP_workload_zone
        displayName:                   Deploy SAP workload zone
        workspace:
          clean:                       all
        steps:
          - template:                  templates\download.yaml
          - task:                      PostBuildCleanup@3
          - bash: |
              #!/bin/bash
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m" ; cyan="\e[1;36m"

              echo "##vso[build.updatebuildnumber]Deploying the SAP Workload zone defined in $(workload_zone_folder)"

                # Check if running on deployer
                if [ ! -f /etc/profile.d/deploy_server.sh ]; then
                  echo -e "$green --- Install dos2unix ---$reset"
                  sudo apt-get -qq install dos2unix
                  export AZURE_DEVOPS_EXT_PAT=$PAT
                else
                  source /etc/profile.d/deploy_server.sh
                  export AZURE_DEVOPS_EXT_PAT=$PAT
                fi

                if [ ! -f $CONFIG_REPO_PATH/LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file) ]; then
                  echo -e "$boldred--- $(workload_zone_configuration_file) was not found ---$reset"
                  echo "##vso[task.logissue type=error]File $(workload_zone_configuration_file) was not found."
                  exit 2
                fi

                echo -e "$green--- Checkout $(Build.SourceBranchName) ---$reset"

                cd $CONFIG_REPO_PATH
                mkdir -p .sap_deployment_automation
                git checkout -q $(Build.SourceBranchName)

                echo -e "$green--- Validations ---$reset"

                if [ -z $WL_ARM_SUBSCRIPTION_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined in the $(variable_group) variable group."
                  exit 2
                fi

                if [ -z $WL_ARM_CLIENT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined in the $(variable_group) variable group."
                  exit 2
                fi

                if [ -z $WL_ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined in the $(variable_group) variable group."
                  exit 2
                fi

                if [ -z $WL_ARM_TENANT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined in the $(variable_group) variable group."
                  exit 2
                fi

                if [ -z $CP_ARM_SUBSCRIPTION_ID ]; then
                  echo "##vso[task.logissue type=error]Variable CP_ARM_SUBSCRIPTION_ID was not defined in the $(parent_variable_group) variable group."
                  exit 2
                fi

                if [ -z $CP_ARM_CLIENT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable CP_ARM_CLIENT_ID was not defined in the $(parent_variable_group) variable group."
                  exit 2
                fi

                if [ -z $CP_ARM_CLIENT_SECRET ]; then
                  echo "##vso[task.logissue type=error]Variable CP_ARM_CLIENT_SECRET was not defined in the $(parent_variable_group) variable group."
                  exit 2
                fi

                if [ -z $CP_ARM_TENANT_ID ]; then
                  echo "##vso[task.logissue type=error]Variable CP_ARM_TENANT_ID was not defined in the $(parent_variable_group) variable group."
                  exit 2
                fi

              echo -e "$green--- Convert config file to UX format ---$reset"
                dos2unix -q LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file)
              echo -e "$green--- Read details ---$reset"

                ENVIRONMENT=$(grep "^environment" LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file) | awk -F'=' '{print $2}' | xargs)
                   LOCATION=$(grep "^location" LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file) | awk -F'=' '{print $2}' | xargs | tr 'A-Z' 'a-z')
                    NETWORK=$(grep "^network_logical_name" LANDSCAPE/$(workload_zone_folder)/$(workload_zone_configuration_file) | awk -F'=' '{print $2}' | xargs)
                echo Environment: ${ENVIRONMENT}
                echo Location:    ${LOCATION}
                echo Network:     ${NETWORK}

                ENVIRONMENT_IN_FILENAME=$(echo $(workload_zone_folder) | awk -F'-' '{print $1}' | xargs )
                          LOCATION_CODE=$(echo $(workload_zone_folder) | awk -F'-' '{print $2}' | xargs )
                case "$LOCATION_CODE" in
                  "AUCE") LOCATION_IN_FILENAME="australiacentral" ;;
                  "AUC2") LOCATION_IN_FILENAME="australiacentral2" ;;
                  "AUEA") LOCATION_IN_FILENAME="australiaeast" ;;
                  "AUSE") LOCATION_IN_FILENAME="australiasoutheast" ;;
                  "BRSO") LOCATION_IN_FILENAME="brazilsouth" ;;
                  "BRSE") LOCATION_IN_FILENAME="brazilsoutheast" ;;
                  "BRUS") LOCATION_IN_FILENAME="brazilus" ;;
                  "CACE") LOCATION_IN_FILENAME="canadacentral" ;;
                  "CAEA") LOCATION_IN_FILENAME="canadaeast" ;;
                  "CEIN") LOCATION_IN_FILENAME="centralindia" ;;
                  "CEUS") LOCATION_IN_FILENAME="centralus" ;;
                  "CEUA") LOCATION_IN_FILENAME="centraluseuap" ;;
                  "EAAS") LOCATION_IN_FILENAME="eastasia" ;;
                  "EAUS") LOCATION_IN_FILENAME="eastus" ;;
                  "EUS2") LOCATION_IN_FILENAME="eastus2" ;;
                  "FRCE") LOCATION_IN_FILENAME="francecentral" ;;
                  "FRSO") LOCATION_IN_FILENAME="francesouth" ;;
                  "GENO") LOCATION_IN_FILENAME="germanynorth" ;;
                  "GEWC") LOCATION_IN_FILENAME="germanywest" ;;
                  "JAEA") LOCATION_IN_FILENAME="japaneast" ;;
                  "JAWE") LOCATION_IN_FILENAME="japanwest" ;;
                  "JINC") LOCATION_IN_FILENAME="jioindiacentral" ;;
                  "JINW") LOCATION_IN_FILENAME="jioindiawest" ;;
                  "GENO") LOCATION_IN_FILENAME="germanynorth" ;;
                  "KOCE") LOCATION_IN_FILENAME="koreacentral" ;;
                  "KOSO") LOCATION_IN_FILENAME="koreasouth" ;;
                  "NCUS") LOCATION_IN_FILENAME="northcentralus" ;;
                  "NOEU") LOCATION_IN_FILENAME="northeurope" ;;
                  "NOEA") LOCATION_IN_FILENAME="norwayeast" ;;
                  "NOWE") LOCATION_IN_FILENAME="norwaywest" ;;
                  "SANO") LOCATION_IN_FILENAME="southafricanorth" ;;
                  "SAWE") LOCATION_IN_FILENAME="southafricawest" ;;
                  "SCUS") LOCATION_IN_FILENAME="southcentralus" ;;
                  "SCUG") LOCATION_IN_FILENAME="southcentralusstg" ;;
                  "SOEA") LOCATION_IN_FILENAME="southeastasia" ;;
                  "SOIN") LOCATION_IN_FILENAME="southindia" ;;
                  "SECE") LOCATION_IN_FILENAME="swedencentral" ;;
                  "SWNO") LOCATION_IN_FILENAME="switzerlandnorth" ;;
                  "SWWE") LOCATION_IN_FILENAME="switzerlandwest" ;;
                  "UACE") LOCATION_IN_FILENAME="uaecentral" ;;
                  "UANO") LOCATION_IN_FILENAME="uaenorth" ;;
                  "UKSO") LOCATION_IN_FILENAME="uksouth" ;;
                  "UKWE") LOCATION_IN_FILENAME="ukwest" ;;
                  "WCUS") LOCATION_IN_FILENAME="westcentralus" ;;
                  "WEEU") LOCATION_IN_FILENAME="westeurope" ;;
                  "WEIN") LOCATION_IN_FILENAME="westindia" ;;
                  "WEUS") LOCATION_IN_FILENAME="westus" ;;
                  "WUS2") LOCATION_IN_FILENAME="westus2" ;;
                  "WUS3") LOCATION_IN_FILENAME="westus3" ;;
                  *) LOCATION_IN_FILENAME="westeurope" ;;
                esac

                NETWORK_IN_FILENAME=$(echo $(workload_zone_folder) | awk -F'-' '{print $3}' | xargs )
                echo "Environment(filename): $ENVIRONMENT_IN_FILENAME"
                echo "Location(filename):    $LOCATION_IN_FILENAME"
                echo "Network(filename):     $NETWORK_IN_FILENAME"


                if [ $ENVIRONMENT != $ENVIRONMENT_IN_FILENAME ]; then
                  echo "##vso[task.logissue type=error]The environment setting in $(workload_zone_configuration_file) '$ENVIRONMENT' does not match the $(workload_zone_configuration_file) file name '$ENVIRONMENT_IN_FILENAME'. Filename should have the pattern [ENVIRONMENT]-[REGION_CODE]-[NETWORK_LOGICAL_NAME]-INFRASTRUCTURE"
                  exit 2
                fi

                if [ $LOCATION != $LOCATION_IN_FILENAME ]; then
                  echo "##vso[task.logissue type=error]The location setting in $(workload_zone_configuration_file) '$LOCATION' does not match the $(workload_zone_configuration_file) file name '$LOCATION_IN_FILENAME'. Filename should have the pattern [ENVIRONMENT]-[REGION_CODE]-[NETWORK_LOGICAL_NAME]-INFRASTRUCTURE"
                  exit 2
                fi

                if [ $NETWORK != $NETWORK_IN_FILENAME ]; then
                  echo "##vso[task.logissue type=error]The network_logical_name setting in $(workload_zone_configuration_file) '$NETWORK' does not match the $(workload_zone_configuration_file) file name '$NETWORK_IN_FILENAME-. Filename should have the pattern [ENVIRONMENT]-[REGION_CODE]-[NETWORK_LOGICAL_NAME]-INFRASTRUCTURE"
                  exit 2
                fi

              echo -e "$green--- Configure devops CLI extension ---$reset"
                az config set extension.use_dynamic_install=yes_without_prompt --output none

                az extension add --name azure-devops --output none

                az devops configure --defaults organization=$(System.CollectionUri) project='$(System.TeamProject)' --output none

                export PARENT_VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(parent_variable_group)'].id | [0]")
                echo '$(parent_variable_group) id: ' $PARENT_VARIABLE_GROUP_ID
                if [ -z ${PARENT_VARIABLE_GROUP_ID} ]; then
                  echo "##vso[task.logissue type=error]Variable group $(parent_variable_group) could not be found."
                  exit 2
                fi

                export VARIABLE_GROUP_ID=$(az pipelines variable-group list --query "[?name=='$(variable_group)'].id | [0]")
                echo '$(variable_group) id: ' $VARIABLE_GROUP_ID
                if [ -z ${VARIABLE_GROUP_ID} ]; then
                  echo "##vso[task.logissue type=error]Variable group $(variable_group) could not be found."
                  exit 2
                fi

                echo "Agent Pool: " $(this_agent)

              echo -e "$green--- Set CONFIG_REPO_PATH variable ---$reset"

                deployer_environment_file_name=$CONFIG_REPO_PATH/.sap_deployment_automation/$(deployer_environment)$(deployer_region) ; echo 'Deployer Environment File' $deployer_environment_file_name
                workload_environment_file_name=$CONFIG_REPO_PATH/.sap_deployment_automation/${ENVIRONMENT}${LOCATION_CODE}${NETWORK}  ; echo 'Workload Environment File' $workload_environment_file_name
                dos2unix -q ${deployer_environment_file_name}
                dos2unix -q ${workload_environment_file_name}

                if [ ! -f ${deployer_environment_file_name} ]; then
                  echo -e "$boldred--- $(deployer_environment)$(deployer_region) was not found ---$reset"
                  echo "##vso[task.logissue type=error]Control plane configuration file $(deployer_environment)$(deployer_region) was not found."
                  exit 2
                fi


              echo -e "$green--- Read parameter values ---$reset"

                if [ "true" == $(inherit) ]; then

                  az_var=$(az pipelines variable-group variable list --group-id ${PARENT_VARIABLE_GROUP_ID} --query "Deployer_State_FileName.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    deployer_tfstate_key=$(cat ${deployer_environment_file_name}  | grep deployer_tfstate_key | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer State File' $deployer_tfstate_key
                  else
                    deployer_tfstate_key=${az_var} ; echo 'Deployer State File' $deployer_tfstate_key
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${PARENT_VARIABLE_GROUP_ID} --query "Deployer_Key_Vault.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    key_vault=$(cat ${deployer_environment_file_name}  | grep keyvault= | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' ${key_vault}
                  else
                    key_vault=${az_var}; echo 'Deployer Key Vault' ${key_vault}
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${PARENT_VARIABLE_GROUP_ID} --query "Terraform_Remote_Storage_Account_Name.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    REMOTE_STATE_SA=$(cat ${deployer_environment_file_name}  | grep REMOTE_STATE_SA      | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file storage account' $REMOTE_STATE_SA
                  else
                    REMOTE_STATE_SA=${az_var}; echo 'Terraform state file storage account' $REMOTE_STATE_SA
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${PARENT_VARIABLE_GROUP_ID} --query "Terraform_Remote_Storage_Subscription.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    STATE_SUBSCRIPTION=$(cat ${deployer_environment_file_name}  | grep STATE_SUBSCRIPTION   | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                  else
                    STATE_SUBSCRIPTION=${az_var}; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "ARM_SUBSCRIPTION_ID.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                    exit 2
                  else
                    echo 'Target subscription' $WL_ARM_SUBSCRIPTION_ID
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "Workload_Key_Vault.value" | tr -d \")
                  if [ -z ${az_var} ]; then
                    if [ -f ${workload_environment_file_name} ]; then
                      export workload_key_vault=$(cat ${workload_environment_file_name}  | grep workload_key_vault     | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault' ${workload_key_vault}
                    fi
                  else
                    export workload_key_vault=$(Workload_Key_Vault)  ; echo 'Workload Key Vault' ${workload_key_vault}
                  fi
                else
                  deployer_tfstate_key=$(cat ${workload_environment_file_name}  | grep deployer_tfstate_key | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer State File' $deployer_tfstate_key
                  key_vault=$(cat ${workload_environment_file_name}  | grep workload_key_vault= -m1 | awk -F'=' '{print $2}' | xargs) ; echo 'Deployer Key Vault' ${key_vault}
                  REMOTE_STATE_SA=$(cat ${workload_environment_file_name}  | grep REMOTE_STATE_SA      | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file storage account' $REMOTE_STATE_SA
                  STATE_SUBSCRIPTION=$(cat ${workload_environment_file_name}  | grep STATE_SUBSCRIPTION   | awk -F'=' '{print $2}' | xargs) ; echo 'Terraform state file subscription' $STATE_SUBSCRIPTION
                fi

              secrets_set=1
              if [ ! -f /etc/profile.d/deploy_server.sh ]; then
                echo -e "$green --- Install terraform ---$reset"

                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip

                export ARM_CLIENT_ID=$WL_ARM_CLIENT_ID
                export ARM_CLIENT_SECRET=$WL_ARM_CLIENT_SECRET
                export ARM_TENANT_ID=$WL_ARM_TENANT_ID
                export ARM_SUBSCRIPTION_ID=$WL_ARM_SUBSCRIPTION_ID
                export ARM_USE_MSI=false

                echo -e "$green--- az login ---$reset"
                  az login --service-principal --username $CP_ARM_CLIENT_ID --password=$CP_ARM_CLIENT_SECRET --tenant $CP_ARM_TENANT_ID --output none
                  return_code=$?
                  if [ 0 != $return_code ]; then
                    echo -e "$boldred--- Login failed ---$reset"
                    echo "##vso[task.logissue type=error]az login failed."
                    exit $return_code
                  fi

              else
                echo -e "$green--- az login ---$reset"

                  if [ $LOGON_USING_SPN == "true" ]; then
                    echo "Using SPN"
                    az login --service-principal --username $CP_ARM_CLIENT_ID --password=$CP_ARM_CLIENT_SECRET --tenant $CP_ARM_TENANT_ID --output none
                  else
                    az login --identity --allow-no-subscriptions --output none
                  fi

                  return_code=$?
                  if [ 0 != $return_code ]; then
                    echo -e "$boldred--- Login failed ---$reset"
                    echo "##vso[task.logissue type=error]az login failed."
                    exit $return_code
                  fi

                echo -e "$green --- Set secrets ---$reset"

                $SAP_AUTOMATION_REPO_PATH/deploy/scripts/set_secrets.sh --workload --vault "${key_vault}" --environment "${ENVIRONMENT}"  \
                  --region "${LOCATION}" --subscription $WL_ARM_SUBSCRIPTION_ID --spn_id $WL_ARM_CLIENT_ID --spn_secret "${WL_ARM_CLIENT_SECRET}"      \
                  --tenant_id $WL_ARM_TENANT_ID --keyvault_subscription $STATE_SUBSCRIPTION
                secrets_set=$? ; echo -e "$cyan Set Secrets returned $secrets_set $reset"
                az keyvault set-policy --name "${key_vault}" --object-id $WL_ARM_OBJECT_ID --secret-permissions get list  --output none
              fi

              debug_variable='--output none'
              debug_variable=''

              az login --service-principal --username $CP_ARM_CLIENT_ID --password=$CP_ARM_CLIENT_SECRET --tenant $CP_ARM_TENANT_ID --output none

              isUserAccessAdmin=$(az role assignment list --role "User Access Administrator" --subscription $STATE_SUBSCRIPTION  --query "[?principalType=='ServicePrincipal'].principalId | [0] " --assignee $CP_ARM_CLIENT_ID)

              tfstate_resource_id=$(az resource list --name "${REMOTE_STATE_SA}" --subscription ${STATE_SUBSCRIPTION} --resource-type Microsoft.Storage/storageAccounts --query "[].id | [0]" -o tsv)

              if [ -n "${isUserAccessAdmin}" ]; then

                echo -e "$green--- Set permissions ---$reset"
                  perms=$(az role assignment list --subscription ${STATE_SUBSCRIPTION} --role "Reader" --query "[?principalId=='$WL_ARM_CLIENT_ID'].principalId | [0]"  -o tsv  --only-show-errors)
                  if [ -z "$perms" ]; then
                    echo -e "$green --- Assign subscription permissions to $perms ---$reset"
                    az role assignment create --assignee-object-id $WL_ARM_OBJECT_ID  --assignee-principal-type ServicePrincipal --role "Reader" --scope "/subscriptions/${STATE_SUBSCRIPTION}" --output none
                  fi

                  perms=$(az role assignment list --subscription ${STATE_SUBSCRIPTION} --role "Storage Account Contributor" --scope "${tfstate_resource_id}" --query "[?principalId=='$WL_ARM_OBJECT_ID'].principalName | [0]" -o tsv  --only-show-errors)
                  if [ -z "$perms" ]; then
                    echo "Assigning Storage Account Contributor permissions for $WL_ARM_OBJECT_ID to ${tfstate_resource_id}"
                    az role assignment create --assignee-object-id $WL_ARM_OBJECT_ID  --assignee-principal-type ServicePrincipal --role "Storage Account Contributor" --scope "${tfstate_resource_id}" --output none
                  fi

                  resource_group_name=$(az resource show --id "${tfstate_resource_id}" --query resourceGroup -o tsv)

                if [ -n ${resource_group_name} ]; then
                  for scope in $(az resource list --resource-group "${resource_group_name}" --subscription ${STATE_SUBSCRIPTION} --resource-type Microsoft.Network/privateDnsZones --query "[].id" --output tsv); do
                    perms=$(az role assignment list --subscription ${STATE_SUBSCRIPTION} --role "Private DNS Zone Contributor" --scope $scope --query "[?principalId=='$WL_ARM_OBJECT_ID'].principalId | [0]" -o tsv  --only-show-errors)
                    if [ -z "$perms" ]; then
                      echo "Assigning DNS Zone Contributor permissions for $WL_ARM_OBJECT_ID to ${scope}"
                      az role assignment create --assignee-object-id $WL_ARM_OBJECT_ID  --assignee-principal-type ServicePrincipal --role "Private DNS Zone Contributor" --scope $scope --output none
                    fi
                  done
                fi

                  resource_group_name=$(az keyvault show --name "${key_vault}" --query resourceGroup --subscription ${STATE_SUBSCRIPTION} -o tsv)

                  if [ -n ${resource_group_name} ]; then
                    resource_group_id=$(az group show --name ${resource_group_name} --subscription ${STATE_SUBSCRIPTION} --query id -o tsv)

                    vnet_resource_id=$(az resource list --resource-group "${resource_group_name}" --subscription ${STATE_SUBSCRIPTION} --resource-type Microsoft.Network/virtualNetworks -o tsv --query "[].id | [0]")
                    if [ -n "${vnet_resource_id}" ]; then
                      perms=$(az role assignment list --subscription ${STATE_SUBSCRIPTION} --role "Network Contributor"  --scope $vnet_resource_id --only-show-errors --query "[].principalId | [0]"  --assignee $WL_ARM_OBJECT_ID -o tsv --only-show-errors)

                      if [ -z "$perms" ]; then
                        echo "Assigning Network Contributor rights for $WL_ARM_OBJECT_ID to ${vnet_resource_id}"
                        az role assignment create --assignee-object-id $WL_ARM_OBJECT_ID  --assignee-principal-type ServicePrincipal --role "Network Contributor"  --scope $vnet_resource_id --output none
                      fi
                    fi
                fi
              else
                echo "##vso[task.logissue type=warning]Service Principal $CP_ARM_CLIENT_ID does not have 'User Access Administrator' permissions. Please ensure that the service principal $WL_ARM_CLIENT_ID has permissions on the Terrafrom state storage account and if needed on the Private DNS zone and the source management network resource"
              fi

              echo -e "$green--- Deploy the workload zone ---$reset"
                cd $CONFIG_REPO_PATH/LANDSCAPE/$(workload_zone_folder)
                if [ -f /etc/profile.d/deploy_server.sh ]; then
                  az logout --output none
                  if [ $LOGON_USING_SPN == "true" ]; then
                    echo "Logon Using SPN"

                    export ARM_CLIENT_ID=$WL_ARM_CLIENT_ID
                    export ARM_CLIENT_SECRET=$WL_ARM_CLIENT_SECRET
                    export ARM_TENANT_ID=$WL_ARM_TENANT_ID
                    export ARM_SUBSCRIPTION_ID=$WL_ARM_SUBSCRIPTION_ID
                    export ARM_USE_MSI=false
                    az login --service-principal --username $WL_ARM_CLIENT_ID --password=$WL_ARM_CLIENT_SECRET --tenant $WL_ARM_TENANT_ID --output none
                    return_code=$?
                    if [ 0 != $return_code ]; then
                      echo -e "$boldred--- Login failed ---$reset"
                      echo "##vso[task.logissue type=error]az login failed."
                      exit $return_code
                    fi
                  else
                    export ARM_USE_MSI=true
                    az login --identity --allow-no-subscriptions --output none
                  fi
                else
                  export ARM_CLIENT_ID=$WL_ARM_CLIENT_ID
                  export ARM_CLIENT_SECRET=$WL_ARM_CLIENT_SECRET
                  export ARM_TENANT_ID=$WL_ARM_TENANT_ID
                  export ARM_SUBSCRIPTION_ID=$WL_ARM_SUBSCRIPTION_ID
                  export ARM_USE_MSI=false
                  az login --service-principal --username $WL_ARM_CLIENT_ID --password=$WL_ARM_CLIENT_SECRET --tenant $WL_ARM_TENANT_ID --output none
                  return_code=$?
                  if [ 0 != $return_code ]; then
                    echo -e "$boldred--- Login failed ---$reset"
                    echo "##vso[task.logissue type=error]az login failed."
                    exit $return_code
                  fi

                fi

                $SAP_AUTOMATION_REPO_PATH/deploy/scripts/install_workloadzone.sh --parameterfile $(workload_zone_configuration_file)       \
                  --deployer_environment $(deployer_environment) --subscription $(ARM_SUBSCRIPTION_ID)                                 \
                  --spn_id $WL_ARM_CLIENT_ID --spn_secret $WL_ARM_CLIENT_SECRET --tenant_id $WL_ARM_TENANT_ID                                   \
                  --deployer_tfstate_key "${deployer_tfstate_key}" --keyvault "${key_vault}" --storageaccountname "${REMOTE_STATE_SA}" \
                  --state_subscription "${STATE_SUBSCRIPTION}" --auto-approve --ado
                return_code=$?

                echo "Return code: ${return_code}"
                if [ -f ${workload_environment_file_name} ]; then
                     export workload_key_vault=$(cat ${workload_environment_file_name} | grep workloadkeyvault=      | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Key Vault'       ${workload_key_vault}
                        export workload_prefix=$(cat ${workload_environment_file_name} | grep workload_zone_prefix=  | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Prefix'          ${workload_prefix}
                  export landscape_tfstate_key=$(cat ${workload_environment_file_name} | grep landscape_tfstate_key= | awk -F'=' '{print $2}' | xargs) ; echo 'Workload Zone State File' $landscape_tfstate_key
                fi

                az logout --output none

                az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "FENCING_SPN_ID.value")
                if [ -z ${az_var} ]; then
                  echo "##vso[task.logissue type=warning]Variable FENCING_SPN_ID is not set. Required for highly available deployments"
                else
                  export fencing_id=$(az keyvault secret list --vault-name $workload_key_vault --query [].name -o tsv | grep ${workload_prefix}-fencing-spn-id | xargs)
                  if [ -z "$fencing_id" ]; then
                    az keyvault secret set --name ${workload_prefix}-fencing-spn-id --vault-name $workload_key_vault --value $(FENCING_SPN_ID)  --output none
                    az keyvault secret set --name ${workload_prefix}-fencing-spn-pwd --vault-name $workload_key_vault --value=$FENCING_SPN_PWD  --output none
                    az keyvault secret set --name ${workload_prefix}-fencing-spn-tenant --vault-name $workload_key_vault --value $(FENCING_SPN_TENANT)  --output none
                  fi
                fi

              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)

                echo -e "$green--- Pull latest ---$reset"
                cd $CONFIG_REPO_PATH
                git pull

                added=0
                if [ -f ${workload_environment_file_name} ]; then
                  git add ${workload_environment_file_name}
                  added=1
                fi
                if [ -f ${workload_environment_file_name}.md ]; then
                  git add ${workload_environment_file_name}.md
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/LANDSCAPE/$(workload_zone_folder)/.terraform/terraform.tfstate ]; then
                  git add -f $(Deployment_Configuration_Path)/LANDSCAPE/$(workload_zone_folder)/.terraform/terraform.tfstate
                  added=1
                fi
                if [ 1 == $added ]; then
                  git config --global user.email "$(Build.RequestedForEmail)"
                  git config --global user.name "$(Build.RequestedFor)"
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"
                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push --set-upstream origin $(Build.SourceBranchName)
                fi

                if [ -f ${workload_environment_file_name}.md ]; then
                  echo "##vso[task.uploadsummary]${workload_environment_file_name}.md"
                fi
              echo -e "$green--- Adding variables to the variable group" $(variable_group) "---$reset"
                if [ -n $VARIABLE_GROUP_ID ]; then
                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query Terraform_Remote_Storage_Account_Name.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Account_Name --value "${REMOTE_STATE_SA}" --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Account_Name --value "${REMOTE_STATE_SA}" --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query Terraform_Remote_Storage_Subscription.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Subscription --value "${STATE_SUBSCRIPTION}" --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name Terraform_Remote_Storage_Subscription --value "${STATE_SUBSCRIPTION}" --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query Deployer_State_FileName.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name Deployer_State_FileName --value "${deployer_tfstate_key}" --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name Deployer_State_FileName --value "${deployer_tfstate_key}" --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query Deployer_Key_Vault.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name Deployer_Key_Vault --value ${key_vault} --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name Deployer_Key_Vault --value ${key_vault} --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "${NETWORK}"Workload_Key_Vault.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Key_Vault --value $workload_key_vault --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Key_Vault --value $workload_key_vault --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "${NETWORK}"Workload_Secret_Prefix.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Secret_Prefix --value "${workload_prefix}" --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Secret_Prefix --value "${workload_prefix}" --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query "${NETWORK}"Workload_Zone_State_FileName.value --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Zone_State_FileName --value "${landscape_tfstate_key}" --output none --only-show-errors
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name "${NETWORK}"Workload_Zone_State_FileName --value "${landscape_tfstate_key}" --output none --only-show-errors
                  fi

                  az_var=$(az pipelines variable-group variable list --group-id ${VARIABLE_GROUP_ID} --query WZ_PAT.isSecret --output table)
                  if [ -n "${az_var}" ]; then
                    az pipelines variable-group variable update --group-id ${VARIABLE_GROUP_ID} --name WZ_PAT --value $AZURE_DEVOPS_EXT_PAT --output none --only-show-errors --secret true
                  else
                    az pipelines variable-group variable create --group-id ${VARIABLE_GROUP_ID} --name WZ_PAT --value $AZURE_DEVOPS_EXT_PAT --output none --only-show-errors --secret true
                  fi

                fi

                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Return code from install_workloadzone $return_code."
                  if [ -f ${workload_environment_file_name}.err ]; then
                    error_message=$(cat ${workload_environment_file_name}.err)
                    echo "##vso[task.logissue type=error]Error message: $error_message."
                  fi

                fi

              exit $return_code

            displayName:               Deploy SAP Workload Zone
            env:
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              WL_ARM_SUBSCRIPTION_ID:  $(ARM_SUBSCRIPTION_ID)
              WL_ARM_TENANT_ID:        $(ARM_TENANT_ID)
              WL_ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
              WL_ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
              WL_ARM_OBJECT_ID:        $(ARM_OBJECT_ID)
              CP_ARM_SUBSCRIPTION_ID:  $(CP_ARM_SUBSCRIPTION_ID)
              CP_ARM_CLIENT_ID:        $(CP_ARM_CLIENT_ID)
              CP_ARM_CLIENT_SECRET:    $(CP_ARM_CLIENT_SECRET)
              CP_ARM_TENANT_ID:        $(CP_ARM_TENANT_ID)
              CP_ARM_OBJECT_ID:        $(CP_ARM_OBJECT_ID)
              FENCING_SPN_PWD:         $(FENCING_SPN_PWD)
              SAPBITS:                 $(INSTALLATION_MEDIA_ACCOUNT)
              TEST_ONLY:               ${{ parameters.test }}
              PAT:                     $(WZ_PAT)
              TF_LOG:                  $(TF_LOG)
              TF_IN_AUTOMATION:        true
              SAP_AUTOMATION_REPO_PATH: ${{ parameters.sap_automation_repo_path }}
              CONFIG_REPO_PATH:        ${{ parameters.config_repo_path }}/$(Deployment_Configuration_Path)
              LOGON_USING_SPN:         $(Logon_Using_SPN)
            failOnStderr: false
