# This pipeline deploys the SAP workload zone (landscape) with required resources

parameters:
- name: workloadzone
  displayName: ENV-LOCA-VNET-INFRASTRUCTURE
  type: string
  default: DEV-WEEU-SAP01-INFRASTRUCTURE

- name: environment
  displayName: Deployer Environment (MGMT, DEV, QUA, PRD, ...)
  type: string
  default: MGMT

trigger:
  none

pool:
  vmImage: ubuntu-latest

variables:
  zonefolder: ${{ parameters.workloadzone }}
  zoneconfig: ${{ parameters.workloadzone }}.tfvars
  env: ${{ parameters.environment }}
  log: logfile_$(Build.BuildId)

name: $(zonefolder)_$(SourceBranchName)_$(Date:yyyyMMdd)

stages:
- stage: Deploy_SAP_workloadzone
  jobs:
  - job: Deploy_SAP_workloadzone
    steps:
    - script: |
        #!/bin/bash
        green="\e[1;32m" ; reset="\e[0m"
        echo -e "$green--- Install Terraform ---$reset"
          wget -q https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
          unzip -qq terraform_1.0.8_linux_amd64.zip
          sudo mv terraform /bin/ ; rm terraform_1.0.8_linux_amd64.zip
        echo -e "$green--- Clone the $(Branch) branch of repository $(Repository) ---$reset"
          git clone --quiet --single-branch --branch $(Branch) $(Repository)
        echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
        echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
          export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)/sap-automation
        echo -e "$green--- Set WORKSPACES folder as new home ---$reset"
          export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
          cd $HOME; mkdir -p .sap_deployment_automation
          echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
        echo -e "$green--- az login ---$reset"
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
        echo -e "$green--- --- Convert config file to UX format ---$reset"
          sudo apt-get -qq install dos2unix
          dos2unix -q LANDSCAPE/$(zonefolder)/$(zoneconfig)
        echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
          organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
          git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
        echo -e "$green--- Run the install workloadzone script that deploys the SAP networks ---$reset"
          cd $HOME/LANDSCAPE/$(zonefolder)
          $DEPLOYMENT_REPO_PATH/deploy/scripts/install_workloadzone.sh --parameterfile $(zoneconfig) --deployer_environment $(env) --subscription $(ARM_SUBSCRIPTION_ID) --spn_id $(ARM_CLIENT_ID) --spn_secret $(ARM_CLIENT_SECRET) --tenant_id $(ARM_TENANT_ID) --auto-approve
        echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
          cd $(Build.Repository.LocalPath)
          rm $(Deployment_Configuration_Path)/.sap_deployment_automation/config
          git config --global user.email "$(Build.RequestedForEmail)"
          git config --global user.name "$(Build.RequestedFor)" 
          git add $(Deployment_Configuration_Path)/.sap_deployment_automation                               &>  /tmp/$(log)
          git add $(Deployment_Configuration_Path)/LANDSCAPE/$(zonefolder)/.terraform/terraform.tfstate     &>> /tmp/$(log)
          git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"            &>> /tmp/$(log)
          git push -f origin HEAD:main                                                                      &>> /tmp/$(log)
        echo "output the log ---$reset"
          cat /tmp/$(log)
        git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
      displayName: Deploy_SAP_workloadzone
      env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      failOnStderr: true
