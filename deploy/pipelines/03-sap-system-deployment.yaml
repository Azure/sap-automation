# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:

- name: sap_system
  displayName: ENV-LOCA-VNET-SID
  type: string
  default: DEV-WEEU-SAP01-X01

- name: cleanup
  displayName: Remove the relevant Resource Groups instead of deploying
  type: boolean
  default: False

trigger:
  none

pool:
#  name: MIMERGEL-Selfhosted
  vmImage: ubuntu-latest

variables:
  sapsystemfolder: ${{ parameters.sap_system }}
  sapsystemconfig: ${{ parameters.sap_system }}.tfvars
  log: logfile_$(Build.BuildId)

name: $(sapsystemfolder)_Cleanup_${{ parameters.cleanup }}_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Deploy_SAP_Infrastructure
  condition: eq(${{ parameters.cleanup }}, false)
  jobs:
  - job: Deploy_SAP_Infrastructure
    steps:
    - script: |
        #!/bin/bash
        green="\e[1;32m"
        reset="\e[0m"
        SID=$(echo $(sapsystemfolder) | cut -d'-' -f4 | xargs) 
        echo -e "$green--- Install Terraform ---$reset"
          wget -q https://releases.hashicorp.com/terraform/1.0.8/terraform_1.0.8_linux_amd64.zip
          unzip -qq terraform_1.0.9_linux_amd64.zip
          sudo mv terraform /bin/ ; rm terraform_1.0.8_linux_amd64.zip
        echo -e "$green--- Clone the $(Branch) branch of repository $(Repository) ---$reset"
          git clone --quiet --single-branch --branch $(Branch) $(Repository)
        echo -e "$green--- Set DEPLOYMENT_REPO_PATH variable and ---$reset"
        echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
          export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)/sap-automation
          echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
        echo -e "$green--- Set local build repo path as new home ---$reset"
          export HOME=$(Build.Repository.LocalPath)
        echo -e "$green--- az login ---$reset"
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
        echo -e "$green--- --- Convert config file to UX format ---$reset"
          sudo apt-get -qq install dos2unix
          dos2unix -q SYSTEM/$(sapsystemfolder)/$(sapsystemconfig)
        echo -e "$green--- Prepare the exchange of information from devops agent back to the repository ---$reset"
          organization=$(echo $(System.CollectionUri) | cut -d'/' -f4)
          git config  http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader "AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN"
        echo -e "$green--- Run the installer script that deploys the SAP System ---$reset"
          cd SYSTEM/$(sapsystemfolder)
          ${DEPLOYMENT_REPO_PATH}/deploy/scripts/installer.sh --parameterfile $(sapsystemconfig) --type sap_system --ado --auto-approve
          cd $HOME
        echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
          git config --global user.email "$(Build.RequestedForEmail)"
          git config --global user.name "$(Build.RequestedFor)" 
          git add .sap_deployment_automation    &>> /tmp/$(log)2
          git add SYSTEM/$(sapsystemfolder)/.terraform/terraform.tfstate   &>> /tmp/$(log)2
          git add SYSTEM/$(sapsystemfolder)/sap-parameters.yaml            &>> /tmp/$(log)2
          git add SYSTEM/$(sapsystemfolder)/${SID}_hosts.yaml              &>> /tmp/$(log)2
          git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]" &>> /tmp/$(log)2
          git push -f origin HEAD:main             &>> /tmp/$(log)2
        echo "output the log ---$reset"
          cat /tmp/$(log)2
        git config --unset-all http.https://$organization@dev.azure.com/$organization/$(System.TeamProject)/_git/$(Build.Repository.Name).extraheader
      displayName: Deploy_SAP_Infrastructure
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      failOnStderr: true

- stage: Cleanup
  condition: eq(${{ parameters.cleanup }}, true)
  jobs:
  - job: Remove_Deployer
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Remove Resource Group $(sapsystemfolder)'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(AZURECONNECTIONNAME)'
        subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        action: 'DeleteRG'
        resourceGroupName: '$(sapsystemfolder)'