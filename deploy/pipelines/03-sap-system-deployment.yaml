---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               This pipeline deploys the SAP Infrastructure                 |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name: SAP Infrastructure Deployment $(sapsystemfolder) [$(Date:yyyyMMdd)]

parameters:
  - name:                              sap_system
    displayName:                       "SAP System configuration name, use the following syntax: ENV-LOCA-VNET-SID"
    type:                              string
    default:                           DEV-WEEU-SAP01-X00

  - name:                              environment
    displayName:                       Workload Environment (DEV, QUA, PRD, ...)
    type:                              string
    default:                           DEV

trigger:                               none

pool:
  name:                                $(Agent)
  vmImage:                             ubuntu-latest

variables:
  - group:                             "SAP-deployment-variables-general"
  - group:                             ${{ parameters.environment }}
  - name:                              sapsystemfolder
    value:                             ${{ parameters.sap_system }}
  - name:                              sapsystemconfig
    value:                             ${{ parameters.sap_system }}.tfvars
  - name:                              tf_url
    value:                             https://releases.hashicorp.com/terraform/$(tf_version)/terraform_$(tf_version)_linux_amd64.zip

stages:
  - stage:                             Deploy_SAP_infrastructure
    displayName:                       Deploy SAP infrastructure
    jobs:
      - job:                           Deploy_SAP_infrastructure
        displayName:                   Deploy SAP infrastructure
        steps:
          - checkout:                  self
            persistCredentials:        true
          - script: |
              #!/bin/bash
              echo "##vso[build.updatebuildnumber]Deploying the SAP System defined in $(sapsystemfolder)"
              green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"
              echo -e "$green--- Update .sap_deployment_automation/config as DEPLOYMENT_REPO_PATH can change on devops agent ---$reset"
                export DEPLOYMENT_REPO_PATH=$(Build.Repository.LocalPath)
                export HOME=$(Build.Repository.LocalPath)/$(Deployment_Configuration_Path)
                cd $HOME; mkdir -p .sap_deployment_automation
                echo DEPLOYMENT_REPO_PATH=$DEPLOYMENT_REPO_PATH > .sap_deployment_automation/config
              echo -e "$green--- Git checkout and pull DevOps Repository ---$reset"
                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git checkout $(Branch)
                git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull
              echo -e "$green--- Validations ---$reset"
              if [ ! -f $HOME/SYSTEM/$(sapsystemfolder)/$(sapsystemconfig) ]; then
                echo -e "$boldred--- $(sapsystemconfig) was not found ---$reset"
                echo "##vso[task.logissue type=error]File $(sapsystemconfig) was not found."
                exit 2
              fi
              if [ ! -n $(ARM_SUBSCRIPTION_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_SUBSCRIPTION_ID was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_CLIENT_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_CLIENT_ID was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_CLIENT_SECRET) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_CLIENT_SECRET was not defined."
                exit 2
              fi
              if [ ! -n $(ARM_TENANT_ID) ]; then
                echo "##vso[task.logissue type=error]Variable ARM_TENANT_ID was not defined."
                exit 2
              fi
              SID=$(echo $(sapsystemfolder) | cut -d'-' -f4 | xargs) 
              if [ ! -n ${SID} ]; then
                echo "##vso[task.logissue type=error]SID was not defined in the parameter file."
                exit 2
              fi
              echo -e "$green--- Install Terraform ---$reset"
                wget -q $(tf_url)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo "##vso[task.logissue type=error]Unable to download Terraform version $(tf_version)."
                  exit 2
                fi
                unzip -qq terraform_$(tf_version)_linux_amd64.zip ; sudo mv terraform /bin/
                rm -f terraform_$(tf_version)_linux_amd64.zip
              echo -e "$green--- az login ---$reset"
                az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
                return_code=$?
                if [ 0 != $return_code ]; then
                  echo -e "$boldred--- Login failed ---$reset"
                  echo "##vso[task.logissue type=error]az login failed."
                  exit $return_code
                fi
                az account set --subscription $(ARM_SUBSCRIPTION_ID)
              echo -e "$green--- --- Convert config file to UX format ---$reset"
                sudo apt-get -qq install dos2unix
                dos2unix -q SYSTEM/$(sapsystemfolder)/$(sapsystemconfig)
              echo -e "$green--- Run the installer script that deploys the SAP System ---$reset"
                cd $HOME/SYSTEM/$(sapsystemfolder)
                ${DEPLOYMENT_REPO_PATH}/deploy/scripts/installer.sh --parameterfile $(sapsystemconfig) --type sap_system --ado --auto-approve
                return_code=$?
              echo -e "$green--- Add & update files in the DevOps Repository ---$reset"
                cd $(Build.Repository.LocalPath)
                added=0
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/.terraform/terraform.tfstate ]; then
                  git add -f $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/.terraform/terraform.tfstate
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/sap-parameters.yaml ]; then
                  git add  $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/sap-parameters.yaml
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/${SID}_hosts.yaml ]; then
                  git add    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/${SID}_hosts.yaml
                  added=1
                fi
                if [ -f $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/${SID}.md ]; then
                  git add    $(Deployment_Configuration_Path)/SYSTEM/$(sapsystemfolder)/${SID}.md
                  echo "##vso[task.uploadsummary]$HOME/SYSTEM/$(sapsystemfolder)/${SID}.md"
                  added=1
                fi
                if [ 1 == $added ]; then
                  git commit -m "Added updates from devops deployment $(Build.DefinitionName) [skip ci]"

                  git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                fi
              exit $return_code

            displayName:               Deploy_SAP_infrastructure
            env:
              ARM_SUBSCRIPTION_ID:     $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:           $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:       $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:           $(ARM_TENANT_ID)
              SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
            failOnStderr:              false
...
