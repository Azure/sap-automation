---
# +------------------------------------4--------------------------------------*/
- name:                                "WIN-SQL: Ensure DSC modules are installed"
  community.windows.win_psmodule:
    name:                              "{{ item }}"
    state:                             present
  loop:
    - PSDesiredStateConfiguration
    - SqlServerDsc

- name:                                "WIN: Joining the domain {{ domain }}"
  ansible.builtin.debug:
    msg:
      - "Domain:                       {{ domain_name }}"
      - "domain_svc_account:           {{ domain_service_account }}"
      - "hostname:                     {{ ansible_hostname }}"
    # verbosity:                         2

- name:                                "Assert domain user name and other details are available"
  ansible.builtin.assert:
    that:
      - domain_name is defined
      - domain_service_account is defined
      - domain_service_password is defined
    fail_msg:
      - "Domain name is not defined"
      - "Domain service account is not defined"
      - "Domain service account password is not defined"
    quiet:                            true

- name:                                "Grant required privileges to the SQL Server account"
  become:                              true
  become_method:                       'runas'
  become_user:                         '{{ orchestration_ansible_user }}'
  ansible.windows.win_user_right:
    name:                              '{{ privilege_constant }}'
    users:                             '{{ win_sql_svc_account }}'
    action:                            add
  loop:
    - SeServiceLogonRight
    - SeAssignPrimaryTokenPrivilege
    - SeChangeNotifyPrivilege
    - SeIncreaseQuotaPrivilege
    - SeIncreaseWorkingSetPrivilege
    - SeManageVolumePrivilege
    - SeLockMemoryPrivilege
  loop_control:
    loop_var:                         privilege_constant

- name:                                "Grant required privileges to the SQL Server agent account"
  become:                              true
  become_method:                       'runas'
  become_user:                         '{{ orchestration_ansible_user }}'
  ansible.windows.win_user_right:
    name:                              '{{ privilege_constant }}'
    users:                             '{{ win_sqlagent_svc_account }}'
    action:                            add
  loop:
    - SeServiceLogonRight
    - SeAssignPrimaryTokenPrivilege
    - SeChangeNotifyPrivilege
    - SeIncreaseQuotaPrivilege
  loop_control:
    loop_var:                         privilege_constant

- name:                                "Create dummy account pass for gMSA accounts"
  ansible.builtin.set_fact:
    win_gMSA_dummy_password:           "{{ win_gMSA_dummy_password | default('') | password_hash('sha512') }}"

- name:                                "Convert SQL Server service from running with local account to domain account"
  ansible.windows.win_dsc:
    resource_name:                     SqlServiceAccount
    ServerName:                        "{{ ansible_hostname }}"
    InstanceName:                      "{{ mssql_instance_name }}"
    ServiceAccount_username:           "{{ win_sql_svc_account }}"
    ServiceAccount_password:           "{{ win_gMSA_dummy_password }}"
    ServiceType:                       'DatabaseEngine'
    RestartService:                           true
    PsDscRunAsCredential_username:     "{{ domain_service_account }}@{{ domain_name }}"
    PsDscRunAsCredential_password:     "{{ domain_service_password }}"

- name:                                "Convert SQL Server agent service from running with local account to domain account"
  ansible.windows.win_dsc:
    resource_name:                     SqlServiceAccount
    ServerName:                        "{{ ansible_hostname }}"
    InstanceName:                      "{{ mssql_instance_name }}"
    ServiceAccount_username:           "{{ win_sql_svc_account }}"
    ServiceAccount_password:           "{{ win_gMSA_dummy_password }}"
    ServiceType:                       'SQLServerAgent'
    RestartService:                    true
    PsDscRunAsCredential_username:     "{{ domain_service_account }}@{{ domain_name }}"
    PsDscRunAsCredential_password:     "{{ domain_service_password }}"

- name:                                "Add required users to SQL Server"
  ansible.windows.win_dsc:
    resource_name:                     SqlLogin
    Ensure:                            Present
    ServerName:                        "{{ ansible_hostname }}"
    InstanceName:                      "{{ mssql_instance_name }}"
    LoginType:                         WindowsUser
    Name:                              "{{ item }}"
    PsDscRunAsCredential_username:     "{{ domain_service_account }}@{{ domain_name }}"
    PsDscRunAsCredential_password:     "{{ domain_service_password }}"
  loop:
    - "{{ win_cluster_svc_account }}"
    - "{{ win_sql_svc_account }}"
    - "{{ win_sqlagent_svc_account }}"
  register:                           sql_login

# maybe split to two tasks, and assign lesser perms to cluster service account
- name:                                "Give permissions on the SQL Server to cluster service account"
  become:                              true
  ansible.windows.win_dsc:
    resource_name:                     SqlPermission
    ServerName:                        "{{ ansible_hostname }}"
    InstanceName:                      "{{ mssql_instance_name }}"
    PermissionToInclude:
      - State: Grant
        Permission:
          - ConnectSql
          - ViewServerState
          - AlterAnyEndpoint
          - AlterAnyAvailabilityGroup
    Name:                              "{{ item }}"
  loop:
    - "{{ win_cluster_svc_account }}"
    - "{{ win_sql_svc_account }}"
    - "{{ win_sqlagent_svc_account }}"
    - '{{ domain | upper }}\{{ domain_service_account }}'
  register:                           sql_server_permission

- name:                                "Create SQL Server Availability Group Endpoint"
  ansible.windows.win_dsc:
    resource_name:                     SqlEndpoint
    Ensure:                            Present
    EndpointName:                      "SDAF-HADR"
    EndpointType:                      DatabaseMirroring
    State:                             Started
    Port:                              5022
    ServerName:                        "{{ ansible_hostname }}"
    InstanceName:                      "{{ mssql_instance_name }}"
    PsDscRunAsCredential_username:     "{{ domain_service_account }}@{{ domain_name }}"
    PsDscRunAsCredential_password:     "{{ domain_service_password }}"

...
