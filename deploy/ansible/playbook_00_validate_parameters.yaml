---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                           Validate the parameters                          |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- hosts:                               localhost
  name:                                "0.0 Validations"
  gather_facts:                        false
  vars_files:
    - vars/ansible-input-api.yaml      # API Input template with defaults

# -------------------------------------+---------------------------------------8
#
# Build the list of tasks to be executed in order here.
#
# -------------------------------------+---------------------------------------8


  tasks:

    - name:                            "0.0 Validations - Initialize tier"
      ansible.builtin.set_fact:
        tier:                          fencing

    - name:                            "0.0 Validations - Retrieve the Fencing SPN details"
      ansible.builtin.include_role:
        name:                          roles-misc/0.2-kv-secrets
      when:                            platform != "ORACLE"
      tags:
        - kv-secrets

    - name:                            "0.0 Validations - Retrieve the storage account details"
      ansible.builtin.include_role:
        name:                          roles-misc/0.3.sap-installation-media-storage-details
        public:                        true
      tags:
        - kv-sap-installation-media-storage-details

    - name:                            "0.0 Validations - Check required variables are present and not empty"
      ansible.builtin.assert:
        that:
          - "{{ item_to_check.parameter is defined }}"                    # Has the variable been defined
          - "{{ item_to_check.parameter | trim | length > 1 }}"
        fail_msg:                      "{{ item_to_check.error }}"
      loop:
        - { parameter: 'bom_base_name', error: 'Please provide the Bill of materials name in bom_base_name parameter' }
        - { parameter: 'kv_name', error: 'Please provide the workload zone key vault name in kv_name parameter' }
        - { parameter: 'sap_fqdn', error: 'Please provide the SAP fqdn in  in sap_fqdn parameter' }
        - { parameter: 'sap_sid', error: 'Please provide the SAP SID in sap_sid parameter' }
        - { parameter: 'secret_prefix', error: 'Please provide the Key Vault secret prefix in secret_prefix parameter' }
        - { parameter: 'sapbits_location_base_path', error: 'Please provide the sapbits_location_base_path in the deployer key vault' }
      loop_control:
        loop_var: item_to_check

    - name:                            "0.0 Validations - Check required SCS HA variables are present and not empty"
      ansible.builtin.assert:
        that:
          - "{{ item_to_check.parameter is defined }}"                   # Has the variable been defined
          - "{{ item_to_check.parameter | trim | length > 1 }}"
        fail_msg:                      "{{ item_to_check.error }}"
      loop:
        - { parameter: 'NFS_Provider', error: 'A highly available SCS deployment requires that NFS_Provider provided' }
        - { parameter: 'sap_mnt', error: 'A highly available SCS deployment requires a shared sap_mnt is provided' }
        - { parameter: 'scs_lb_ip', error: 'A highly available SCS deployment requires that scs_lb_ip is provided' }
        - { parameter: 'ecs_lb_ip', error: 'A highly available SCS deployment requires  that ers_lb_ip is provided' }
        - { parameter: 'sap_hana_fencing_spn_client_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_client_pwd', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_subscription_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_tenant_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
      loop_control:
        loop_var: item_to_check
      when:                            scs_high_availability

    - name:                            "0.0 Validations - Check required Database HA variables are present and not empty"
      ansible.builtin.assert:
        that:
          - "{{ item_to_check.parameter is defined }}"                    # Has the variable been defined
          - "{{ item_to_check.parameter | trim | length > 1 }}"
        fail_msg:                      "{{ item_to_check.error }}"
      loop:
        - { parameter: 'db_lb_ip', error: 'A highly available SCS deployment requires that scs_lb_ip is provided' }
        - { parameter: 'sap_hana_fencing_spn_client_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_client_pwd', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_subscription_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_tenant_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
      loop_control:
        loop_var: item_to_check
      when:
        - db_high_availability
        - platform == "HANA"

    - name:                            "sharedHome variables"
      ansible.builtin.debug:
        var:                           sid_to_be_deployed
      when:                            MULTI_SIDS is defined
      loop:                            "{{ MULTI_SIDS }}"
      loop_control:
        loop_var:                      sid_to_be_deployed

    - name:                            "0.0 Validations - Validate ORACLE parameters"
      ansible.builtin.assert:
        that:
          - "{{ item_to_check.parameter }} is defined"                    # Has the variable been defined
          - "{{ item_to_check.parameter | trim | length > 1 }}"
        fail_msg:                      "{{ item_to_check.error }}"
      loop:
        - { parameter: 'ora_release', error: 'Oracle deployments requires that ora_release is provided' }
        - { parameter: 'ora_version', error: 'Oracle deployments requires that ora_version is provided' }
        - { parameter: 'oracle_sbp_patch', error: 'Oracle deployments requires that oracle_sbp_patch is provided' }
      loop_control:
        loop_var: item_to_check
      when:
        - platform == 'ORACLE'

    - name:                            "0.0 Validations - Show ORACLE parameters"
      ansible.builtin.debug:
        msg:
          - "ora_release: {{ ora_release }}"
          - "ora_version: {{ ora_version }}"
          - "oracle_sbp_patch: {{ oracle_sbp_patch }}"

      when:
        - platform == 'ORACLE'

    - name:                            "0.0 Validations - Get Access Token"
      ansible.builtin.command: >-
                                       az account get-access-token
      changed_when:                    false
      register:                        access_token_data

    - name:                            "0.0 Validations - Save the Json data to a Variable as a Fact"
      ansible.builtin.set_fact:
        json_azure_account:           "{{ access_token_data.stdout | from_json }}"
      no_log:                          true

    - name:                            "0.0 Validations - Extract details"
      ansible.builtin.set_fact:
        access_token:                  "{{ json_azure_account | json_query('accessToken') }}"

    - name:                            "0.0 Validations - Retrieve Subscription ID and Resource Group Name"
      ansible.builtin.command:         curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01"
      register:                        azure_metadata
      no_log:                          true
      changed_when:                    false
      args:
        warn:                          false

    - name:                            "0.0 Validations - Show IMDS results"
      ansible.builtin.debug:
        var:                           azure_metadata
        verbosity:                     2

    - name:                            "0.0 Validations - Save the Json data to a Variable as a Fact"
      ansible.builtin.set_fact:
        json_azure_data:               "{{ azure_metadata.stdout | from_json }}"
      no_log:                          true

    - name:                            "0.0 Validations - Extract details"
      ansible.builtin.set_fact:
        subscription_id:               "{{ json_azure_data | json_query('compute.subscriptionId') }}"
        resource_group_name:           "{{ json_azure_data | json_query('compute.resourceGroupName') }}"

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                  Validate the server side parameters                       |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- hosts:              "{{ sap_sid | upper }}_DB  :
                       {{ sap_sid | upper }}_SCS :
                       {{ sap_sid | upper }}_ERS :
                       {{ sap_sid | upper }}_PAS :
                       {{ sap_sid | upper }}_ERS :
                       {{ sap_sid | upper }}_APP :
                       {{ sap_sid | upper }}_WEB"

  name:                                "0.0 Validations - Validate SAP-Parameters"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults
  tasks:

    - name:                            "0.0 Validations: - Set Python version {{ distribution_id }}"
      ansible.builtin.set_fact:
        python_version:                'python2'

    - name:                            "0.0 Validations: - Set Python version {{ distribution_id }}"
      ansible.builtin.set_fact:
        python_version:                'python3'
      when:                            (ansible_distribution | lower ~ ansible_distribution_major_version) in ['suse15', 'redhat8', 'sles_sap15']

    - name:                            "0.0 Validations - Get details from local host"
      ansible.builtin.set_fact:
        subscription_id:               "{{ hostvars.localhost.subscription_id }}"
        resource_group_name:           "{{ hostvars.localhost.resource_group_name }}"
        access_token:                  "{{ hostvars.localhost.access_token }}"
      no_log:                          true

    - name:                            "0.0 Validations - Variables"
      ansible.builtin.debug:
        var:                           hostvars
        verbosity:                     4

    - name:                            "0.0 Validations - groupsnames"
      ansible.builtin.debug:
        var:                           group_names
        verbosity:                     4

    - name:                            "0.0 Validations - Variables"
      ansible.builtin.debug:
        msg:
          - "Virtual Host Name: {{ virtual_host }}"
          - "DNS:               {{ ansible_domain }}"

    - name:                            "0.0 Validations - Validate SCS and HDB instance numbers"
      ansible.builtin.assert:
        that:
          - "scs_instance_number != hdb_instance_number"
        fail_msg:                      "Please ensure that the scs_instance_number is different from the hdb_instance_number when performing a standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            "0.0 Validations - Validate SCS and HDB SIDs"
      ansible.builtin.assert:
        that:
          - "sap_sid != db_sid"
        fail_msg:                      "Please ensure that the sap_sid is different from the db_sid when performing a standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            Validate SCS and PAS instance numbers
      ansible.builtin.assert:
        that:
          - "scs_instance_number != pas_instance_number"
        fail_msg:                      "Please ensure that the pas_instance_number is different from the scs_instance_number when installing PAS on ASCS"
      when:                            (ansible_play_hosts_all | length) == 2

    - name:                            "0.0 Validations - Validate SCS and PAS instance numbers"
      ansible.builtin.assert:
        that:
          - "scs_instance_number != pas_instance_number"
        fail_msg:                      "Please ensure that the pas_instance_number is different from the scs_instance_number on standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            "0.0 Validations - Check internet connectivity"
      ansible.builtin.uri:
        url:                           "https://management.azure.com/subscriptions/{{ subscription_id }}/providers/Microsoft.Web/sites?api-version=2016-08-01"
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
          Accept: application/json
        status_code:
          - 200
          - 403
      register:                        internet_check
      vars:
        ansible_python_interpreter:    "{{ python_version }}"
      when:
        - (ansible_distribution | lower ~ ansible_distribution_major_version) in ['suse15', 'redhat8', 'sles_sap15' ]
      tags:
        - 0.0-internet

    - name:                            "0.0 Validations - Check internet connectivity"
      ansible.builtin.uri:
        url:                           "https://management.azure.com/subscriptions/{{ subscription_id }}/providers/Microsoft.Web/sites?api-version=2016-08-01"
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: application/json
          Accept: application/json
        status_code:
          - 200
          - 403
      register:                        internet_check
      when:
        - (ansible_distribution | lower ~ ansible_distribution_major_version) != 'suse15'
        - (ansible_distribution | lower ~ ansible_distribution_major_version) != 'sles_sap15'
        - (ansible_distribution | lower ~ ansible_distribution_major_version) != 'redhat8'
      tags:
        - 0.0-internet

    # - name:                            "0.0 Validations - Get repository listing (SUSE)"
    #   ansible.builtin.command:         zypper lr
    #   register:                        zypper_results
    #   changed_when:                    false
    #   args:
    #     warn:                          false  # quieten warning about using zypper directly
    #   when:
    #     - (ansible_distribution | lower ~ ansible_distribution_major_version) in ['suse15', 'sles_sap15' ]
    #   tags:
    #     - 0.0-zypper

    # - name:                            "0.0 Validations - Show repositories"
    #   ansible.builtin.debug:
    #     var:                           zypper_results.stdout_lines
    #     verbosity:                     0
    #   when:
    #     - (ansible_distribution | lower ~ ansible_distribution_major_version) in ['suse15', 'sles_sap15' ]
    #     - zypper_results is defined

    # - name:                            "0.0 Validations - Get repository listing (RHEL)"
    #   ansible.builtin.command:         yum repolist
    #   register:                        yum_results
    #   changed_when:                    false
    #   args:
    #     warn:                          false  # quieten warning about using yum directly
    #   when:
    #     - (ansible_distribution | lower ~ ansible_distribution_major_version) in ['redhat7', 'redhat8']
    #   tags:
    #     - 0.0-yum

    # - name:                            "0.0 Validations - Show repositories"
    #   ansible.builtin.debug:
    #     var:                           yum_results.stdout_lines
    #   when:
    #     - (ansible_distribution | lower ~ ansible_distribution_major_version) in ['redhat7', 'redhat8']
    #     - yum_results is defined

    - name:                            "0.0 Validations - Show Mounts"
      ansible.builtin.command:         df -h
      register:                        mounts
      failed_when:                     false
      tags:
        - 0.0-mounts

    - name:                            "0.0 Validations - Show Mounts"
      ansible.builtin.debug:
        var:                           mounts.stdout_lines
      when:                            mounts is defined

    - name:                            "0.0 Validations - Show Hosts"
      ansible.builtin.command:         cat /etc/hosts
      register:                        hosts
      tags:
        - 0.0-hosts

    - name:                            "0.0 Validations - Show Hosts"
      ansible.builtin.debug:
        var:                           hosts.stdout_lines
      when:                            hosts is defined

- hosts:               "{{ sap_sid | upper }}_DB"

  name:                                "0.0 Validations - Validate SAP-Parameters for Oracle"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults
  tasks:

    - name:                            "0.0 Validations - Validate that MULTISID is provided"
      ansible.builtin.assert:
        that:
          - MULTI_SIDS is defined                    # Has the variable been defined
          - MULTI_SIDS | length > 0
        fail_msg:                      "Please specify MULTI_SIDS if you are deploying a shared home installation"
      when:                            node_tier == 'oracle-multi-sid'

- hosts:               "{{ sap_sid | upper }}_WEB"

  name:                                "0.0 Validations - Validate SAP-Parameters for Web Dispatchers"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults
  tasks:

    - name:                            "0.0 Validations - VAlidate web_sid presence of Web Dispatchers are deployed"
      ansible.builtin.assert:
        that:
          - web_sid is defined                    # Has the variable been defined
          - web_sid | type_debug != 'NoneType'    # and given a value
          - web_sid | trim | length > 1
        fail_msg:                      "Please specify web_sid if you are deploying web dispatchers"
      when:                            (ansible_play_hosts_all | length) > 0

...
# /*----------------------------------------------------------------------------8
# |                                    END                                      |
# +------------------------------------4--------------------------------------*/
