---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                           Validate the parameters                          |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- hosts:                               localhost
  name:                                "0.0 Validations"
  gather_facts:                        false
  vars_files:
    - vars/ansible-input-api.yaml      # API Input template with defaults

# -------------------------------------+---------------------------------------8
#
# Build the list of tasks to be executed in order here.
#
# -------------------------------------+---------------------------------------8


  tasks:

    - name:                            "0.0 Validations - Initialize tier"
      ansible.builtin.set_fact:
        tier:                          fencing

    - name:                            "0.0 Validations - Retrieve the Fencing SPN details"
      ansible.builtin.include_role:
        name:                          roles-misc/0.2-kv-secrets
      tags:
        - kv-secrets

    - name:                            "0.0 Validations - Retrieve the storage account details"
      ansible.builtin.include_role:
        name:                          roles-misc/0.3.sap-installation-media-storage-details
        public:                        true
      tags:
        - kv-sap-installation-media-storage-details

    - name:                            "0.0 Validations - Check required variables are present and not empty"
      ansible.builtin.assert:
        that:
          - item_to_check.parameter is defined                    # Has the variable been defined
          - item_to_check.parameter | type_debug != 'NoneType'    # and given a value
          - item_to_check.parameter | trim | length > 1
        fail_msg:                      item_to_check.error
      loop:
        - { parameter: 'bom_base_name', error: 'Please provide the Bill of materials name in bom_base_name parameter' }
        - { parameter: 'kv_name', error: 'Please provide the workload zone key vault name in kv_name parameter' }
        - { parameter: 'sap_fqdn', error: 'Please provide the SAP fqdn in  in sap_fqdn parameter' }
        - { parameter: 'sap_sid', error: 'Please provide the SAP SID in sap_sid parameter' }
        - { parameter: 'secret_prefix', error: 'Please provide the Key Vault secret prefix in secret_prefix parameter' }
      loop_control:
        loop_var: item_to_check

    - name:                            "0.0 Validations - Check required SCS HA variables are present and not empty"
      ansible.builtin.assert:
        that:
          - item_to_check.parameter is defined                    # Has the variable been defined
          - item_to_check.parameter | type_debug != 'NoneType'    # and given a value
          - item_to_check.parameter | trim | length > 1
        fail_msg:                      item_to_check.error
      loop:
        - { parameter: 'NFS_Provider', error: 'A highly available SCS deployment requires that NFS_Provider provided' }
        - { parameter: 'sap_mnt', error: 'A highly available SCS deployment requires a shared sap_mnt is provided' }
        - { parameter: 'scs_lb_ip', error: 'A highly available SCS deployment requires that scs_lb_ip is provided' }
        - { parameter: 'ecs_lb_ip', error: 'A highly available SCS deployment requires  that ers_lb_ip is provided' }
        - { parameter: 'sap_hana_fencing_spn_client_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_client_pwd', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_subscription_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_tenant_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
      loop_control:
        loop_var: item_to_check
      when:                            scs_high_availability

    - name:                            "0.0 Validations - Check required Database HA variables are present and not empty"
      ansible.builtin.assert:
        that:
          - item_to_check.parameter is defined                    # Has the variable been defined
          - item_to_check.parameter | type_debug != 'NoneType'    # and given a value
          - item_to_check.parameter | trim | length > 1
        fail_msg:                      item_to_check.error
      loop:
        - { parameter: 'db_lb_ip', error: 'A highly available SCS deployment requires that scs_lb_ip is provided' }
        - { parameter: 'sap_hana_fencing_spn_client_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_client_pwd', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_subscription_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
        - { parameter: 'sap_hana_fencing_spn_tenant_id', error: 'A highly available SCS deployment requires that an SPN is defined for the fencing agent' }
      loop_control:
        loop_var: item_to_check
      when:
        - db_high_availability
        - platform == "HANA"

    - name:                            "0.0 Validations - Validate ORACLE parameters"
      ansible.builtin.assert:
        that:
          - item_to_check.parameter is defined                    # Has the variable been defined
          - item_to_check.parameter | type_debug != 'NoneType'    # and given a value
          - item_to_check.parameter | trim | length > 1
        fail_msg:                      item_to_check.error
      loop:
        - { parameter: 'oracle_sbp_patch', error: 'Oracle deployments requires that oracle_sbp_patch is provided' }
      loop_control:
        loop_var: item_to_check
      when:                            platform == "ORACLE"

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                  Validate the server side parameters                       |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- hosts:              "{{ sap_sid|upper }}_DB  :
                       {{ sap_sid|upper }}_SCS :
                       {{ sap_sid|upper }}_ERS :
                       {{ sap_sid|upper }}_PAS :
                       {{ sap_sid|upper }}_ERS :
                       {{ sap_sid|upper }}_APP :
                       {{ sap_sid|upper }}_WEB"

  name:                                "0.0 Validations - Validate SAP-Parameters"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults
  tasks:

    - name:                            "0.0 Validations - Validate SCS and HDB instance numbers"
      ansible.builtin.assert:
        that:
          - "scs_instance_number != hdb_instance_number"
        fail_msg:                      "Please ensure that the scs_instance_number is different from the hdb_instance_number when performing a standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            "0.0 Validations - Validate SCS and HDB SIDs"
      ansible.builtin.assert:
        that:
          - "sap_sid != db_sid"
        fail_msg:                      "Please ensure that the sap_sid is different from the db_sid when performing a standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            Validate SCS and PAS instance numbers
      ansible.builtin.assert:
        that:
          - "scs_instance_number != pas_instance_number"
        fail_msg:                      "Please ensure that the pas_instance_number is different from the scs_instance_number when installing PAS on ASCS"
      when:                            (ansible_play_hosts_all | length) == 2

    - name:                            "0.0 Validations - Validate SCS and PAS instance numbers"
      ansible.builtin.assert:
        that:
          - "scs_instance_number != pas_instance_number"
        fail_msg:                      "Please ensure that the pas_instance_number is different from the scs_instance_number on standalone installation"
      when:                            (ansible_play_hosts_all | length) == 1

    - name:                            "0.0 Validations - Show Mounts"
      ansible.builtin.command:         df -h
      register:                        mounts

    - name:                            "0.0 Validations - Show Mounts"
      ansible.builtin.debug:
        var:                           mounts.stdout_lines

    - name:                            "0.0 Validations - Show Hosts"
      ansible.builtin.command:         cat /etc/hosts
      register:                        hosts

    - name:                            "0.0 Validations - Show Hosts"
      ansible.builtin.debug:
        var:                           hosts.stdout_lines


- hosts:               "{{ sap_sid|upper }}_WEB"

  name:                                "0.0 Validations - Validate SAP-Parameters for Web Dispatchers"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults
  tasks:

    - name:                            "0.0 Validations - VAlidate web_sid presence of Web Dispatchers are deployed"
      ansible.builtin.assert:
        that:
          - web_sid is defined                    # Has the variable been defined
          - web_sid | type_debug != 'NoneType'    # and given a value
          - web_sid | trim | length > 1
        fail_msg:                      "Please specify web_sid if you are deploying web dispatchers"
      when:                            (ansible_play_hosts_all | length) > 0

...
# /*----------------------------------------------------------------------------8
# |                                    END                                      |
# +------------------------------------4--------------------------------------*/
