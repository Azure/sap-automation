---
# /*---------------------------------------------------------------------------8
# |                                                                            |
# |               Task: 1.4       - Package Installation for OS                |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.4 Packages: - Import package list"
  ansible.builtin.include_vars:        os-packages.yaml

# SLES 12 Activate public cloud extension
- name:                                "1.4 Packages - Activate public cloud extension"
  block:
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/12/x86_64
      register:                        cloud_extension
  rescue:
    - name:                            "1.4 Packages - Wait 10 secs before retrying"
      ansible.builtin.wait_for:
        timeout:                       10
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/12/x86_64
      register:                        cloud_extension
  when:
    - ansible_distribution_major_version == "12"
    - tier == 'os'

# SLES 15 Activate public cloud extension
- name:                                "1.4 Packages - Activate public cloud extension"
  block:
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.1/x86_64
      register:                        cloud_extension
  rescue:
    - name:                            "1.4 Packages - Wait 10 secs before retrying"
      ansible.builtin.wait_for:
        timeout:                       10
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.1/x86_64
      register:                        cloud_extension
  when:
    - distribution_full_id == "sles_sap15.1"
    - tier == 'os'

- name:                                "1.4 Packages - Activate public cloud extension"
  block:
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.2/x86_64
      register:                        cloud_extension
  rescue:
    - name:                            "1.4 Packages - Wait 10 secs before retrying"
      ansible.builtin.wait_for:
        timeout:                       10
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.2/x86_64
      register:                        cloud_extension
  when:
    - distribution_full_id == "sles_sap15.2"
    - tier == 'os'

- name:                                "1.4 Packages - Activate public cloud extension"
  block:
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.3/x86_64
      register:                        cloud_extension
  rescue:
    - name:                            "1.4 Packages - Wait 10 secs before retrying"
      ansible.builtin.wait_for:
        timeout:                       10
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.3/x86_64
      register:                        cloud_extension
  when:
    - distribution_full_id == "sles_sap15.3"
    - tier == 'os'

- name:                                "1.4 Packages - Activate public cloud extension"
  block:
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.4/x86_64
      register:                        cloud_extension
  rescue:
    - name:                            "1.4 Packages - Wait 10 secs before retrying"
      ansible.builtin.wait_for:
        timeout:                       10
    - name:                            "1.4 Packages - Activate public cloud extension ({{ ansible_distribution_major_version }})"
      ansible.builtin.command: |
                                       SUSEConnect -p sle-module-public-cloud/15.4/x86_64
      register:                        cloud_extension
  when:
    - distribution_full_id == "sles_sap15.4"
    - tier == 'os'

# covered by python-xml for SLES 15 SP1-3 and python3-xml for SLES 15 SP4 in var/os-packages.yaml
# - name:                                "1.4 Packages: - Update Python: {{ distribution_full_id }}"  # noqa package-latest
#  community.general.zypper:
#    name:                              'python-xml'
#    state:                             latest
#  when:                                distribution_id in ['suse15', 'sles_sap15']

# Analyse the package list for this distribution selecting only those
# packages assigned to the active tier or 'all'.
- name:                                "1.4 Packages: - Determine packages appropriate for tier on: {{ distribution_id }}"
  ansible.builtin.set_fact:
    packages_for_tier:                 "{{ packages[distribution_id] |
                                          selectattr('tier', 'in', ['all', tier]) |
                                          selectattr('node_tier', 'in', ['all', node_tier]) |
                                          list }}"

# Analyse the package list for this distribution selecting only those
# packages assigned to the active tier or 'all'.
- name:                                "1.4 Packages: - Determine packages appropriate for tier on: {{ distribution_full_id }}"
  ansible.builtin.set_fact:
    packages_for_specific_tier:        "{{ packages[distribution_full_id] |
                                          selectattr('tier', 'in', ['all', tier]) |
                                          selectattr('node_tier', 'in', ['all', node_tier]) |
                                          list }}"
    when: packages | selectattr(distribution_full_id, "defined") | list | length > 0

# Print list of matching packages if verbosity it 1 or greater
- name:                                "1.4 Packages: - Show packages"
  ansible.builtin.debug:
    msg:
      - "Packages for {{ distribution_id }} : {{ packages_for_tier }}"
      - "Packages for {{ distribution_full_id }} : {{ packages_for_specific_tier }}"
    verbosity:                         2
  when:                                packages_for_tier is defined


# Extract the list of package names whose state match the specified value and
# pass them as the argument to the name parameter; this is the recommended
# approach as it only calls the underlying distro specific package manager
# once per state value.
# TODO: Do we want to remap 'present' to 'latest' to install latest version
# for packages that may not be up-to-date?
- name:                                "1.4 Packages: - Update OS packages: {{ distro_name }}"
  block:

    - name:                            "1.4 Packages: - Update OS packages: {{ distro_name }}"
      ansible.builtin.package:
        name:                          "{{ packages_for_tier |
                                           selectattr('state', 'equalto', item.state) |
                                           map(attribute='package') |
                                           list }}"
        state:                         "{{ item.state }}"
      register:                        package_result
      loop:
        - { state: 'present' }  # First install required packages
        - { state: 'absent' }   # Then remove packages that we don't want
  rescue:
    - name:                            "1.4 Packages: - Show result from packages module"
      ansible.builtin.debug:
        var:                           package_result
        verbosity:                     2

    - name:                            "1.4 Packages: - Performing rescue action"
      ansible.builtin.pause:
        seconds:                       60

    - name:                           "1.4 Packages: -  Update OS packages: {{ distro_name }} and rescue"
      block:
        - name:                            "1.4 Packages: -  Update OS packages: {{ distro_name }}"
          ansible.builtin.package:
            name:                          "{{ packages_for_tier |
                                              selectattr('state', 'equalto', item.state) |
                                              map(attribute='package') |
                                              list }}"
            state:                         "{{ item.state }}"
          register:                        package_result
          loop:
            - { state: 'present' }  # First install required packages
            - { state: 'absent' }   # Then remove packages that we don't want
      rescue:
        - name:                           "Print stderr before getting error code"
          ansible.builtin.debug:
            msg:                          "debug statement: {{ package_result }}"

        - name:                           "Error handling for 1.4 Packages: -  Update OS packages: {{ distro_name }}"
          ansible.builtin.debug:
            msg:                          "{{ package_result | try_get_error_code_results(task_tag='update_os_packages') }}"

- name:                                "1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
  block:
    - name:                            "1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
      ansible.builtin.package:
        name:                          "{{ packages_for_specific_tier |
                                           selectattr('state', 'equalto', item.state) |
                                           map(attribute='package') |
                                           list }}"
        state:                         "{{ item.state }}"
      register:                        package_result
      loop:
        - { state: 'present' }  # First install required packages
        - { state: 'absent' }   # Then remove packages that we don't want

  rescue:
    - name:                            "1.4 Packages: - Print return value"
      ansible.builtin.debug:
        var:                           package_result

    - name:                            "1.4 Packages: - Performing rescue action"
      ansible.builtin.pause:
        seconds:                       60

    - name:                              "1.4 Packages: - Update OS packages: {{ distribution_full_id }} and rescue"
      block:
        - name:                            "1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
          ansible.builtin.package:
            name:                          "{{ packages_for_specific_tier |
                                              selectattr('state', 'equalto', item.state) |
                                              map(attribute='package') |
                                              list }}"
            state:                         "{{ item.state }}"
          register:                         package_result
          loop:
            - { state: 'present' }  # First install required packages
            - { state: 'absent' }   # Then remove packages that we don't want
      rescue:
        - name:                         "Print stderr before getting error code"
          ansible.builtin.debug:
            msg:                        "debug statement: {{ package_result }}"

        - name:                         "Error handling for 1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
          ansible.builtin.fail:
            msg:                        "{{ package_result | try_get_error_code_results(task_tag='update_os_packages') }}"


- name:                                "1.4 Packages: - Update OS packages: {{ distro_name }} {{ node_tier }}"
  block:

    - name:                            "1.4 Packages: - Update OS packages: {{ distro_name }} {{ node_tier }}"
      ansible.builtin.package:
        name:                          "{{ packages_for_tier |
                                           selectattr('state', 'equalto', item.state) |
                                           map(attribute='package') |
                                           list }}"
        state:                         "{{ item.state }}"
      register:                        package_result
      loop:
        - { state: 'present' }  # First install required packages
        - { state: 'absent' }   # Then remove packages that we don't want
  rescue:
    - name:                            "1.4 Packages: - Show result from packages module"
      ansible.builtin.debug:
        var:                           package_result
        verbosity:                     2

    - name:                            "1.4 Packages: - Performing rescue action"
      ansible.builtin.pause:
        seconds:                       60

    - name:                              "1.4 Packages: -  Update OS packages: {{ distro_name }} and rescue"
      block:
        - name:                            "1.4 Packages: -  Update OS packages: {{ distro_name }}"
          ansible.builtin.package:
            name:                          "{{ packages_for_tier |
                                              selectattr('state', 'equalto', item.state) |
                                              map(attribute='package') |
                                              list }}"
            state:                         "{{ item.state }}"
          register:                        package_result
          loop:
            - { state: 'present' }  # First install required packages
            - { state: 'absent' }   # Then remove packages that we don't want
      rescue:
        - name:                         "Print stderr before getting error code"
          ansible.builtin.debug:
            msg:                        "debug statement: {{ package_result }}"

        - name:                         "Error handling for 1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
          ansible.builtin.fail:
            msg:                        "{{ package_result | try_get_error_code_results(task_tag='update_os_packages') }}"


- name:                                "1.4 Packages: - Update OS packages: {{ distribution_full_id }} {{ node_tier }}"
  block:
    - name:                            "1.4 Packages: - Update OS packages: {{ distribution_full_id }} {{ node_tier }}"
      ansible.builtin.package:
        name:                          "{{ packages_for_specific_tier |
                                           selectattr('state', 'equalto', item.state) |
                                           map(attribute='package') | selectattr('node_tier', 'defined') | selectattr('node_tier', 'equalto', node_tier) |
                                           list }}"
        state:                         "{{ item.state }}"
      register:                        package_result
      loop:
        - { state: 'present' }  # First install required packages
        - { state: 'absent' }   # Then remove packages that we don't want

  rescue:
    - name:                            "1.4 Packages: - Print return value"
      ansible.builtin.debug:
        var:                           package_result

    - name:                            "1.4 Packages: - Performing rescue action"
      ansible.builtin.pause:
        seconds:                       60

    - name:                              "1.4 Packages: - Update OS packages: {{ distribution_full_id }} and rescue"
      block:
        - name:                            "1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
          ansible.builtin.package:
            name:                          "{{ packages_for_specific_tier |
                                              selectattr('state', 'equalto', item.state) |
                                              map(attribute='package') | selectattr('node_tier', 'defined') | selectattr('node_tier', 'equalto', node_tier) |
                                              list }}"
            state:                         "{{ item.state }}"
          loop:
            - { state: 'present' }  # First install required packages
            - { state: 'absent' }   # Then remove packages that we don't want
      rescue:
        - name:                         "Print stderr before getting error code"
          ansible.builtin.debug:
            msg:                        "debug statement: {{ package_result }}"

        - name:                         "Error handling for 1.4 Packages: - Update OS packages: {{ distribution_full_id }}"
          ansible.builtin.fail:
            msg:                        "{{ package_result | try_get_error_code_results(task_tag='update_os_packages') }}"


- name:                                "1.4 Packages: - Upgrade all: {{ distribution_full_id }}"  # noqa package-latest
  community.general.zypper:
    name:                              '*'
    state:                             latest
  when:
    - ansible_os_family | upper == 'SUSE'
    - upgrade_packages is defined
    - upgrade_packages
    - tier == 'os'

- name:                                "1.4 Packages: - Upgrade all: {{ distribution_full_id }}"  # noqa package-latest
  become:                              true
  ansible.builtin.yum:
    name:                              '*'
    state:                             latest
    exclude:                           kernel*
    skip_broken:                       true
  when:
    - ansible_os_family | upper in ['REDHAT', 'ORACLELINUX8']
    - upgrade_packages is defined
    - upgrade_packages
    - tier == 'os'

# /*----------------------------------------------------------------------------8
# |                                    END                                      |
# +------------------------------------4---------------------------------------*/
