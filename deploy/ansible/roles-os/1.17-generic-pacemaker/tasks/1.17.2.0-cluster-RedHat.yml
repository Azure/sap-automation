# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

---


# @TODO Subscribe to subscriptions/repos if required
# This code assumes the deployment is using RHEL SAP image

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | RHEL Clustering                                                            |
# | ref: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/high-availability-guide-rhel-pacemaker
# |                                                                            |
# |RHEL 8.4: resource-agents-4.1.1-90.13                                       |
# |RHEL 8.6: resource-agents-4.9.0-16.9                                        |
# |RHEL 8.8 and newer: resource-agents-4.9.0-40.1                              |
# |RHEL 9.0 and newer: resource-agents-cloud-4.10.0-34.2                       |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.17 Generic Pacemaker - Check if we are on RHEL 9 or newer"
  ansible.builtin.set_fact:
    is_rhel_9_or_newer:                "{{ ansible_distribution_major_version | int >= 9 }}"

- name:                                "1.17 Generic Pacemaker - Check if we are on RHEL 8.4 or newer"
  ansible.builtin.set_fact:
    is_rhel_84_or_newer:               "{{ ansible_distribution_version is version('8.4', '>=') }}"

- name:                                "1.17 Generic Pacemaker - Ensure HA Cluster password is set to something secure"
  ansible.builtin.user:
    name:                              hacluster
    password:                          "{{ password_ha_db_cluster | password_hash('sha512', 65534 | random(seed=None) | string) }}"

- name:                                "1.17 Generic Pacemaker - Ensure the firewall service is configured to allow High Availability traffic"
  ansible.posix.firewalld:
    service:                           high-availability
    state:                             enabled
    permanent:                         true

# Basic Pacemaker cluster configuration:
# https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/high-availability-guide-rhel-pacemaker
- name:                                "1.17 Generic Pacemaker - Create the cluster on the primary node: {{ primary_instance_name }}"
  when:                                ansible_hostname == primary_instance_name
  block:
    - name:                            "1.17 Generic Pacemaker - Cluster initialization for RHEL 7.x"
      when:                            ansible_distribution_major_version == "7"
      block:
        - name:                        "1.17 Generic Pacemaker - Ensure the cluster can authenticate nodes as hacluster"
          ansible.builtin.command:     "pcs cluster auth {{ primary_instance_name }} {{ secondary_instance_name }} -u hacluster -p {{ password_ha_db_cluster }}"

        # Ref https://docs.microsoft.com/en-us/azure/virtual-machines/maintenance-and-updates#maintenance-that-doesnt-require-a-reboot
        - name:                        "1.17 Generic Pacemaker - Ensure the cluster is created with a token large enough to allow memory preserving maintenance"
          when:                        node_tier in ['hana', 'db2']
          ansible.builtin.command:     "pcs cluster setup --name {{ db_sid | upper }}_cluster {{ primary_instance_name }} {{ secondary_instance_name }} --token {{ cluster_totem.token }}"

        - name:                        "1.17 Generic Pacemaker - Ensure the cluster is created with a token large enough to allow memory preserving maintenance"
          when:                        node_tier == 'scs'
          ansible.builtin.command:     "pcs cluster setup --name {{ sap_sid | upper }}_cluster {{ primary_instance_name }} {{ secondary_instance_name }} --token {{ cluster_totem.token }}"

    - name:                            "1.17 Generic Pacemaker - Cluster initialization for RHEL 8.x and 9.x"
      when:                            ansible_distribution_major_version in ["8", "9"]
      block:
        - name:                        "1.17 Generic Pacemaker - Ensure the cluster can authenticate nodes as hacluster"
          ansible.builtin.command:     "pcs host auth {{ primary_instance_name }} {{ secondary_instance_name }} -u hacluster -p {{ password_ha_db_cluster }}"

        - name:                        "1.17 Generic Pacemaker - Ensure the cluster is created with a token large enough to allow memory preserving maintenance"
          when:                        node_tier in ['hana', 'db2']
          ansible.builtin.command:     "pcs cluster setup {{ db_sid | upper }}_cluster {{ primary_instance_name }} {{ secondary_instance_name }} totem token={{ cluster_totem.token }}"

        - name:                        "1.17 Generic Pacemaker - Ensure the cluster is created with a token large enough to allow memory preserving maintenance"
          when:                        node_tier == 'scs'
          ansible.builtin.command:     "pcs cluster setup {{ sap_sid | upper }}_cluster {{ primary_instance_name }} {{ secondary_instance_name }} totem token={{ cluster_totem.token }}"

    - name:                            "1.17 Generic Pacemaker - Ensure the cluster is starting on all nodes"
      ansible.builtin.command:         pcs cluster start --all
      changed_when:                    false

    - name:                            "1.17 Generic Pacemaker - Enable cluster to auto-start after reboot"
      ansible.builtin.command:         pcs cluster enable --all
      changed_when:                    false

    - name:                            "1.17 Generic Pacemaker - Allow Concurrent Fencing"
      ansible.builtin.command:         pcs property set concurrent-fencing=true
      changed_when:                    false

    - name:                            "1.17 Generic Pacemaker - Wait until cluster has stabilized"
      when:                            ansible_distribution_major_version == "7"
      ansible.builtin.shell:           set -o pipefail && pcs status | grep '^Online:'
      register:                        cluster_stable_check
      retries:                         12
      delay:                           10
      until:                           "(primary_instance_name + ' ' + secondary_instance_name) in cluster_stable_check.stdout or (secondary_instance_name + ' ' + primary_instance_name) in cluster_stable_check.stdout"

    # switch to using pcs status xml for RHEL 8.x and 9.x
    - name:                            "1.17 Generic Pacemaker - Wait until cluster has stabilized"
      when:                            ansible_distribution_major_version in ["8", "9"]
      ansible.builtin.shell:           set -o pipefail && pcs status xml
      register:                        cluster_status_xml
      retries:                         12
      delay:                           10
      until: >-
                                       cluster_status_xml.rc == 0 and
                                       (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"') | length) >= 2 and
                                       primary_instance_name in (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"')) and
                                       secondary_instance_name in (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"'))
      changed_when:                    false


    - name:                            "1.17 Generic Pacemaker - Ensure the expected quorum votes is set for the cluster"
      ansible.builtin.command:         pcs quorum expected-votes "{{ cluster_quorum.expected_votes }}"
      register:                        quorum
      changed_when:                    quorum.rc == 0


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | SBD - BEGIN                                                                |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.17 Generic Pacemaker - Configure the cluster SBD STONITH device on the primary node"
  when:
                                       - cluster_stonith_type in ['ASD', 'ISCSI']
                                       - os_version_supported_for_sbd | bool
                                       - inventory_hostname == primary_instance_name
  block:
    - name:                            "1.17 Generic Pacemaker - Format SBD device list for pcs commands"
      ansible.builtin.set_fact:
        sbd_device_comma_separated:    "{{ sbd_device | replace(';', ',') }}"

    - name:                            "1.17 Generic Pacemaker - Set stonith-timeout property"
      ansible.builtin.command:
        cmd:                           "pcs property set stonith-timeout=144"
      register:                        pcs_stonith_timeout_result
      changed_when:                    pcs_stonith_timeout_result.rc == 0

    - name:                            "1.17 Generic Pacemaker - Enable stonith"
      ansible.builtin.command:
        cmd:                           "pcs property set stonith-enabled=true"
      register:                        pcs_stonith_enabled_result
      changed_when:                    pcs_stonith_enabled_result.rc == 0

    - name:                            "1.17 Generic Pacemaker - Create SBD stonith device"
      ansible.builtin.command:
        cmd:                           "pcs stonith create sbd fence_sbd devices={{ sbd_device_comma_separated }} op monitor interval=600 timeout=15"
      register:                        pcs_create_sbd_result
      changed_when:                    pcs_create_sbd_result.rc == 0
      failed_when:
                                       - pcs_create_sbd_result.rc != 0
                                       - "'already exists' not in pcs_create_sbd_result.stderr"

    - name:                            "1.17 Generic Pacemaker - Stop Cluster on all nodes"
      when:                            pcs_create_sbd_result.rc == 0
      ansible.builtin.command:
        cmd:                           "pcs cluster stop --all"
      register:                        pcs_cluster_stop_result
      changed_when:                    pcs_cluster_stop_result.rc == 0
      failed_when:                     pcs_cluster_stop_result.rc != 0

    - name:                            "1.17 Generic Pacemaker - Start Cluster on all nodes"
      when:                            pcs_cluster_stop_result.rc == 0
      ansible.builtin.command:
        cmd:                           "pcs cluster start --all --request-timeout 140"
      register:                        pcs_cluster_start_result
      changed_when:                    pcs_cluster_start_result.rc == 0
      failed_when:                     pcs_cluster_start_result.rc != 0

    # switch to using pcs status xml for RHEL 8.x and 9.x
    - name:                            "1.17 Generic Pacemaker - Wait until cluster has stabilized [SBD]"
      when:
                                       - ansible_distribution_major_version in ["8", "9"]
                                       - pcs_create_sbd_result.rc == 0
      ansible.builtin.shell:           set -o pipefail && pcs status xml
      register:                        cluster_status_xml
      retries:                         12
      delay:                           10
      until: >-
                                       cluster_status_xml.rc == 0 and
                                       (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"') | length) >= 2 and
                                       primary_instance_name in (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"')) and
                                       secondary_instance_name in (cluster_status_xml.stdout | regex_findall('<node [^>]*name="([^"]*)"[^>]*online="true"'))
      changed_when:                    false

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | SBD - END                                                                  |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Fencing - BEGIN                                                            |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.17 Generic Pacemaker - Configure the cluster STONITH device on the primary node"
  when:
                                       - scs_cluster_type    == "AFA" or database_cluster_type == "AFA"       # scs_high_availability = true is already assumed
                                       - inventory_hostname  == primary_instance_name
  block:
    - name:                            "1.17 Generic Pacemaker - Check if the pacemaker package version is greater than pacemaker-2.0.4"
      when:                            ansible_distribution_major_version in ["8", "9"]
      ansible.builtin.set_fact:
        is_pcmk_ver_gt_204:            "{{ ansible_facts.packages['pacemaker'][0].version is version('2.0.4', '>') | default(false) }}"

    - name:                            "1.17 Generic Pacemaker - Ensure STONITH timeout is raised"
      ansible.builtin.command:         pcs property set stonith-timeout=900

    - name:                            "1.17 Generic Pacemaker - Ensure the STONTIH device is configured (SPN)"
      when:
        - ansible_distribution_major_version == "7"
        - not use_msi_for_clusters
      ansible.builtin.command: >
                                       pcs stonith create rsc_st_azure fence_azure_arm
                                         login="{{ fencing_spn_client_id }}"
                                         passwd="{{ fencing_spn_client_pwd }}"
                                         resourceGroup="{{ resource_group_name }}"
                                         tenantId="{{ fencing_spn_tenant_id }}"
                                         subscriptionId="{{ fencing_spn_subscription_id }}"
                                         power_timeout=240
                                         pcmk_reboot_timeout=900
                                         pcmk_monitor_timeout=120
                                         pcmk_monitor_retries=4
                                         pcmk_action_limit=3
                                         pcmk_delay_max=15
                                         pcmk_host_map="{{ primary_instance_name }}:{{ hostvars[primary_instance_name]['primary_vm_name'] }};{{ secondary_instance_name }}:{{ hostvars[secondary_instance_name]['secondary_vm_name'] }}"

    - name:                            "1.17 Generic Pacemaker - Ensure the STONTIH device is configured (MSI)"
      when:
        - ansible_distribution_major_version == "7"
        - use_msi_for_clusters
      ansible.builtin.command: >
                                       pcs stonith create rsc_st_azure fence_azure_arm
                                         msi=true
                                         passwd="{{ fencing_spn_client_pwd }}"
                                         resourceGroup="{{ resource_group_name }}"
                                         subscriptionId="{{ fencing_spn_subscription_id }}"
                                         power_timeout=240
                                         pcmk_reboot_timeout=900
                                         pcmk_monitor_timeout=120
                                         pcmk_monitor_retries=4
                                         pcmk_action_limit=3
                                         pcmk_delay_max=15
                                         pcmk_host_map="{{ primary_instance_name }}:{{ hostvars[primary_instance_name]['primary_vm_name'] }};{{ secondary_instance_name }}:{{ hostvars[secondary_instance_name]['secondary_vm_name'] }}"

    - name:                            "1.17 Generic Pacemaker - Ensure the STONTIH device is configured (SPN)"
      when:
        - ansible_distribution_major_version in ["8", "9"]
        - not use_msi_for_clusters
      ansible.builtin.shell: >
                                       pcs stonith create rsc_st_azure fence_azure_arm \
                                         username="{{ fencing_spn_client_id }}" \
                                         password="{{ fencing_spn_client_pwd }}" \
                                         resourceGroup="{{ resource_group_name }}" \
                                         tenantId="{{ fencing_spn_tenant_id }}" \
                                         subscriptionId="{{ fencing_spn_subscription_id }}" \
                                         power_timeout=240 \
                                         pcmk_reboot_timeout=900 \
                                         pcmk_monitor_timeout=120 \
                                         pcmk_monitor_retries=4 \
                                         pcmk_action_limit=3 \
                                         pcmk_host_map="{{ primary_instance_name }}:{{ hostvars[primary_instance_name]['primary_vm_name'] }};{{ secondary_instance_name }}:{{ hostvars[secondary_instance_name]['secondary_vm_name'] }}" \
                                         {%if not is_pcmk_ver_gt_204%}"pcmk_delay_max=15"{%endif%}

    - name:                            "1.17 Generic Pacemaker - Ensure the STONTIH device is configured (MSI)"
      when:
        - ansible_distribution_major_version in ["8", "9"]
        - use_msi_for_clusters
      ansible.builtin.shell: >
                                       pcs stonith create rsc_st_azure fence_azure_arm \
                                         msi=true \
                                         resourceGroup="{{ resource_group_name }}" \
                                         subscriptionId="{{ fencing_spn_subscription_id }}" \
                                         power_timeout=240 \
                                         pcmk_reboot_timeout=900 \
                                         pcmk_monitor_timeout=120 \
                                         pcmk_monitor_retries=4 \
                                         pcmk_action_limit=3 \
                                         pcmk_host_map="{{ primary_instance_name }}:{{ hostvars[primary_instance_name]['primary_vm_name'] }};{{ secondary_instance_name }}:{{ hostvars[secondary_instance_name]['secondary_vm_name'] }}" \
                                         {%if not is_pcmk_ver_gt_204%}"pcmk_delay_max=15"{%endif%}

    # The property priority-fencing-delay is applicable for pacemaker-2.0.4-6.el8 version or higher.
    # If you're setting up priority-fencing-delay on an existing cluster, make sure to unset the
    # pcmk_delay_max option in the fencing device.
    # @TODO: Add ansible code to create the stonith resource without the pcmk_delay_max option.
    - name:                            "1.17 Generic Pacemaker - set priority-fencing-delay"
      when:
        - ansible_distribution_major_version in ["8", "9"]
        - is_pcmk_ver_gt_204
      ansible.builtin.command:         pcs property set priority-fencing-delay=15

    - name:                            "1.17 Generic Pacemaker - Update Monitor interval"
      ansible.builtin.command:         pcs resource update rsc_st_azure op monitor interval=3600

    - name:                            "1.17 Generic Pacemaker - Ensure the STONITH action is set to reboot"
      ansible.builtin.command:         pcs property set stonith-action=reboot

    - name:                            "1.17 Generic Pacemaker - Ensure the STONITH device is enabled"
      ansible.builtin.command:         pcs property set stonith-enabled=true

    - name:                            "1.17 Generic Pacemaker - Clear any errors during enablement of STONITH device"
      ansible.builtin.command:         pcs resource cleanup

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Fencing - END                                                              |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | kdump stonith - BEGIN                                                      |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.17 Generic Pacemaker - Install fence-agents-kdump package"
  when:
                                       - kdump_enabled | default("disabled") == "enabled"
  ansible.builtin.dnf:
    name:                              fence-agents-kdump
    state:                             present
  register:                            fence_agents_kdump_package
  changed_when:                        fence_agents_kdump_package.changed

- name:                                "1.17 Generic Pacemaker - configure the special fencing device fence_kdump"
  when:
                                       - inventory_hostname == primary_instance_name
                                       - kdump_enabled | default("disabled") == "enabled"
  block:

    # we can assume that the stonith:fence_azure_rm is already configured
    # if we need to check we can use either pcs stonith show or pcs stonith status
    # create fence_kdump fencing device in the cluster
    - name:                            "1.17 Generic Pacemaker - Create a fence_kdump fencing device in the cluster"
      ansible.builtin.command: >
                                       pcs stonith create rsc_st_kdump fence_kdump
                                       pcmk_reboot_action="off"
                                       pcmk_host_list="{{ primary_instance_name }} {{ secondary_instance_name }}"
                                       timeout=30

    - name:                            "1.17 Generic Pacemaker - Update Monitor interval"
      ansible.builtin.command:         pcs resource update rsc_st_kdump op monitor interval=3600

    # for each node in the play, set the fence_kdump fencing device as the first fencing device to be used
    - name:                            "1.17 Generic Pacemaker - Set the fence_kdump fencing device as the first for {{ primary_instance_name }}"
      ansible.builtin.command:         pcs stonith level add 1 {{ primary_instance_name }} rsc_st_kdump

    - name:                            "1.17 Generic Pacemaker - Set the fence_kdump fencing device as the first for {{ secondary_instance_name }}"
      ansible.builtin.command:         pcs stonith level add 1 {{ secondary_instance_name }} rsc_st_kdump

    - name:                            "1.17 Generic Pacemaker - Set the fence_azure_rm fencing device as the second for {{ primary_instance_name }}"
      ansible.builtin.command:         pcs stonith level add 2 {{ primary_instance_name }} rsc_st_azure

    - name:                            "1.17 Generic Pacemaker - Set the fence_azure_arm fencing device as the second for {{ secondary_instance_name }}"
      ansible.builtin.command:         pcs stonith level add 2 {{ secondary_instance_name }} rsc_st_azure

- name:                                "1.17 Generic Pacemaker - Ensure that the kdump service is enabled"
  when:
                                       - kdump_enabled | default("disabled") == "enabled"
  block:
    # Perform the fence_kdump_nodes configuration in /etc/kdump.conf
    - name:                            "1.17 Generic Pacemaker - Perform the fence_kdump_nodes configuration in /etc/kdump.conf"
      when:
                                       - kdump_enabled | default("disabled") == "enabled"
                                       - inventory_hostname == primary_instance_name
      ansible.builtin.replace:
        path:                          /etc/kdump.conf
        regexp:                        '^#fence_kdump_nodes(.*)$'
        replace:                       "fence_kdump_nodes {{ secondary_instance_name }}"
        backup:                        true
      register:                        kdump_conf_file
      failed_when:                     kdump_conf_file.rc != 0

    # Perform the fence_kdump_nodes configuration in /etc/kdump.conf
    - name:                            "1.17 Generic Pacemaker - Perform the fence_kdump_nodes configuration in /etc/kdump.conf"
      when:
                                       - kdump_enabled | default("disabled") == "enabled"
                                       - inventory_hostname == secondary_instance_name
      ansible.builtin.replace:
        path:                          /etc/kdump.conf
        regexp:                        '^#fence_kdump_nodes(.*)$'
        replace:                       "fence_kdump_nodes {{ primary_instance_name }}"
        backup:                        true
      register:                        kdump_conf_file
      failed_when:                     kdump_conf_file.rc != 0

    # set the kdump path to /usr/crash in /etc/kdump.conf
    - name:                            "1.17 Generic Pacemaker - Set the kdump path to /usr/crash in /etc/kdump.conf"
      when:
                                       - kdump_enabled | default("disabled") == "enabled"
      ansible.builtin.replace:
        path:                          /etc/kdump.conf
        regexp:                        '^path(.*)$'
        replace:                       "path /usr/crash"
        backup:                        true
      register:                        kdump_conf_file_path
      failed_when:                     kdump_conf_file_path.rc != 0

    # restart kdump service as we made changes to the configuration
    - name:                            "1.17 Generic Pacemaker - Restart kdump service"
      ansible.builtin.service:
        name:                          kdump
        state:                         restarted

    # Ensure that the initramfs image file contains the fence_kdump and hosts files
    - name:                            "1.17 Generic Pacemaker - Check that the initramfs image file contains the fence_kdump and hosts files"
      ansible.builtin.shell:           set -o pipefail && lsinitrd /boot/initramfs-$(uname -r)kdump.img | egrep "fence|hosts"
      register:                        initramfs_image_file
      changed_when:                    false
      failed_when:                     false

    # Ensure that the initramfs image file contains the fence_kdump and hosts files
    - name:                            "1.17 Generic Pacemaker - Check that the initramfs image file contains the fence_kdump and hosts files"
      ansible.builtin.shell:           set -o pipefail && lsinitrd /boot/initramfs-$(uname -r)kdump.img | egrep "fence|hosts"
      register:                        initramfs_image_check
      changed_when:                    false
      failed_when:                     initramfs_image_check.rc != 0

    # print debug on the validation of initramfs
    - name:                            "1.17 Generic Pacemaker - debug initramfs output"
      when:                            initramfs_image_check.rc == 0
      ansible.builtin.debug:
        msg:                           "initramfs check: {{ initramfs_image_check.stdout }}"
# /*---------------------------------------------------------------------------8
# |                                                                            |
# | kdump stonith - END                                                        |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Azure scheduled events - BEGIN                                             |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                "1.17 Generic Pacemaker - check if the OS version is RHEL 8.4 or newer"
  ansible.builtin.set_fact:
    is_rhel_84_or_newer:               "{{ ansible_distribution_version is version('8.4', '>=') }}"
  when:                                ansible_distribution_major_version in ["8", "9"]

- name:                                "1.17 Generic Pacemaker - Ensure Azure scheduled events is configured"
  when:
                                       - cluster_use_scheduled_events_agent
                                       - inventory_hostname == primary_instance_name
                                       - is_rhel_84_or_newer
  block:
    # After configuring the Pacemaker resources for azure-events agent,
    # when you place the cluster in or out of maintenance mode, you may get warning messages like:
    #   WARNING: cib-bootstrap-options: unknown attribute 'hostName_ hostname'
    #   WARNING: cib-bootstrap-options: unknown attribute 'azure-events_globalPullState'
    #   WARNING: cib-bootstrap-options: unknown attribute 'hostName_ hostname'
    # These warning messages can be ignored.
    - name:                            "1.17 Generic Pacemaker - Ensure maintenance mode is set"
      ansible.builtin.command:         pcs property set maintenance-mode=true

    - name:                            "1.17 Generic Pacemaker - Set the node-health-strategy"
      ansible.builtin.command:         pcs property set node-health-strategy=custom

    - name:                            "1.17 Generic Pacemaker - Set the cluster health-node-strategy constraint"
      ansible.builtin.command:         pcs constraint location 'regexp%!health-.*' rule score-attribute='#health-azure' defined '#uname'

    - name:                            "1.17 Generic Pacemaker - Set the initial value of the cluster attributes"
      ansible.builtin.shell:
        cmd:                           crm_attribute --node {{ item }} --name '#health-azure' --update 0
      loop:
                                       - "{{ primary_instance_name }}"
                                       - "{{ secondary_instance_name }}"

    - name:                            "1.17 Generic Pacemaker - Configure the resources in Pacemaker"
      ansible.builtin.command:         pcs resource create health-azure-events ocf:heartbeat:azure-events-az op monitor interval=10s timeout=240s op start timeout=10s start-delay=90s

    - name:                            "1.17 Generic Pacemaker - Ensure clone resource azure-events is configured"
      ansible.builtin.command:         pcs resource clone health-azure-events allow-unhealthy-nodes=true failure-timeout=120s

    - name:                            "1.17 Generic Pacemaker - Ensure maintenance mode is disabled"
      ansible.builtin.command:         pcs property set maintenance-mode=false

    - name:                            "1.17 Generic Pacemaker - Clear any errors during enablement of the Azure scheduled events"
      ansible.builtin.command:         pcs resource cleanup

    - name:                            "1.17 Generic Pacemaker - Ensure the Azure scheduled events resource is started"
      ansible.builtin.shell: |
                                       set -o pipefail
                                       pcs status --full | grep health-azure-events | grep Started | wc -l
      register:                        azure_scheduled_events_status
      retries:                         12
      delay:                           10
      until:                           azure_scheduled_events_status.stdout | int == ansible_play_hosts_all | length
      when:                            inventory_hostname == primary_instance_name
      failed_when:                     false

    - name:                            "1.17 Generic Pacemaker - display output of Azure scheduled events"
      when:                            inventory_hostname == primary_instance_name
      ansible.builtin.debug:
        msg:
          - "output lines:             {{ azure_scheduled_events_status.stdout_lines }}"
          - "output:                   {{ azure_scheduled_events_status.stdout | int }}"
          - "output_truthiness:        {{ azure_scheduled_events_status.stdout | int == ansible_play_hosts_all | length }}"
        verbosity:                     2

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Azure scheduled events - END                                               |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
# End of Generic Pacemaker setup
