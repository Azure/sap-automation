# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |      Set Runtime Paramters - e.g Sub ID , Resource group name              |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# ----------------------------------------
# BEGIN
# ----------------------------------------

- name:                                           "1.17 Generic Pacemaker - Cluster Type: SBD - parameters to be used..."
  ansible.builtin.debug:
    msg:                                          # Best method for formatting output with Azure Devops Logs
                                                  - "scs_cluster_type:                {{ scs_cluster_type }}"
                                                  - "database_cluster_type:           {{ database_cluster_type }}"

- name:                                           "1.17 Generic Pacemaker - Retrieve Subscription ID and Resource Group Name"
  ansible.builtin.uri:
    url:                                          http://169.254.169.254/metadata/instance?api-version=2021-02-01
    use_proxy:                                    false
    headers:
      Metadata:                                   true
  register:                                       azure_metadata

- name:                                           "1.17 Generic Pacemaker - Show IMDS results"
  ansible.builtin.debug:
    var:                                          azure_metadata.json
    verbosity:                                    2


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Fencing Specific                                                           |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
- name:                                           "1.17 Generic Pacemaker - Cluster Type: Fencing"
  when:
                                                  - (database_cluster_type == "AFA") or
                                                    (scs_cluster_type      == "AFA")        # scs_high_availability = true is already assumed
  block:
    - name:                                       "1.17 Generic Pacemaker - Cluster Type: Fencing specific..."
      ansible.builtin.debug:
        msg:                                      # Best method for formatting output with Azure Devops Logs
                                                  - "Cluster Type: Fencing specific..."

    # - name:                                       "Cluster Type: Fencing - parameters to be used..."
    #   ansible.builtin.debug:
    #     msg:                                      # Best method for formatting output with Azure Devops Logs
    #                                               - "scs_cluster_type      :          {{ scs_cluster_type }}"
    #                                               - "database_cluster_type :          {{ database_cluster_type }}"
    #     verbosity:                                2

    - name:                                       "1.17 Generic Pacemaker - Extract details"
      ansible.builtin.set_fact:
        fencing_spn_subscription_id:              "{{ azure_metadata.json.compute.subscriptionId }}"
        resource_group_name:                      "{{ azure_metadata.json.compute.resourceGroupName }}"


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Fencing Specific - END                                                     |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | SBD/ISCSI Specific                                                         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
- name:                                           "1.17 Generic Pacemaker - Cluster Type: SBD"
  when:
                                                  - (database_cluster_type == "ASD")   or
                                                    (scs_cluster_type      == "ASD")
  block:
    - name:                                       "1.17 Generic Pacemaker - Cluster Type: SBD specific..."
      ansible.builtin.debug:
        msg:                                      # Best method for formatting output with Azure Devops Logs
                                                  - "Cluster Type: SBD specific..."

    # - name:                                       "Cluster Type: SBD - parameters to be used..."
    #   ansible.builtin.debug:
    #     msg:                                      # Best method for formatting output with Azure Devops Logs
    #                                               - "scs_cluster_type:                {{ scs_cluster_type }}"
    #                                               - "database_cluster_type:           {{ database_cluster_type }}"
    #     verbosity:                                2


- name:                                           "1.17 Generic Pacemaker - Cluster Type: ISCSI"
  when:
                                                  - (database_cluster_type == "ISCSI") or
                                                    (scs_cluster_type      == "ISCSI")
  # scs_high_availability = true is already assumed
  block:
    - name:                                       "1.17 Generic Pacemaker - Cluster Type: ISCI specific..."
      ansible.builtin.debug:
        msg:                                      # Best method for formatting output with Azure Devops Logs
                                                  - "Cluster Type: ISCI specific..."

    # - name:                                       "Cluster Type: SBD - parameters to be used..."
    #   ansible.builtin.debug:
    #     msg:                                      # Best method for formatting output with Azure Devops Logs
    #                                               - "scs_cluster_type:                {{ scs_cluster_type }}"
    #                                               - "database_cluster_type:           {{ database_cluster_type }}"
    #     verbosity:                                2

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | SBD/ISCSI Specific - END                                                   |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


- name:                                           "1.17 Generic Pacemaker - Extract primary IP details for each VM"
  ansible.builtin.set_fact:
    primary_ip:                                   "{{ azure_metadata.json.network.interface[0].ipv4.ipAddress[0].privateIpAddress }}"
    subnet_prefix:                                "{{ azure_metadata.json.network.interface[0].ipv4.subnet[0].prefix }}"

- name:                                           "1.17 Generic Pacemaker - Extract primary VM Name"
  when:                                           ansible_hostname == primary_instance_name
  ansible.builtin.set_fact:
    primary_vm_name:                              "{{ azure_metadata.json.compute.name }}"

- name:                                           "1.17 Generic Pacemaker - Extract secondary VM Name"
  when:                                           ansible_hostname == secondary_instance_name
  ansible.builtin.set_fact:
    secondary_vm_name:                            "{{ azure_metadata.json.compute.name }}"

- name:                                           "1.17 Generic Pacemaker - Wait for primary_ip check on first node to finish"
  when:                                           ansible_hostname == secondary_instance_name
  ansible.builtin.set_fact:
    is_primIP_defined_on_primaryNode:             "{{ hostvars[primary_instance_name].primary_ip is defined }}"
  retries:                                        5
  delay:                                          60
  until:                                          is_primIP_defined_on_primaryNode

- name:                                           "1.17 Generic Pacemaker - Wait for primary_ip check on second node to finish"
  when:                                           ansible_hostname == primary_instance_name
  ansible.builtin.set_fact:
    is_primIP_defined_on_secondaryNode:           "{{ hostvars[secondary_instance_name].primary_ip is defined }}"
  retries:                                        5
  delay:                                          60
  until:                                          is_primIP_defined_on_secondaryNode

- name:                                           "1.17 Generic Pacemaker - Extract NIC IPs"
  ansible.builtin.set_fact:
    primary_instance_ip:                          "{{ hostvars[primary_instance_name]['primary_ip'] | string }}"
    secondary_instance_ip:                        "{{ hostvars[secondary_instance_name]['primary_ip'] | string }}"

- name:                                           "1.17 Generic Pacemaker - Show Details"
  ansible.builtin.debug:
    msg:
                                                  - "FENCING :"
                                                  - "   SUBSCRIPTION       : {% if fencing_spn_subscription_id is defined %}{{ fencing_spn_subscription_id }}{% else %}NOT DEFINED{% endif %}"
                                                  - "   RESOURCE GROUP     : {% if resource_group_name is defined %}{{ resource_group_name }}{% else %}NOT DEFINED{% endif %}"
                                                  - "   SUBNET PREFIX      : {{ subnet_prefix }}"
    verbosity:                         2


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Configure SSH Keys for inter-node communication as root for SUSE           |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
- name:                                           "1.17 Generic Pacemaker - Configure SSH Keys for inter-node communication as root for SUSE"
  when:
                                                  - ansible_os_family | upper == "SUSE"
  block:
    - name:                                       "1.17 Generic Pacemaker - Ensure there are SSH keys for the root user to communicate between nodes"
      ansible.builtin.shell:                      ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
      args:
        creates:                                  /root/.ssh/id_rsa

    - name:                                       "1.17 Generic Pacemaker - Ensure there is a public key for the root user SSH key"
      ansible.builtin.shell:                      ssh-keygen -f /root/.ssh/id_rsa -y > /root/.ssh/id_rsa.pub
      args:
        creates:                                  /root/.ssh/id_rsa.pub

    - name:                                       "1.17 Generic Pacemaker - Ensure the Public SSH keys are available for exchanging SSH key trust between nodes"
      ansible.builtin.command:                    cat /root/.ssh/id_rsa.pub
      register:                                   cluster_public_ssh_key
      changed_when:                               false

    - name:                                       "1.17 Generic Pacemaker - Set SSH fact"
      ansible.builtin.set_fact:
        cluster_public_ssh_key:                   "{{ cluster_public_ssh_key.stdout }}"


- name:                                           "1.17 Generic Pacemaker - Wait for ssh key facts to be present"
  when:
                                                  - ansible_os_family | upper == "SUSE"
  block:
    - name:                                       "1.17 Generic Pacemaker - Wait for cluster_public_ssh_key check on first node to finish"
      when:                                       ansible_hostname == secondary_instance_name
      ansible.builtin.set_fact:
        is_ssh_defined_on_primaryNode:            "{{ hostvars[primary_instance_name].cluster_public_ssh_key is defined }}"
      retries:                                    30
      delay:                                      60
      until:                                      is_ssh_defined_on_primaryNode

    - name:                                       "1.17 Generic Pacemaker - Wait for cluster_public_ssh_key check on second node to finish"
      when:                                       ansible_hostname == primary_instance_name
      ansible.builtin.set_fact:
        is_ssh_defined_on_secondaryNode:          "{{ hostvars[secondary_instance_name].cluster_public_ssh_key is defined }}"
      retries:                                    30
      delay:                                      60
      until:                                      is_ssh_defined_on_secondaryNode


# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Configure SSH Keys for inter-node communication as root for SUSE - END     |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# /*---------------------------------------------------------------------------8
# |                                                                            |
# | Validate packages for Pacemaker installation - BEGIN                       |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
# Currently we can only validate the version numbers for packages on SUSE and RHEL
# We need to add support for comparing minor releases.
# The current version filter is not able to do that.

- name:                                           "1.17 Generic Pacemaker - Get packages information"
  ansible.builtin.package_facts:

- name:                                           "1.17 Generic Pacemaker - Set packages information ({{ ansible_os_family | upper }})"
  ansible.builtin.set_fact:
    pacemaker_version:                             "{{ ansible_facts.packages['pacemaker'] | map(attribute='version') | first | default('') }}"
    resource_agents_version:                       "{{ ansible_facts.packages['resource-agents'] | map(attribute='version') | first | default('') }}"

- name:                                           "1.17 Generic Pacemaker - Show packages information ({{ ansible_os_family | upper }})"
  when:                                           ansible_os_family | upper == "REDHAT"
  ansible.builtin.debug:
    msg:
      - "pacemaker:                               {{ ansible_facts.packages['pacemaker'] }}"
      - "resource-agents:                         {{ ansible_facts.packages['resource-agents'] }}"
      - "fence-agents-azure-arm:                  {{ ansible_facts.packages['fence-agents-azure-arm'] }}"

- name:                                           "1.17 Generic Pacemaker - Show packages information ({{ ansible_os_family | upper }})"
  when:                                           ansible_os_family | upper == "SUSE"
  ansible.builtin.debug:
    msg:
      - "pacemaker:                               {{ ansible_facts.packages['pacemaker'] }}"
      - "resource-agents:                         {{ ansible_facts.packages['resource-agents'] }}"

- name:                                           "1.17 Generic Pacemaker - Verify that the packages are the right version"
  ansible.builtin.assert:
    that:
      - 'ansible_facts.packages[ packages_list.name ][0].version is version( packages_list.version , ">=", version_type= packages_list.version_type )'
    fail_msg:                                     "{{ packages_list.name }} version is not greater than {{ packages_list.version }}"
    success_msg:                                  "{{ packages_list.name }} version is greater than {{ packages_list.version }}"
  register:                                       package_version_results
  loop:                                           "{{ package_versions[distribution_full_id] }}"
  loop_control:
    loop_var:                                     packages_list

# @TODO: Use this variable to determine the cluster stonith type
# 'sybase' databases do not have the code to cluster them. It can be added in the future.
# @TODO: Use this variable to determine the cluster stonith type
# 'sybase' databases do not have the code to cluster them. It can be added in the future.
- name:                                           "1.17 Generic Pacemaker - Determine STONITH type for pacemaker cluster initialization"
  ansible.builtin.set_fact:
    cluster_stonith_type: >-
                                                  {{ {'value':
                                                      (database_cluster_type if (node_tier in ['hana', 'db2'] or ['hana', 'db2'] | intersect(supported_tiers)) and database_cluster_type is defined
                                                      else scs_cluster_type if (node_tier in ['scs', 'ers'] or ['scs', 'ers'] | intersect(supported_tiers)) and scs_cluster_type is defined
                                                      else "UNDEFINED")
                                                  }.value | trim }}

# Debug: Display the cluster stonith type
- name:                                           "1.17 Generic Pacemaker - Show cluster stonith type"
  ansible.builtin.debug:
    msg:                                          # Best method for formatting output with Azure Devops Logs
                                                  - "Cluster STONITH Type:            '{{ cluster_stonith_type }}'"
    verbosity:                                    2

- name:                                           "1.17 Generic Pacemaker - Determine if OS version is supported for SBD STONITH"
  when:
                                                  - ansible_os_family | upper == "REDHAT" or ansible_os_family | upper == "SUSE"
                                                  - cluster_stonith_type in ['ASD', 'ISCSI']
  ansible.builtin.set_fact:
    os_version_supported_for_sbd: >-
                                                  {{ {'value':
                                                      (true if ansible_os_family | upper == "REDHAT" and
                                                            (ansible_distribution_version is version('8.8', '>=') or ansible_distribution_version is version('9.0', '>='))
                                                      else true if ansible_os_family | upper == "SUSE" and cluster_stonith_type == "ASD" and
                                                            ansible_distribution_version is version('15.1', '>=')
                                                      else true if ansible_os_family | upper == "SUSE" and cluster_stonith_type == "ISCSI" and
                                                            ansible_distribution_version is version('12.5', '>=')
                                                      else false)
                                                  }.value | trim }}

# Debug: Display the OS version support for SBD STONITH
- name:                                           "1.17 Generic Pacemaker - Show OS version support for SBD STONITH"
  ansible.builtin.debug:
    msg:                                          # Best method for formatting output with Azure Devops Logs
                                                  - "OS Version Supported for SBD STONITH: '{{ os_version_supported_for_sbd | default('false') }}'"
    verbosity:                                    2
...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
