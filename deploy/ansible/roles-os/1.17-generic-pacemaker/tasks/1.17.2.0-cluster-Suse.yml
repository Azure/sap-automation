---

# SLES Clustering
# Ref: https://documentation.suse.com/sle-ha/12-SP4/html/SLE-HA-install-quick/index.html

- name:                                Ensure a list of package version is available for checking the cloud-netconfig-azure version
  package_facts:


# Pacemaker can create a large number of processes
- name:                                Ensure Process limit is raised
  ansible.builtin.lineinfile:
    path:                              /etc/systemd/system.conf
    state:                             present
    regexp:                            "^#?\\s*DefaultTasksMax="
    line:                              "DefaultTasksMax=4096"
  register:                            raise_process_limit

# eth0 is the "db" NIC
- name:                                Ensure clustering can manage Virtual IPs on the Database Interface
  ansible.builtin.lineinfile:
    path:                              /etc/sysconfig/network/ifcfg-eth0
    state:                             present
    regexp:                            "^#?\\s*CLOUD_NETCONFIG_MANAGE="
    line:                              "CLOUD_NETCONFIG_MANAGE='no'"
  when:                                ansible_facts.packages['cloud-netconfig-azure'] and (ansible_facts.packages['cloud-netconfig-azure'][0].version | float) < 1.3

# SLES 12 Activate public cloud extension & Install Azure Python SDK
- name:                                Install Azure python SDK Sles 12
  ansible.builtin.shell: |
                                       SUSEConnect -p sle-module-public-cloud/12/x86_64
  when:                                ansible_distribution_major_version == "12"

# SLES 15 Activate public cloud extension & Install Azure Python SDK
- name:                                Install Azure python SDK Sles 15.1
  ansible.builtin.shell: |
                                       SUSEConnect -p sle-module-public-cloud/15.1/x86_64
  when:                                
    - distro_full_id == "sles_sap15.1"

- name:                                Install Azure python SDK Sles 15.2
  ansible.builtin.shell: |
                                       SUSEConnect -p sle-module-public-cloud/15.2/x86_64
  when:                                
    - distro_full_id == "sles_sap15.2"

- name:                                Install Azure python SDK Sles 15.3
  ansible.builtin.shell: |
                                       SUSEConnect -p sle-module-public-cloud/15.3/x86_64
  when:                                
    - distro_full_id == "sles_sap15.3"

# https://rpm.pbone.net/index.php3/stat/45/idpl/27916721/numer/8/nazwa/ha-cluster-init
- name:                                Ensure Primary node initiates the Cluster
  block:
    - name:                            Ensure csync2 is configured
      ansible.builtin.command:         crm cluster init -y csync2 --interface eth0

    - name:                            Ensure corosync is configured
      ansible.builtin.command:         crm cluster init -y -u corosync --interface eth0

    - name:                            Ensure cluster (hdb_{{ db_sid | upper }}) is configured
      ansible.builtin.command:         "crm cluster init -y cluster --name 'hdb_{{ db_sid | upper }}' --interface eth0"
      when:                            node_tier == 'hana'

    - name:                            Ensure cluster (scs_{{ sap_sid | upper }}) is configured
      ansible.builtin.command:         "crm cluster init -y cluster --name 'scs_{{ sap_sid | upper }}' --interface eth0"
      when:                            node_tier == 'scs'

    - name:                            Ensure cluster (db2_{{ db_sid | upper }}) is configured
      ansible.builtin.command:         "crm cluster init -y cluster --name 'db2_{{ db_sid | upper }}' --interface eth0"
      when:                            node_tier == 'db2'
  when:                                inventory_hostname == primary_instance_name


- name:                                Ensure Secondary node joins the Cluster
  block:
    - name:                            Ensure the configuration files are synchronised
      ansible.builtin.command:         "crm cluster join -y -c {{ primary_instance_ip }} csync2 --interface eth0"

    - name:                            Ensure the cluster is joined
      ansible.builtin.command:         "crm cluster join -y -c {{ primary_instance_ip }} cluster --interface eth0"
  when:                                inventory_hostname == secondary_instance_name

- name:                                Ensure HA Cluster password is set to something secure
  ansible.builtin.user:
    name:                              hacluster
    password:                          "{{ password_ha_db_cluster | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"

- name:                                Ensure cluster configuration contains correct details
  ansible.builtin.template:
    src:                               corosync.conf.j2
    dest:                              /etc/corosync/corosync.conf
    mode:                              0600

- name:                                Ensure the Corosync service is restarted on primary node.
  ansible.builtin.systemd:
    name:                              corosync
    state:                             restarted
  when:                                inventory_hostname == primary_instance_name

- name:                                Ensure the Corosync service is restarted on primary node.
  ansible.builtin.pause:
    seconds: 15
  when:                                inventory_hostname == primary_instance_name

- name:                                Ensure the Corosync service is restarted on secondary node
  ansible.builtin.systemd:
    name:                              corosync
    state:                             restarted
  when:                                inventory_hostname == secondary_instance_name

- name:                                Ensure the Corosync service is restarted on primary node.
  ansible.builtin.pause:
    seconds: 15
  when:                                inventory_hostname == secondary_instance_name

- name:                                Ensure the STONITH Azure fence agent is created when SBD not used
  block:
    - name:                            Enable Stonith
      ansible.builtin.shell: |
                                       crm configure property stonith-enabled=true
                                       crm configure property concurrent-fencing=true

    - name:                            Create Azure Fencing Agent
      ansible.builtin.command: >
                                       crm configure primitive rsc_st_azure stonith:fence_azure_arm params
                                       subscriptionId="{{ sap_hana_fencing_spn_subscription_id }}"
                                       resourceGroup="{{ resource_group_name }}"
                                       tenantId="{{ sap_hana_fencing_spn_tenant_id }}"
                                       login="{{ sap_hana_fencing_spn_client_id }}"
                                       passwd="{{ sap_hana_fencing_spn_client_pwd }}"
                                       pcmk_monitor_retries=4
                                       pcmk_action_limit=3
                                       power_timeout=240
                                       pcmk_reboot_timeout=900
                                       pcmk_host_map="{{ primary_instance_name }}:{{ hostvars[primary_instance_name]['primary_vm_name'] }};{{ secondary_instance_name }}:{{ hostvars[secondary_instance_name]['secondary_vm_name'] }}"
                                       pcmk_host_list="{{ hostvars[primary_instance_name]['primary_vm_name'] }} {{ hostvars[secondary_instance_name]['secondary_vm_name'] }}"


    - name:                            Stonith Timeout Property
      become:                          true
      ansible.builtin.command:         crm configure property stonith-timeout=900
  when:                                inventory_hostname == primary_instance_name

- name:                                Ensure Azure scheduled events is configured
  block:
  # After configuring the Pacemaker resources for azure-events agent, when you place the cluster in or out of maintenance mode, you may get warning messages like:
  # WARNING: cib-bootstrap-options: unknown attribute 'hostName_ hostname'
  # WARNING: cib-bootstrap-options: unknown attribute 'azure-events_globalPullState'
  # WARNING: cib-bootstrap-options: unknown attribute 'hostName_ hostname'
  # These warning messages can be ignored.
    - name:                            Ensure Pacemaker resources for the Azure agent is created
      ansible.builtin.command:         crm configure primitive rsc_azure-events ocf:heartbeat:azure-events op monitor interval=10s

    - name:                            Ensure clone resource azure-events is configure
      ansible.builtin.command:         crm configure clone cln_azure-events rsc_azure-events

    - name:                            Ensure maintenance mode is disabled
      ansible.builtin.command:         crm configure property maintenance-mode=false
  when:                                inventory_hostname == primary_instance_name

# END of Generic Pacemaker Tasks
