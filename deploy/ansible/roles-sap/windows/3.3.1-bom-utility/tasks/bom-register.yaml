# Inputs:
#   bom_name              - Name of BOM (ex: S41909SPS03_v0001ms)
#
#
# Outputs:
#   bom                   - object
#

---
# -------------------------------------+---------------------------------------8
#
# Description:  Check if BOM is Microsoft supplied and register BOM as an object.
#               If not, download from storage account location.
#

- name:                                "3.3.1 BoM Processing: - Create BOM download directories"
  ansible.builtin.file:
    path:                              "{{ item.path }}"
    state:                             directory
    mode:                              0755
  delegate_to:                         localhost
  become:                              "{{ bom_processing_become }}"
  become_user:                         root
  loop:
    - path: "{{ download_directory }}"
    - path: "{{ download_directory }}/tmp"
    - path: "{{ download_directory }}/bom"
    - path: "{{ download_directory }}/files"

- name:                                "3.3.1 BoM Processing: - Set the new name"
  ansible.builtin.set_fact:
    new_bom_name:                      "{{ bom_base_name }}{{ bom_suffix }}"

- name:                                "3.3.1 BoM Processing: - Show new name"
  ansible.builtin.debug:
    msg:
      - "BoM Name:   {{ new_bom_name }}"


- name:                                "3.3.1 BoM Processing: {{ bom_name }} Download: {{ new_bom_name }} from the storage account"
  ansible.builtin.get_url:
    url:                               "{{ sapbits_location_base_path }}/{{ sapbits_bom_files }}/boms/{{ new_bom_name }}/{{ new_bom_name }}.yaml\
                                       {% if sapbits_sas_token is not undefined %}?{{ sapbits_sas_token }}{% endif %}"
    dest:                              "{{ download_directory }}/bom/{{ new_bom_name }}.yaml"
    force:                             true
    mode:                              0644
  delegate_to:                         localhost
  become:                              "{{ bom_processing_become }}"
  ignore_errors:                       true
  register:                            result

- name:                                "BOM: Show blob status"
  ansible.builtin.debug:
    msg:
      - "{{ result }}"
      - "{{ sapbits_location_base_path }}/{{ sapbits_bom_files }}/boms/{{ bom_name }}/{{ bom_name }}.yaml{{ sapbits_sas_token }}"
    verbosity:                         2

- name:                                "3.3.1 BoM Processing: Register BOM ({{ bom_name }}) from Storage Account"
  block:

    - name:                            "{{ task_prefix }} Register downloaded BOM ({{ bom_name }})"
      ansible.builtin.include_vars:
        file:                          "{{ download_directory }}/bom/{{ new_bom_name }}.yaml"
        name:                          bom

    - name:                            "{{ task_prefix }} Register downloaded BOM ({{ bom_name }}) file name"
      ansible.builtin.set_fact:
        bom_file:                      "{{ download_directory }}/bom/{{ new_bom_name }}.yaml"

  when:
    - result is succeeded or result is skipped

# -------------------------------------+---------------------------------------8

- name:                                "{{ task_prefix }} Check for Microsoft Supplied BOM ({{ bom_name }})"
  block:
    - name:                            "{{ task_prefix }} Check for Microsoft Supplied BOM ({{ bom_name }})"
      ansible.builtin.stat:
        path:                          "{{ playbook_dir }}/BOM-catalog/{{ bom_name }}/{{ bom_name }}.yaml"
      register:                        microsoft_supplied_bom
      delegate_to:                     localhost
      become:                          "{{ bom_processing_become }}"

    - name:                            "{{ task_prefix }} Show Microsoft Supplied BOM ({{ bom_base_name }}) result"
      ansible.builtin.debug:
        msg:
          - "BOM PATH:   BOM-catalog/{{ bom_name }}/{{ bom_name }}.yaml"
          - "BOM Exists: {{ microsoft_supplied_bom.stat.exists }}"
        verbosity:                     2

    - name:                            "{{ task_prefix }} Register Microsoft Supplied BOM {{ bom_name }}"
      ansible.builtin.include_vars:
        file:                          "{{ microsoft_supplied_bom.stat.path }}"
        name:                          bom
      when:                            microsoft_supplied_bom.stat.exists

    - name:                            "{{ task_prefix }} Register downloaded BOM ({{ bom_name }}) file name"
      ansible.builtin.set_fact:
        bom_file:                      "{{ microsoft_supplied_bom.stat.path }}"
      when:                            microsoft_supplied_bom.stat.exists

    - name:                            "{{ task_prefix }} Check for Microsoft Supplied BOM ({{ bom_name }}) in archives"
      block:

        - name:                        "{{ task_prefix }} Check for Microsoft Supplied BOM ({{ bom_name }}) in archives"
          ansible.builtin.stat:
            path:                      "{{ playbook_dir }}/BOM-catalog/archives/{{ bom_name }}/{{ bom_name }}.yaml"
          register:                    microsoft_supplied_bom_archive
          delegate_to:                 localhost
          become:                      "{{ bom_processing_become }}"

        - name:                        "{{ task_prefix }} Register Microsoft Supplied BOM {{ bom_name }} from archives"
          ansible.builtin.include_vars:
            file:                      "{{ microsoft_supplied_bom_archive.path }}"
            name:                      bom
          when:                        microsoft_supplied_bom_archive.stat.exists

        - name:                        "{{ task_prefix }} Register downloaded BOM ({{ bom_name }}) file name"
          ansible.builtin.set_fact:
            bom_file:                  "{{ microsoft_supplied_bom_archive.stat.path }}"
          when:                        microsoft_supplied_bom_archive.stat.exists

      when:                            not microsoft_supplied_bom.stat.exists

  when:
    - result is failed or always_upload_jinja_templates
    - bom_file is undefined

# Validate that BoM was found

- name:                                "{{ task_prefix }} Ensure that a BoM object is created"
  ansible.builtin.fail:
    msg:                               "Unable to find the Bill of materials file for {{ bom_name }} "
  when:                                bom is not defined

- name:                                "{{ task_prefix }} Show BoM details"
  ansible.builtin.debug:
    msg:
      - "BoM name:        {{ bom.name }}"
      - "BoM target:      {{ bom.target }}"
      - "BoM version:     {{ bom.version }}"
      - "BoM DB platform: {% if bom.platform is defined %}{{ bom.platform }}{% else %}Not defined{% endif %}"
  when:
    - bom.name is not search('SWPM')
    - bom.name is not search('SUM')

- name:                                "{{ task_prefix }} Ensure that a BoM platform is defined"
  ansible.builtin.assert:
    that:
      - bom.platform is defined                    # Has the variable been defined
      - bom.platform | upper == platform | upper
    fail_msg:                          "The BoM {{ bom_name }} is not for platform {{ platform }}"
  when:
    - operation is defined
    - operation != 'SoftwareAcquisition'

...
