# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                SAP: Register BOM                                           |
# |         SAP DBLOAD: deploy DBLOAD Parameter file install template          |
# |         SAP DBLOAD: Install                                                |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

---

- name:                                "DBLoad: -  Create run flag directory"
  ansible.builtin.file:
    path:                              "/etc/sap_deployment_automation/{{ sid_to_be_deployed.sid | upper }}"
    state:                             directory
    mode:                              0755
  when:                                node_tier != "oracle"

- name:                                "DBLoad: -  reset"
  ansible.builtin.file:
    path:                              "/etc/sap_deployment_automation/{{ sid_to_be_deployed.sid | upper }}/sap_deployment_dbload.txt"
    state:                             absent
  when:                                reinstall

- name:                                "DBLoad: - check if {{ sid_to_be_deployed.sid | upper }} is installed"
  ansible.builtin.stat:
    path:                              "/etc/sap_deployment_automation/{{ sid_to_be_deployed.sid | upper }}/sap_deployment_dbload.txt"
  register:                            dbload_installed

- name:                                "DBLoad: -  Set the SCS Server name list"
  ansible.builtin.set_fact:
    scs_server_temp:                   "{{ scs_server_temp | default([]) + [item] }}"
  with_items:
    - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_SCS') }}"
    - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_DB') }}"

- name:                                "DBLoad: -  Set the DB Server name list"
  ansible.builtin.set_fact:
    db_server_temp:                    "{{ db_server_temp | default([]) + [item] }}"
  with_items:
    - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_DB') }}"

- name:                                "DBLoad: - Set dbload facts"
  ansible.builtin.set_fact:
    sap_inifile:                       "{{ bom_base_name }}-dbload-{{ sid_to_be_deployed.sid | lower }}-{{ ansible_hostname }}.params"
    sap_inifile_template:              "{{ bom_base_name }}-dbload-inifile-param.j2"
    scs_server:                        "{% if scs_high_availability %}{{ sid_to_be_deployed.sid | lower }}scs{{ scs_instance_number }}cl1{% else %}{{ hostvars[scs_server_temp | first]['virtual_host'] }}{% endif %}"
    db_virtual_host:                   "{{ hostvars[db_server_temp | first]['virtual_host'] }}"
    dir_params:                        "{{ tmp_directory }}/.params"

#   0x) Create hidden directory for parameter files
- name:                                "DBLoad: Create hidden directory"
  ansible.builtin.file:
    path:                              "{{ dir_params }}"
    state:                             directory
    mode:                              0755

- name:                                "DBLoad: Create temp directory for sid"
  ansible.builtin.file:
    path:                              "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
    state:                             directory
    mode:                              0755

- name:                                "DBLoad: - Include 3.3.1-bom-utility role"
  ansible.builtin.include_role:
    name:                              roles-sap/3.3.1-bom-utility
    tasks_from:                        bom-register
  vars:
    bom_name:                          "{{ bom_base_name }}"
    tier:                              "{{ tier }}"
    task_prefix:                       "DBLoad: "

- name:                                "DBLoad: - Include roles-sap/3.3.1-bom-utility role"
  ansible.builtin.include_role:
    name:                              roles-sap/3.3.1-bom-utility
    tasks_from:                        bom-template
  vars:
    task_prefix:                       "DBLoad: "
    always_upload_jinja_templates:     false
    bom_name:                          "{{ bom_base_name }}"
    sap_cd_package_hdbclient:          "{{ target_media_location }}/CD_HDBCLIENT/SAP_HANA_CLIENT"
    sap_cd_package_cd1:                "{{ target_media_location }}/CD_EXPORT"
    sap_cd_package_cd2:
    sap_cd_package_cd3:
    sap_cd_package_cd4:
    sap_cd_package_cd5:
    sap_ciInstanceNumber:
    app_instance_number:
    sap_ciDialogWPNumber:
    sap_ciBtcWPNumber:
    sap_installSAPHostAgent:
    sap_profile_dir:                   "/sapmnt/{{ sid_to_be_deployed.sid | upper }}/profile"
    sap_scs_hostname:                  "{{ scs_server }}"
    sap_db_hostname:                   "{{ db_virtual_host }}"
    sap_ciVirtualHostname:
    sap_appVirtualHostname:
    tier:                              "{{ tier }}"
    param_directory:                   "{{ dir_params }}"
    sap_sid:                           "{{ sid_to_be_deployed.sid }}"
    sidadm_uid:                        "{{ sid_to_be_deployed.sidadm_uid }}"
  tags:
    - skip_ansible_lint

- name:                                "DBLoad: install variables"
  ansible.builtin.debug:
    msg:
      - "INSTALLED:  {{ dbload_installed.stat.exists }}"
      - "INIFILE:    {{ sap_inifile }}"
      - "PRODUCT ID: {{ bom.product_ids.dbl }}"
      - "INSTANCE:   {{ hdb_instance_number }}"
      - "SCSHOST:    {{ scs_server }}"
      - "DBHOST:     {{ db_virtual_host }}"
      - "SID:        {{ sid_to_be_deployed.sid | upper }}"

- name:                                "DBLoad: - Install"
  block:

# *====================================4=======================================8
#   SAP DBLOAD: Install
# 2230669 - System Provisioning Using a Parameter Input File
#
# *====================================4=======================================8
    # Import this task only if the tier is ora.
    - import_tasks:                    "oracle.yaml"
      when:
        - node_tier == "oracle-multi-sid"

    - name:                            "DBLoad: progress"
      ansible.builtin.debug:
        msg:                           "Starting DBLoad for {{ sid_to_be_deployed.sid | upper }}. Please wait"

    - name:                            "DBLoad: - run SAPInst"
      ansible.builtin.shell: |
                                       umask {{ custom_umask | default('022') }};
                                       ./sapinst SAPINST_INPUT_PARAMETERS_URL={{ dir_params }}/{{ sap_inifile }} \
                                                 SAPINST_EXECUTE_PRODUCT_ID={{ bom.product_ids.dbl }}            \
                                                 SAPINST_SKIP_DIALOGS=true                                       \
                                                 SAPINST_START_GUISERVER=false
      args:
        chdir:                         "{{ target_media_location }}/SWPM"
        creates:                       "/etc/sap_deployment_automation/{{ sid_to_be_deployed.sid | upper }}/sap_deployment_dbload.txt"
      environment:
        TMPDIR:                        "{{ tmp_directory }}/{{ sid_to_be_deployed.sid | upper }}"
        SAPSYSTEMNAME:                 "{{ sid_to_be_deployed.sid | upper }}"
      register:                        dbload_results
      tags:
        - skip_ansible_lint
      async:                           7200
      poll:                            0

    - name:                            "DBLoad Install -Wait for asynchronous job to end"
      ansible.builtin.async_status:
        jid:                           "{{ dbload_results.ansible_job_id }}"
      register:                        job_result
      until:                           job_result.finished
      retries:                         120
      delay:                           60
      when:                            dbload_results.ansible_job_id is defined

    - name:                            "DBLoad: Installation results"
      ansible.builtin.debug:
        msg:
          - "DBLoad : {{ dbload_results }}"
          - "Job result: {{ job_result }}"

    - name:                            "DBLoad: Installation results"
      ansible.builtin.debug:
        var:                           dbload_results
      when:
        - job_result is defined
        - job_result.rc > 0

    - name:                            "DBLoad Install: Cleanup ini file {{ ansible_hostname }}"
      ansible.builtin.file:
        path:                          "{{ dir_params }}/{{ sap_inifile }}"
        state:                         absent

    - name:                            "DBLoad: - set completion flag"
      ansible.builtin.file:
        path:                          "/etc/sap_deployment_automation/{{ sid_to_be_deployed.sid | upper }}/sap_deployment_dbload.txt"
        state:                         touch
        mode:                          0755
      when:
        - job_result.rc is defined
        - job_result.rc == 0

    - name:                            "DBLoad Install: Installation results"
      ansible.builtin.debug:
        msg:                           "DBLoad Installation succeeded"
      when:
        - job_result.rc is defined
        - job_result.rc == 0

  when:
    - not dbload_installed.stat.exists
  

- name:                                "Oracle Post-Processing"
  ansible.builtin.stat:
    path:                              "/etc/sap_deployment_automation/{{ db_sid | upper }}/ora_sga_updated.txt"
  register:                            ora_sga_updated
  
  block:
    
    - name:                                 "Set the SGA and PGA Sizes for RAM < 4TB"
      set_facts:
        ora_sga:                            "{{ (ansible_memory_mb.real.total*0.85) |round |int }}"
        ora_pga:                            "{{ (ansible_memory_mb.real.total*0.85)*0.2 |round |int }}"
      when:                                 ansible_memory_mb.real.total < 4194304 
    
    - name:                                 "Set the SGA and PGA Sizes for RAM > 4TB"
      set_facts:
        ora_sga:                            "{{ (ansible_memory_mb.real.total*0.95) |round |int }}"
        ora_pga:                            "{{ ((ansible_memory_mb.real.total*0.95)*0.2) |round |int }}"
      when:                                 ansible_memory_mb.real.total > 4194304
     
    - name:                                "Oracle SGA & PGA: create updatesga.sql"
      become:                              true
      become_user:                         "oracle"
      ansible.builtin.blockinfile:
        create: true
        path: /etc/sap_deployment_automation/{{ db_sid| upper }}/updatesga.sql
        marker_begin: "-- BEGIN"
        marker_end:   "-- END"
        block: |
             ALTER SYSTEM SET sga_max_size={{ ora_sga }} SCOPE=spfile;
             ALTER SYSTEM SET pga_aggregate_target={{ ora_pga }} SCOPE=spfile;
             SHUTDOWN IMMEDIATE;
             exit
        mode: '0755'

    - name:                                "Oracle Startup: create startup.sql"
      become:                              true
      become_user:                         "oracle"
      ansible.builtin.blockinfile:
        create: true
        path: /etc/sap_deployment_automation/{{ db_sid| upper }}/startup.sql
        marker_begin: "-- BEGIN"
        marker_end:   "-- END"
        block: |
             STARTUP;
             exit
        mode: '0755'

    - name:                                "Oracle SGA Change Execution"
      become:                              true
      become_user:                         "oracle"
      ansible.builtin.shell: |
                                           set -o pipefail
                                           sqlplus / as sysdba @updatesga.sql | tee updatesga.log
      register:                            updatesga_results
      failed_when:                         updatesga_results.rc >= 2
      args:
        creates:                           /etc/sap_deployment_automation/{{ db_sid| upper }}/sgaupdated.txt
        chdir:                             /etc/sap_deployment_automation/{{ db_sid| upper }}
        executable:                        /bin/csh


    - name:                               " Create sgaupdated.txt"
      ansible.builtin.file:
        path:                              /etc/sap_deployment_automation/dgscripts/sgaupdated.txt
        state:                             touch
        mode:                              '0755'             
      when:                                updatesga_results.rc >= 2

    - name:                                " Start Oracle after SGA Change"
      become:                              true
      become_user:                         "oracle"
      ansible.builtin.shell: |
                                           set -o pipefail
                                           sqlplus / as sysdba @startup.sql | tee startup.log
      register:                            dbstarted_results
      failed_when:                         dbstarted_results.rc >= 2
      args:
        creates:                           /etc/sap_deployment_automation/{{ db_sid| upper }}/db_startup_completed.txt
        chdir:                             /etc/sap_deployment_automation/{{ db_sid| upper }}
        executable:                        /bin/csh

    - name:                               " Create db_startup_completed.txt"
      ansible.builtin.file:
        path:                              /etc/sap_deployment_automation/dgscripts/db_startup_completed.txt
        state:                             touch
        mode:                              '0755'             
      when:                                updatesga_results.rc >= 2

    - name:                               " Create sgaupdated.txt"
      ansible.builtin.file:
        path:                              /etc/sap_deployment_automation/dgscripts/ora_sga_updated.txt
        state:                             touch
        mode:                              '0755'             
      when:                                updatesga_results.rc >= 2

  when: 
    - node_tier in ["oracle","oracle-asm"]
    - not ora_sga_updated.stat.exists

- name:                                "DBLoad: - status"
  block:

    - name:                            "DBLoad: - status"
      ansible.builtin.debug:
        msg:                           "DBLoad is already performed ({{ sid_to_be_deployed.sid | upper }})"

    - name:                            "DBLoad: - return value"
      ansible.builtin.set_fact:
        dbload_already_performed:      true
  when:
    - dbload_installed.stat.exists


...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
