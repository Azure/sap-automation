---

# RHEL Clustering - Deploy ASCS/ERS cluster resources
# Azure ref: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/high-availability-guide-rhel-netapp-files

# [1] Create the SAP cluster resources
# If using enqueue server 1 architecture (ENSA1), define the resources as follows:

- name:                                "5.6 SCSERS - RHEL - ENSA1 - SAP Resources - Cluster Configuration after Install"
  block:
    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Enable Maintenance mode for the cluster"
      ansible.builtin.command:         pcs property set maintenance-mode=true

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Configure SAP ASCS/SCS resources"
      ansible.builtin.command: >
                                       pcs resource create rsc_sap_{{ sap_sid }}_{{ instance_type | upper }}{{ scs_instance_number }} SAPInstance \
                                       InstanceName={{ instance_name }} START_PROFILE="{{ start_profile_path }}" \
                                       AUTOMATIC_RECOVER=false \
                                       meta resource-stickiness=5000 migration-threshold=1 failure-timeout=60 \
                                       op monitor interval=20 on-fail=restart timeout=60 \
                                       op start interval=0 timeout=600 op stop interval=0 timeout=600 \
                                       --group g-{{ sap_sid }}_{{ instance_type | upper }}
      register:                        ascs_rsc_sap
      failed_when:                     ascs_rsc_sap.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Set the ASCS resource stickiness"
      ansible.builtin.command:         pcs resource meta g-{{ sap_sid }}_{{ instance_type | upper }} resource-stickiness=3000

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Configure SAP ERS resources"
      ansible.builtin.command: >
                                       pcs resource create rsc_sap_{{ sap_sid }}_ERS{{ ers_instance_number }} SAPInstance \
                                       InstanceName={{ sap_sid }}_ERS{{ ers_instance_number }}_{{ ers_virtual_hostname }} START_PROFILE="/sapmnt/{{ sap_sid }}/profile/{{ sap_sid }}_ERS{{ ers_instance_number }}_{{ ers_virtual_hostname }}" \
                                       AUTOMATIC_RECOVER=false IS_ERS=true \
                                       op monitor interval=20 on-fail=restart timeout=60 \
                                       op start interval=0 timeout=600 \
                                       op stop interval=0 timeout=600 \
                                       --group g-{{ sap_sid }}_ERS
      register:                        ers_rsc_sap
      failed_when:                     ers_rsc_sap.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Configure Co-location Constraints"
      ansible.builtin.shell: |
                                       pcs constraint colocation add g-{{ sap_sid }}_ERS with g-{{ sap_sid }}_{{ instance_type | upper }} -5000
                                       pcs constraint location rsc_sap_{{ sap_sid }}_{{ instance_type | upper }}{{ scs_instance_number }} rule score=2000 runs_ers_{{ sap_sid }} eq 1
                                       pcs constraint order start g-{{ sap_sid }}_{{ instance_type | upper }} then stop g-{{ sap_sid }}_ERS kind=Optional symmetrical=false
      register:                        co_location
      failed_when :                    co_location.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Bring Primary node online"
      ansible.builtin.command:         pcs node unstandby {{ primary_instance_name }}

    - name:                            "5.6 SCSERS - RHEL - ENSA1 - Set the Cluster out of maintenance mode"
      ansible.builtin.command:         pcs property set maintenance-mode=false

  when:
    - inventory_hostname == primary_instance_name
    - ensa1 | default(false)

# Use the following if using ENSA2
- name:                                "5.6 SCSERS - RHEL - SAP Resources - Cluster Configuration after Install"
  block:
    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Enable Maintenance mode for the cluster"
      ansible.builtin.command:         pcs property set maintenance-mode=true

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Configure SAP ASCS/SCS resources"
      ansible.builtin.command: >
                                       pcs resource create rsc_sap_{{ sap_sid }}_{{ instance_type | upper }}{{ scs_instance_number }} SAPInstance \
                                       InstanceName={{ instance_name }} START_PROFILE="{{ start_profile_path }}" \
                                       AUTOMATIC_RECOVER=false \
                                       meta resource-stickiness=5000 \
                                       op monitor interval=20 on-fail=restart timeout=60 \
                                       op start interval=0 timeout=600 op stop interval=0 timeout=600 \
                                       --group g-{{ sap_sid }}_{{ instance_type | upper }}
      register:                        ascs_rsc_sap
      failed_when:                     ascs_rsc_sap.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Set the ASCS resource stickiness"
      ansible.builtin.command:         pcs resource meta g-{{ sap_sid }}_{{ instance_type | upper }} resource-stickiness=3000

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Configure SAP ERS resources"
      ansible.builtin.command: >
                                       pcs resource create rsc_sap_{{ sap_sid }}_ERS{{ ers_instance_number }} SAPInstance \
                                       InstanceName={{ sap_sid }}_ERS{{ ers_instance_number }}_{{ ers_virtual_hostname }} START_PROFILE="/sapmnt/{{ sap_sid }}/profile/{{ sap_sid }}_ERS{{ ers_instance_number }}_{{ ers_virtual_hostname }}" \
                                       AUTOMATIC_RECOVER=false IS_ERS=true \
                                       op monitor interval=20 on-fail=restart timeout=60 \
                                       op start interval=0 timeout=600 \
                                       op stop interval=0 timeout=600 \
                                       --group g-{{ sap_sid }}_ERS
      register:                        ers_rsc_sap
      failed_when:                     ers_rsc_sap.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Set the ERS resource stickiness"
      ansible.builtin.command:         pcs resource meta rsc_sap_{{ sap_sid }}_ERS{{ ers_instance_number }} resource-stickiness=3000

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Configure Co-location Constraints"
      ansible.builtin.shell: |
                                       pcs constraint colocation add g-{{ sap_sid }}_ERS with g-{{ sap_sid }}_{{ instance_type | upper }} -5000
                                       pcs constraint order start g-{{ sap_sid }}_{{ instance_type | upper }} then start g-{{ sap_sid }}_ERS kind=Optional symmetrical=false
                                       pcs constraint order start g-{{ sap_sid }}_{{ instance_type | upper }} then stop g-{{ sap_sid }}_ERS kind=Optional symmetrical=false
      register:                        co_location
      failed_when:                     co_location.rc > 1

    - name:                            "5.6 SCSERS - RHEL - ENSA2 - Set the Cluster out of maintenance mode"
      ansible.builtin.command:         pcs property set maintenance-mode=false

- name:                            "5.6 SCSERS - RHEL - ENSA1 - Enable Maintenance mode for the cluster"
  ansible.builtin.command:         pcs property set maintenance-mode=true

- name:                            "5.6 SCS ERS Reboot the primary/secondaryinstance"
  ansible.builtin.reboot:

- name:                            "5.6 SCSERS - RHEL - ENSA2 - Set the Cluster out of maintenance mode"
  ansible.builtin.command:         pcs property set maintenance-mode=false

- name:                            "5.6 SCS cluster group validation"
  ansible.builtin.include_tasks:
    file:                          "5.6.6-validate.yml"
    apply:
      become:                      true
      become_user:                 root
      tags:
        - "5.6.6-validate"
  when:
    - inventory_hostname == primary_instance_name

# End of SAP Resources cluster configuration
...
