---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |      Set Runtime Parameters - e.g Sub ID , Resource group name             |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# ----------------------------------------
# BEGIN
# ----------------------------------------

- name:                                "5.6 SCSERS - Retrieve Subscription ID and Resource Group Name"
  ansible.builtin.uri:
    url:                               http://169.254.169.254/metadata/instance?api-version=2021-02-01
    use_proxy:                         false
    headers:
      Metadata:                        true
  register: azure_metadata

- name:                                "5.6 SCSERS - Set the primary intance nic and secondary instance nic IP"
  ansible.builtin.set_fact:
    primary_ip:                        "{{ azure_metadata.json.network.interface[0].ipv4.ipAddress[0].privateIpAddress }}"
    subnet_prefix:                     "{{ azure_metadata.json.network.interface[0].ipv4.subnet[0].prefix }}"

- name:                                "5.6 SCSERS - Extract NIC IPs"
  ansible.builtin.set_fact:
    primary_instance_ip:               "{{ hostvars[primary_instance_name]['primary_ip'] | string }}"
    secondary_instance_ip:             "{{ hostvars[secondary_instance_name]['primary_ip'] | string }}"

- name:                                "5.6 SCSERS - Print - Virtual Instance hostnames"
  ansible.builtin.debug:
    msg:
      - "The SCS Virtual hostname is {{ scs_virtual_hostname }}"
      - "The ERS Virtual hostname is {{ ers_virtual_hostname }}"
    verbosity:                         2

# Returns bom object
- name:                                "5.6 SCSERS - SCS HA Install - Register BoM"
  ansible.builtin.include_role:
    name:                              roles-sap/3.3.1-bom-utility
    tasks_from:                        bom-register
  vars:
    bom_name:                          "{{ bom_base_name }}"
    task_prefix:                       "SCS HA Install: "
    sa_enabled:                        true
  when:                                bom is not defined

- name:                                "5.6 SCSERS - HA Install: Default instance type"
  ansible.builtin.set_fact:
    instance_type:                     "ASCS"
  when:                                bom.InstanceType is not defined

- name:                                "5.6 SCSERS - HA Install: register instance type"
  ansible.builtin.set_fact:
    instance_type:  >-
                                        {%- set _instance_type = 'ASCS' -%}
                                        {%- if bom.InstanceType == 'JAVA' -%}
                                        {%- set _instance_type = 'SCS' -%}
                                        {%- elif bom.InstanceType == 'ABAP' -%}
                                        {%- set _instance_type = 'ASCS' -%}
                                        {%- else -%}
                                        {%- set _instance_type = 'ASCS' -%}
                                        {%- endif -%}
                                        {{- _instance_type -}}
    public:                            true
  when:                                bom.InstanceType is defined

- name:                                "5.6 SCSERS - HA Install: Populate InstanceName for cluster resource"
  ansible.builtin.set_fact:
    instance_name:                     "{{ sap_sid }}_{{ instance_type }}{{ scs_instance_number }}_{{ scs_virtual_hostname }}"
    start_profile_path:                "/sapmnt/{{ sap_sid }}/profile/{{ sap_sid }}_{{ instance_type }}{{ scs_instance_number }}_{{ scs_virtual_hostname }}"
    profile_directory:                 "/usr/sap/{{ sap_sid | upper }}/{{ instance_type }}{{ scs_instance_number }}"

  # Set fact for the timeout value of monitor operation for filesystem and ASCS/ERS resources
  # Since we only configure NFS4.1, the timeout value is set to 40 seconds for non-ANF and 105 seconds for ANF
- name:                                "5.6 SCSERS - HA install calculate filesystem timeout"
  ansible.builtin.set_fact:
    clus_fs_mon_timeout:  >-
                                       {%- set _timeoutvalue = 40 -%}
                                       {%- if (NFS_provider == "ANF") -%}
                                       {%-    if NFS_version != "NFSv3" -%}
                                       {%-      set _timeoutvalue = 40 -%}
                                       {%-    elif NFS_version == "NFSv4.1" -%}
                                       {%-      set _timeoutvalue = 105 -%}
                                       {%-    endif -%}
                                       {%- else -%}
                                       {%-   set _timeoutvalue = 40 -%}
                                       {%- endif -%}
                                       {{- custom_cluster_fs_mon_timeout | default(_timeoutvalue, true) -}}
  when:
    - scs_high_availability

- name:                                "5.6 SCSERS - HA install calculate SAP resource monitor timeout"
  ansible.builtin.set_fact:
    clus_sap_mon_timeout:  >-
                                       {%- set _timeoutvalue = 60 -%}
                                       {%- if (NFS_provider == "ANF") -%}
                                       {%-    if NFS_version != "NFSv3" -%}
                                       {%-      set _timeoutvalue = 60 -%}
                                       {%-    elif NFS_version == "NFSv4.1" -%}
                                       {%-      set _timeoutvalue = 105 -%}
                                       {%-    endif -%}
                                       {%- else -%}
                                       {%-   set _timeoutvalue = 60 -%}
                                       {%- endif -%}
                                       {{- custom_cluster_sap_mon_timeout | default(_timeoutvalue, true) -}}
  when:
    - scs_high_availability

- name:                                "5.6 SCSERS - HA install calculate NFS mount options"
  ansible.builtin.set_fact:
    clus_nfs_options:  >-
                                       {%- set _nfsopts = 'noresvport,vers=4.1,sec=sys' -%}
                                       {%- if (NFS_provider == "ANF") -%}
                                       {%-    if NFS_version == "NFSv3" -%}
                                       {%-      set _nfsopts = '' -%}
                                       {%-    elif NFS_version == "NFSv4.1" -%}
                                       {%-      set _nfsopts = 'sec=sys,nfsvers=4.1' -%}
                                       {%-    endif -%}
                                       {%- elif (NFS_provider == "AFS") -%}
                                       {%-    if NFS_version == "NFSv4.1" -%}
                                       {%-      set _nfsopts = 'noresvport,sec=sys,vers=4.1' -%}
                                       {%-    endif -%}
                                       {%- endif -%}
                                       {{- _nfsopts -}}
  when:
    - scs_high_availability

- name:                                "5.6 SCSERS - HA install show NFS mount options"
  ansible.builtin.debug:
    msg:                               "NFS mount options: {{ clus_nfs_options }}"
  when:
    - scs_high_availability

- name:                                "5.6 SCSERS - ASCS/ERS check if installed"
  become:                              true
  block:
    - name:                            "5.6 SCSERS - SCS HA Install: check if installed"
      ansible.builtin.stat:
        path:                          /etc/sap_deployment_automation//{{ sap_sid | upper }}/sap_deployment_scs.txt
      register:                        scs_installed

    - name:                            "5.6 SCSERS - ERS Install: check if installed"
      ansible.builtin.stat:
        path:                          /etc/sap_deployment_automation//{{ sap_sid | upper }}/sap_deployment_ers.txt
      register:                        ers_installed


- name:                                "5.6 SCSERS - check if the OS version is RHEL 8.2 or newer"
  ansible.builtin.set_fact:
    is_rhel_82_or_newer:               "{{ ansible_distribution_version is version('8.2', '>=') | default(false) }}"

- name:                                "5.6 SCSERS - check if the OS version is SLES 15 or newer"
  ansible.builtin.set_fact:
    is_sles_15_or_newer:               "{{ ansible_distribution_version is version('15', '>=') | default(false) }}"

# /*---------------------------------------------------------------------------8
# |                                   END                                     |
# +------------------------------------4--------------------------------------*/

...
