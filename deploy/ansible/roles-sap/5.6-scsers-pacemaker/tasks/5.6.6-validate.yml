---

# Validate that the SCS cluster is working as expected

- name:                                "5.6 SCS/ERS Validation: - Set Python version {{ distribution_id }}"
  ansible.builtin.set_fact:
    python_version: "python2"
  when: (ansible_distribution | lower ~ ansible_distribution_major_version) in ['sles_sap12']

- name:                                "5.6 SCS/ERS Validation: Get sapcontrol path"
  become_user:                         "root"
  become:                              true
  ansible.builtin.find:
    paths:                             "/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64,/usr/sap/hostctrl/exe"
    file_type:                         file
    patterns:                          'sapcontrol'
    recurse:                           true
    follow:                            true
  register:                            sapcontrol_file

- name:                                "5.6 SCS/ERS Validation: Set sapcontrol path"
  ansible.builtin.set_fact:
    sapcontrol_path:                   "{{ sapcontrol_file.files[0].path }}"
  when: sapcontrol_file | length > 0

- name:                                "5.6 SCS/ERS Validation: Determine if SCS is running on {{ ansible_hostname }}"
  become_user:                         "root"
  become:                              true
  when:
    - ansible_hostname == primary_instance_name
  block:

    # {{ sapcontrol_path }} -nr {{ scs_instance_number }} -function GetProcessList | grep MessageServer | awk '{split($0,result,", "); print result[1],result[3] }'
    - name:                            "5.6 SCS/ERS Validation: Determine if SCS is running on {{ ansible_hostname }}"
      ansible.builtin.shell:           "{{ sapcontrol_path }} -nr {{ scs_instance_number }} -function GetProcessList"
      changed_when:                    false
      failed_when:                     false
      register:                        is_running
      vars:
        allow_world_readable_tmpfiles: true
        ansible_python_interpreter:    "{{ python_version }}"
      args:
        chdir:                         "{{ sapcontrol_path | dirname }}"
      environment:
        ANSIBLE_REMOTE_TEMP:           "{{ tmp_directory }}/{{ sap_sid | upper }}"
        TEMPDIR:                       "{{ tmp_directory }}/{{ sap_sid | upper }}"
        PATH:                          /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64:/usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/home/{{ sap_sid | lower }}adm:/usr/sap/hostctrl/exe
        DIR_LIBRARY:                   /usr/sap/{{ sap_sid | upper }}/SYS/exe/run
        LD_LIBRARY_PATH:               /usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/usr/sap/{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64
        SAPSYSTEMNAME:                 "{{ sap_sid | upper }}"

    - name:                            "5.6 SCS/ERS Validation: Show if SCS is running on {{ ansible_hostname }}"
      ansible.builtin.debug:
        msg:                           "SCS status: {{ is_running.stdout_lines }}"
      when:                            is_running.stdout_lines is defined

    # when the rc is 3, the SCS is running on ansible_hostname.
    # if the ansible_hostname is not the primary_instance_name, then failover cluster resources for ASCS/SCS
    # start the SAP instance on primary_instance_name. This is a failover scenario.
    - name:                            "5.6 SCS/ERS Validation: Validate that SCS is running on {{ ansible_hostname }}"
      ansible.builtin.set_fact:
        scs_running_on:               "{{ ansible_hostname }}"
      when:
        - is_running.rc == 3
        - is_running.stdout | regex_search('MessageServer')

    - name:                            "Check where the cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} is running"
      vars:
        allow_world_readable_tmpfiles: true
        ansible_python_interpreter:    "{{ python_version }}"
      ansible.builtin.shell: >-
        set -o pipefail;
        crm_resource --resource g-{{ sap_sid | upper }}_{{ instance_type | upper }} --locate | cut -d ':' -f 2| cut -d " " -f 2
      when:
        - ansible_hostname == primary_instance_name
      failed_when:                     false
      register:                        cluster_group_location

    - name:                            "5.6 SCS/ERS Validation: Cluster variables"
      ansible.builtin.debug:
        msg:
          - "Cluster group location: {{ cluster_group_location.stdout_lines }}"
          - "Primary Instance Name: {{ primary_instance_name }}"
          - "scs_running_on: {{ scs_running_on | default('') }}"
      when:
        - cluster_group_location.stdout_lines is defined

    - name:                            "5.6 SCS/ERS Validation: Move cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} to {{ primary_instance_name }}"
      when:
        - primary_instance_name not in cluster_group_location.stdout_lines
        - scs_running_on is not defined
      block:

            # move cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} to primary_instance_name
        - name:                        "5.6 SCS/ERS Validation: Move cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} to {{ primary_instance_name }}"
          ansible.builtin.shell:       "crm resource move g-{{ sap_sid | upper }}_{{ instance_type | upper }} {{ primary_instance_name }}"
          vars:
            allow_world_readable_tmpfiles: true
            ansible_python_interpreter:    "{{ python_version }}"
          when:
            - ansible_os_family | upper == 'SUSE'
          failed_when:                 false
          changed_when:                false
          register:                    cluster_group_moved

        # move cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} to primary_instance_name
        - name:                        "5.6 SCS/ERS Validation: Move cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} to {{ primary_instance_name }}"
          ansible.builtin.shell:       "pcs resource move g-{{ sap_sid | upper }}_{{ instance_type | upper }} {{ primary_instance_name }}"
          vars:
            allow_world_readable_tmpfiles: true
            ansible_python_interpreter: "{{ python_version }}"
          when:
            - ansible_os_family | upper == 'REDHAT'
          register:                    cluster_group_moved
          failed_when:                 false
          changed_when:                false

        - name:                        "5.6 SCS/ERS Validation: Wait {{ scs_wait_for_start_in_sec }} seconds for the StartService {{ sap_sid | upper }} to finish"
          ansible.builtin.debug:
            msg:                       "Wait for {{ scs_wait_for_start_in_sec }} seconds for the StartService {{ sap_sid | upper }} to finish"

        - name:                        "5.6 SCS/ERS Validation: Wait {{ scs_wait_for_start_in_sec }} seconds for the StartService {{ sap_sid | upper }} to finish"
          ansible.builtin.wait_for:
            timeout:                   "{{ scs_wait_for_start_in_sec }}"

    - name:                            "5.6 SCS/ERS Validation: Validate Cluster resource move and SAP start when the group g-{{ sap_sid | upper }}_{{ instance_type | upper }} has moved"
      when:
        - scs_running_on is not defined
        - ansible_hostname == primary_instance_name
      block:
        - name:                        "Check if cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} is running on {{ primary_instance_name }}"
          ansible.builtin.shell: >-
            set -o pipefail;
            crm_resource --resource g-{{ sap_sid | upper }}_{{ instance_type | upper }} --locate | cut -d ':' -f 2 | cut -d " " -f 2
          vars:
            allow_world_readable_tmpfiles: true
            ansible_python_interpreter:    "{{ python_version }}"

          register:                    cluster_group_location
          failed_when:                 false
          changed_when:                false

        - name:                        "5.6 SCS/ERS Validation: Determine if SCS is running on {{ ansible_hostname }}"
          ansible.builtin.shell:       "{{ sapcontrol_path }} -nr {{ scs_instance_number }} -function StartService {{ sap_sid | upper }}"
          changed_when:                false
          failed_when:                 false
          register:                    is_running
          vars:
            allow_world_readable_tmpfiles: true
            ansible_python_interpreter:    "{{ python_version }}"
          args:
            chdir:                         "{{ sapcontrol_path | dirname }}"
          environment:
            ANSIBLE_REMOTE_TEMP:       "{{ tmp_directory }}/{{ sap_sid | upper }}"
            TEMPDIR:                   "{{ tmp_directory }}/{{ sap_sid | upper }}"
            PATH:                      /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64:/usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/home/{{ sap_sid | lower }}adm:/usr/sap/hostctrl/exe
            DIR_LIBRARY:               /usr/sap/{{ sap_sid | upper }}/SYS/exe/run
            LD_LIBRARY_PATH:           /usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/usr/sap/{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64
            SAPSYSTEMNAME:             "{{ sap_sid | upper }}"

        - name:                        "5.6 SCS/ERS Validation: Wait 60 secs for the StartService {{ sap_sid | upper }} to finish"
          ansible.builtin.wait_for:
            timeout:                   60

        # {{ sapcontrol_path }} -nr {{ scs_instance_number }} -function GetProcessList | grep MessageServer | awk '{split($0,result,", "); print result[1],result[3] }'
        - name:                        "5.6 SCS/ERS Validation: Determine if SCS is running on {{ ansible_hostname }}"
          ansible.builtin.shell:       "{{ sapcontrol_path }} -nr {{ scs_instance_number }} -function StartSystem ALL"
          changed_when:                false
          failed_when:                 false
          register:                    is_running
          vars:
            allow_world_readable_tmpfiles: true
            ansible_python_interpreter:    "{{ python_version }}"
          args:
            chdir:                     "{{ sapcontrol_path | dirname }}"
          environment:
            ANSIBLE_REMOTE_TEMP:       "{{ tmp_directory }}/{{ sap_sid | upper }}"
            TEMPDIR:                   "{{ tmp_directory }}/{{ sap_sid | upper }}"
            PATH:                      /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64:/usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/home/{{ sap_sid | lower }}adm:/usr/sap/hostctrl/exe
            DIR_LIBRARY:               /usr/sap/{{ sap_sid | upper }}/SYS/exe/run
            LD_LIBRARY_PATH:           /usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/usr/sap/{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64
            SAPSYSTEMNAME:             "{{ sap_sid | upper }}"

...
