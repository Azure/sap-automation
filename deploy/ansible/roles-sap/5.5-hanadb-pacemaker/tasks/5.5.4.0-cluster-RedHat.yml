---

# RHEL Clustering - Deploy HANA cluster resources
# Azure ref: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/sap-hana-high-availability-rhel

# @TODO Subscribe to subscriptions/repos if required
# This code assumes the deployment is using RHEL SAP image

# SAP HANA Cluster resources
# https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/sap-hana-high-availability-rhel#create-sap-hana-cluster-resources


# +------------------------------------4--------------------------------------*/

- name:                                Optimise the Pacemaker cluster for SAP HANA
  block:
    - name:                            Enable Maintenance mode for the cluster
      ansible.builtin.command:         pcs property set maintenance-mode=true

    - name:                            Ensure the SAP HANA Topology resource is created
      ansible.builtin.shell: >
                                       pcs resource create SAPHanaTopology_{{ db_sid | upper }}_{{ db_instance_number }} SAPHanaTopology
                                       SID={{ db_sid | upper }} InstanceNumber={{ db_instance_number }}
                                       op start timeout=600
                                       op stop timeout=300
                                       op monitor interval=10 timeout=600
                                       clone clone-max=2 clone-node-max=1 interleave=true
      register:                        sap_hana_topology
      failed_when:                     sap_hana_topology.rc > 1

    - name:                            Ensure the SAP HANA resource is created on RHEL 7
      ansible.builtin.shell: >
                                       pcs resource create SAPHana_{{ db_sid | upper }}_{{ db_instance_number }} SAPHana
                                       SID={{ db_sid | upper }} InstanceNumber={{ db_instance_number }}
                                       PREFER_SITE_TAKEOVER=true DUPLICATE_PRIMARY_TIMEOUT=7200
                                       AUTOMATED_REGISTER=false
                                       op start timeout={{ cluster_sap_hana_timeouts.start }}
                                       op stop timeout={{ cluster_sap_hana_timeouts.stop }}
                                       op monitor interval=59 role="Master" timeout={{ cluster_sap_hana_timeouts.monitor_master }}
                                       op monitor interval=61 role="Slave" timeout={{ cluster_sap_hana_timeouts.monitor_slave }}
                                       op promote timeout={{ cluster_sap_hana_timeouts.promote }}
                                       op demote timeout={{ cluster_sap_hana_timeouts.demote }}
                                       master notify=true clone-max=2 clone-node-max=1 interleave=true
      register:                        sap_hana
      failed_when:                     sap_hana.rc > 1
      when:                            ansible_distribution_major_version == "7"

    - name:                            Ensure the SAP HANA resource is created on RHEL 8 or 9
      ansible.builtin.shell: >
                                       pcs resource create SAPHana_{{ db_sid | upper }}_{{ db_instance_number }} SAPHana
                                       SID={{ db_sid | upper }} InstanceNumber={{ db_instance_number }}
                                       PREFER_SITE_TAKEOVER=true DUPLICATE_PRIMARY_TIMEOUT=7200
                                       AUTOMATED_REGISTER=false
                                       op start timeout={{ cluster_sap_hana_timeouts.start }}
                                       op stop timeout={{ cluster_sap_hana_timeouts.stop }}
                                       op monitor interval=59 role="Master" timeout={{ cluster_sap_hana_timeouts.monitor_master }}
                                       op monitor interval=61 role="Slave" timeout={{ cluster_sap_hana_timeouts.monitor_slave }}
                                       op promote timeout={{ cluster_sap_hana_timeouts.promote }}
                                       op demote timeout={{ cluster_sap_hana_timeouts.demote }}
                                       promotable meta notify=true clone-max=2 clone-node-max=1 interleave=true
      register:                        sap_hana
      failed_when:                     sap_hana.rc > 1
      when:                            ansible_distribution_major_version in ["8", "9"]

    - name:                            Ensure the netcat resource for the Load Balancer Healthprobe is created
      ansible.builtin.command:         pcs resource create nc_{{ db_sid | upper }}_{{ db_instance_number }} azure-lb port=625{{ db_instance_number }}
      register:                        netcat
      failed_when:                     netcat.rc > 1

    - name:                            Ensure the Virtual IP resource for the Load Balancer Front End IP is created
      ansible.builtin.command:         pcs resource create vip_{{ db_sid | upper }}_{{ db_instance_number }} IPaddr2 ip="{{ db_lb_ip }}"
      register:                        vip
      failed_when:                     vip.rc > 1

    - name:                            Ensure the Virtual IP group resource is created
      ansible.builtin.command:         pcs resource group add g_ip_{{ db_sid | upper }}_{{ db_instance_number }} nc_{{ db_sid | upper }}_{{ db_instance_number }} vip_{{ db_sid | upper }}_{{ db_instance_number }}
      register:                        vip_g
      failed_when:                     vip_g.rc > 1

    - name:                            Ensure the order constraint for the SAP HANA Topology is configured on RHEL 7
      ansible.builtin.command:         pcs constraint order SAPHanaTopology_{{ db_sid | upper }}_{{ db_instance_number }}-clone then SAPHana_{{ db_sid | upper }}_{{ db_instance_number }}-master symmetrical=false
      register:                        constraint
      failed_when:                     constraint.rc > 1
      when:                            ansible_distribution_major_version == "7"

    - name:                            Ensure the Virtual IP group is configured to the Master node on RHEL 7
      ansible.builtin.command:         pcs constraint colocation add g_ip_{{ db_sid | upper }}_{{ db_instance_number }} with master SAPHana_{{ db_sid | upper }}_{{ db_instance_number }}-master 4000
      register:                        constraint
      failed_when:                     constraint.rc > 1
      when:                            ansible_distribution_major_version == "7"

    - name:                            Ensure the order constraint for the SAP HANA Topology is configured on RHEL 8 or 9
      ansible.builtin.command:         pcs constraint order SAPHanaTopology_{{ db_sid | upper }}_{{ db_instance_number }}-clone then SAPHana_{{ db_sid | upper }}_{{ db_instance_number }}-clone symmetrical=false
      register:                        constraint
      failed_when:                     constraint.rc > 1
      when:                            ansible_distribution_major_version in ["8", "9"]

    - name:                            Ensure the Virtual IP group is configured to the Master node on RHEL 8 or 9
      ansible.builtin.command:         pcs constraint colocation add g_ip_{{ db_sid | upper }}_{{ db_instance_number }} with master SAPHana_{{ db_sid | upper }}_{{ db_instance_number }}-clone 4000
      register:                        constraint
      failed_when:                     constraint.rc > 1
      when:                            ansible_distribution_major_version in ["8", "9"]

    - name:                            Disable Maintenance mode for the cluster
      ansible.builtin.command:         pcs property set maintenance-mode=false

    - name:                            Wait until cluster has stabilized on RHEL 7
      ansible.builtin.shell:           set -o pipefail && pcs status | grep '^Online:'
      register:                        cluster_stable_check
      retries:                         12
      delay:                           10
      until:                           "(primary_instance_name + ' ' + secondary_instance_name) in cluster_stable_check.stdout or (secondary_instance_name + ' ' + primary_instance_name) in cluster_stable_check.stdout"
      when:                            ansible_distribution_major_version != "8" and ansible_distribution_major_version != "9"
    # '*' is a special character in regexp and needs to be escaped for literal matching
    # if we are worried about character spacing across distros we can match for '\* Online:'
    - name:                            Wait until cluster has stabilized on RHEL 8 or 9
      ansible.builtin.shell:           set -o pipefail && pcs status | grep '^  \* Online:'
      register:                        cluster_stable_check
      retries:                         12
      delay:                           10
      until:                           "(primary_instance_name + ' ' + secondary_instance_name) in cluster_stable_check.stdout or (secondary_instance_name + ' ' + primary_instance_name) in cluster_stable_check.stdout"
      when:                            ansible_distribution_major_version in ["8", "9"]

    # - name:                            Ensure Cluster resources are started
    #   ansible.builtin.shell:           pcs status | grep '\* Started:'
    #   register:                        hana_pcs_cluster_resource_check
    #   when:                            ansible_distribution_major_version == "8"

    # - name:                            Ensure Cluster resources are started
    #   ansible.builtin.shell:           pcs status | grep '^Started '
    #   register:                        hana_pcs_cluster_resource_check
    #   when:                            ansible_distribution_major_version != "8"


    # - name:                            Ensure Cluster resources are started
    # ansible.builtin.debug:
    #   var:                           hana_pcs_cluster_resource_check
# the leading spaces are irrelevant here as we are looking for *<space>Started:
    - name:                            Ensure Cluster resources are started on RHEL 7
      ansible.builtin.shell:           set -o pipefail && pcs resource show | grep '    Started:'
      register:                        hana_cluster_resource_check
      retries:                         12
      delay:                           10
      until:                           "(primary_instance_name + ' ' + secondary_instance_name) in hana_cluster_resource_check.stdout or (secondary_instance_name + ' ' + primary_instance_name) in hana_cluster_resource_check.stdout"
      when:                            ansible_distribution_major_version != "8" and ansible_distribution_major_version != "9"

    - name:                            Ensure Cluster resources are started on RHEL 8 or 9
      ansible.builtin.shell:           set -o pipefail && pcs resource status | grep '\* Started:'
      register:                        hana_cluster_resource_check
      retries:                         12
      delay:                           10
      until:                           "(primary_instance_name + ' ' + secondary_instance_name) in hana_cluster_resource_check.stdout or (secondary_instance_name + ' ' + primary_instance_name) in hana_cluster_resource_check.stdout"
      when:                            ansible_distribution_major_version in ["8", "9"]
  when: ansible_hostname == primary_instance_name

# End of HANA clustering resources
