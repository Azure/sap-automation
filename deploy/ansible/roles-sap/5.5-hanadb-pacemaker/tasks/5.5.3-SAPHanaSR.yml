---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |  Implement the Python system replication hook SAPHanaSR                    |
# |  Ref: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/sap-hana-high-availability
# |  Begin: configuration for SAPHanaSR python hook                            |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                HANA 2.0 only - Implement the Python system replication hook SAPHanaSR
  when:
    - hdb_version[0:2] == "2."
  block:

    - name:                            Ensure a list of package version is available for checking the SAPHanaSR package version
      ansible.builtin.package_facts:

    # - name:                            Verify that package SAPHanaSR is at least version 0.153
    #   ansible.builtin.package:
    #     name:                          SAPHanaSR>=0.153
    #     state:                         present
    #   when:
    #     - ansible_os_family | upper == "SUSE"
    #     - ansible_facts.packages['SAPHanaSR'] is defined
    #     - (ansible_facts.packages['SAPHanaSR'][0].version | float) < 0.153

    - name:                            "Ensure SAPHanaSR package is installed"
      ansible.builtin.package:
        name:                          SAPHanaSR
        state:                         present
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR'] is not defined

    - name:                            "Verify SAPHanaSR package version is greater than 0.153"
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['SAPHanaSR'][0].version is version('0.153', '>=')
        fail_msg:                      "SAPHanaSR version is not greater than 0.153"
        success_msg:                   "SAPHanaSR version is greater than 0.153"
      register:                        saphanasr_version
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR'] is defined

    - name:                            "HANA HSR: - Check HANA DB Version and register"
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         /hana/shared/{{ db_sid | upper }}/HDB{{ db_instance_number }}/HDB version
      register:                        hdb_version_output
      changed_when:                    false

    - name:                            "Extract SAP HANA version number"
      ansible.builtin.set_fact:
        hana_version_str: "{{ hdb_version_output.stdout | regex_search('version:\\s+([\\d\\.]+)', '\\1') | first }}"

    - name:                            "Assert SAP HANA version is greater than SAP HANA 2.0 SP5"
      ansible.builtin.assert:
        that:
          - hana_version_str is version('2.00.050', '>=')
        fail_msg:                      "Installed HANA version is not greater than SAP HANA 2.0 SP5"
        success_msg:                   "Installed HANA version is greater than SAP HANA 2.0 SP5"
      register:                        hana_sp_version
      when:
        - ansible_os_family | upper == "SUSE"
        - hdb_version_output.stdout is search("version")

    - name:                            "Set fact (is_susChkSrv_ready) to determine if susChkSrv is ready to be configured"
      ansible.builtin.set_fact:
        is_susChkSrv_ready:            true
      when:
        - ansible_os_family | upper == "SUSE"
        - hdb_version_output.stdout is search("version")
        - saphanasr_version is defined
        - saphanasr_version is success
        - hana_sp_version is defined
        - hana_sp_version is success

    - name:                            "Set fact that susChkSrv is ready to be configured"
      ansible.builtin.set_fact:
        configure_susChkSrv:           "{{ (is_susChkSrv_ready is defined and is_susChkSrv_ready) | ternary(true, false) }}"


    - name:                            Check if "myHooks" file exists in /hana/shared directory
      ansible.builtin.stat:
        path:                          /hana/shared/myHooks
      register:                        my_hooks_stat

    - name:                            Stop HANA System on both nodes
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }} -function StopSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_stopped

    - name:                            Wait 2 minutes for SAP system to stop
      ansible.builtin.pause:
        seconds:                       120

    - name:                            copy SAPHanaSR.py (SUSE)
      ansible.builtin.copy:
        src:                           /usr/share/SAPHanaSR/SAPHanaSR.py
        dest:                          /hana/shared/myHooks/
        remote_src:                    true
        owner:                         root
        group:                         root      # TODO - check the correct group once the python hook package is installed
        mode:                          '0644'
      when:
        - ansible_os_family | upper == "SUSE"
        - not my_hooks_stat.stat.exists

    - name:                            copy SAPHanaSR.py (RHEL)
      ansible.builtin.copy:
        src:                           /usr/share/SAPHanaSR/srHook/SAPHanaSR.py
        dest:                          /hana/shared/myHooks/
        remote_src:                    true
        owner:                         root
        group:                         root      # TODO - check the correct group once the python hook package is installed
        mode:                          '0644'
      when:
        - ansible_os_family | upper == "REDHAT"
        - not my_hooks_stat.stat.exists

    - name:                            Change ownership of the directory
      ansible.builtin.file:
        path:                          /hana/shared/myHooks
        state:                         directory
        recurse:                       true
        owner:                         "{{ db_sid | lower }}adm"
        group:                         sapsys

    - name:                            Adjust global.ini on each cluster node
      ansible.builtin.blockinfile:
        path:                          /hana/shared/{{ db_sid | upper }}/global/hdb/custom/config/global.ini
        block: |
                                       [ha_dr_provider_SAPHanaSR]
                                       provider = SAPHanaSR
                                       path = /hana/shared/myHooks
                                       execution_order = 1

                                       [trace]
                                       ha_dr_saphanasr = info
      when:
        - not configure_susChkSrv

    - name:                            Adjust global.ini on each cluster node
      ansible.builtin.blockinfile:
        path:                          /hana/shared/{{ db_sid | upper }}/global/hdb/custom/config/global.ini
        block: |
                                       [ha_dr_provider_SAPHanaSR]
                                       provider = SAPHanaSR
                                       path = /usr/share/SAPHanaSR
                                       execution_order = 1

                                       [ha_dr_provider_suschksrv]
                                       provider = susChkSrv
                                       path = /usr/share/SAPHanaSR
                                       execution_order = 3
                                       action_on_lost = fence

                                       [trace]
                                       ha_dr_saphanasr = info
      when:
        - configure_susChkSrv
        - ansible_os_family | upper == "SUSE"

    - name:                            Start HANA System on both nodes
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }} -function StartSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_started

    - name:                            Wait 5 minutes for SAP system to start
      ansible.builtin.pause:
        seconds:                       300

    - name:                           Start HANA Database
      ansible.builtin.import_tasks:   ../../../roles-misc/0.4-helpers/tasks/04.01-start_hana.yml

    # old command:
    #     awk '/ha_dr_SAPHanaSR.*crm_attribute/ { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_*
    # Verify that the hook script is working as expected.
    - name:                            Pause to give HANA replication time to stabilize
      ansible.builtin.pause:
        seconds:                       "{{ hsr_status_report_wait_in_s }}"

    - name:                            Verify that the hook script is working as expected"
      when:                            inventory_hostname == primary_instance_name
      block:
        - name:                        "Verify the hook Installation"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       awk '/ha_dr_SAPHanaSR.*crm_attribute/ \
                                       { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_* | tail -n 1
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ hostvars[primary_instance_name]['virtual_host'] }}/trace
          register:                    saphanasr
          until:                       saphanasr.stdout is search("SOK")
          retries:                     10
          delay:                       30
          when:                        inventory_hostname == primary_instance_name
      rescue:
        - name:                        "[Rescue] - Pause to give HANA replication time to stabilize"
          ansible.builtin.pause:
            seconds:                   "{{ rescue_hsr_status_report_wait_in_s }}"

        - name:                        "[Rescue] - Verify the hook Installation"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       awk '/ha_dr_SAPHanaSR.*crm_attribute/ \
                                       { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_* | tail -n 1
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ hostvars[primary_instance_name]['virtual_host'] }}/trace
          register:                    saphanasr
          until:                       saphanasr.stdout is search("SOK")
          retries:                     10
          delay:                       30
          when:                        inventory_hostname == primary_instance_name

    - name:                            "Log that the hook script is working as expected"
      block:

        - name:                        "Debug (saphanasr)"
          ansible.builtin.debug:
            var:                       saphanasr
            verbosity:                 2

        - name:                        "set_fact (saphanasr)"
          ansible.builtin.set_fact:
            hsr_result:                saphanasr.stdout

        - name:                        "Debug (hsr_result)"
          ansible.builtin.debug:
            var:                       hsr_result
            verbosity:                 2

        - name:                        "Assert HSR Hook verification is successful"
          ansible.builtin.assert:
            that:
              - "'SFAIL' != hsr_result"
            fail_msg:                  "Unable to determine if HSR Hook is working"
      when:                            inventory_hostname == primary_instance_name

    - name:                                Verify the hook Installation
      ansible.builtin.debug:
        var:                               saphanasr
        verbosity:                         2

    # - name:                            "Ensure the cluster is started on all nodes"
    #   ansible.builtin.command:         pcs cluster start --all
    #   changed_when:                    false
    #   when:                            inventory_hostname == primary_instance_name

# End of configuration for SAPHanaSR python hook
