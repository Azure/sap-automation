---

# RHEL Clustering - Deploy HANA cluster resources
# Azure ref: https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/sap-hana-high-availability-rhel

# @TODO Subscribe to subscriptions/repos if required
# This code assumes the deployment is using RHEL SAP image

# SAP HANA Cluster resources prep for ANF
# https://learn.microsoft.com/en-us/azure/sap/workloads/sap-hana-high-availability-netapp-files-red-hat


# +------------------------------------4--------------------------------------*/
- name:                            "Backward Compatibility - Check required Database HA variables"
  ansible.builtin.set_fact:
    database_high_availability:    "{{ db_high_availability | default(false) }}"
  when:
    - db_high_availability is defined
    - database_high_availability is not defined

# We set this to prevent code overflow. Since pacemaker code for both AFS and ANF are the same barring NFS mount options, we parameterize this parameter.
- name:                            "NFS Compatibility - set mount options based on NFS source"
  ansible.builtin.set_fact:
    nfs_mount_options:             "{% if NFS_provider == 'ANF' %}bind,defaults,rw,hard,rsize=262144,wsize=262144,proto=tcp,noatime,_netdev,nfsvers=4.1,lock,sec=sys{% else %}bind,defaults,rw,hard,proto=tcp,noatime,nfsvers=4.1,lock{% endif %}"

- name:                            "Scale-Out Cluster Compatibility - Fetch majority maker node name"
  ansible.builtin.set_fact:
    majority_maker:                "{{ (query('inventory_hostnames', '{{ sap_sid | upper }}_OBSERVER_DB'))[0] }}"

  # Ref : https://learn.microsoft.com/en-us/azure/sap/workloads/sap-hana-high-availability-scale-out-hsr-rhel?tabs=lb-portal#create-file-system-resources
- name:                            "Configure the HANA Shared file system resources"
  when:
    - database_high_availability
    - hana_shared_mountpoint is defined
    - hana_shared_mountpoint | length > 1
    - platform | upper == 'HANA'
  block:
    - name:                            "Get the cluster maintenance mode status"
      ansible.builtin.shell:           pcs property show maintenance-mode
      register:                        get_status_maintenance_mode
      changed_when:                    false
      ignore_errors:                   true

    - name:                            "Disable the cluster maintenance mode if not already in maintenance mode"
      ansible.builtin.shell:           pcs property set maintenance-mode=true
      when: >-
        get_status_maintenance_mode.stdout is not search('maintenance-mode') or
        get_status_maintenance_mode.stdout is search('maintenance-mode: false')
        ansible_hostname == primary_instance_name

    # Should run on Primary and secondary nodes only.
    - name:                            Stop HANA Services on both sites
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }}  -function StopSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_stopped
      when:
        - ansible_hostname in ["{{ primary_instance_name }}","{{ secondary_instance_name }}"]

    - name:                            Wait 2 minutes for SAP system to stop
      ansible.builtin.pause:
        seconds:                       120

    # Ref :https://learn.microsoft.com/en-us/azure/sap/workloads/sap-hana-high-availability-scale-out-hsr-rhel?tabs=lb-portal#create-file-system-resources
    # Pacemaker will control where and when /hana/shared will be mounted. All remaining volumes are mounted on managed disks.
    - name:                           "Comment out the mountpoints on HANA node from '/etc/fstab' file"
      ansible.builtin.replace:
        path:                      /etc/fstab
        regexp:                    "^{{ item }}"
        replace:                   "# {{ item }}"
        backup:                    true
      loop:
        - "{{ hana_shared_mountpoint[0] }}"
        - "{{ hana_shared_mountpoint[1] }}"

    # - name:                           "Un-mount /hana/shared on all participating HANA nodes"
    #   block:
    #     # - name:                        Stop processes using /hana/shared and /usr/sap/{{ db_sid | upper }} path
    #     #   become: true
    #     #   ansible.builtin.shell: >
    #     #                                ps -ef | grep "/hana/shared" | grep -v grep | awk '{print $2}' | xargs kill -9;
    #     #                                ps -ef | grep "/usr/sap/{{ db_sid | upper }}" | grep -v grep | awk '{print $2}' | xargs kill -9

    #     - name:                        Unmount /hana/shared
    #       ansible.builtin.mount:
    #         path:                      /hana/shared
    #         state:                     unmounted


    # These tasks will run on primary node/first node in the DB list as these are pacemaker configurations
    - name:                            "Configure HANA Shared mounts on {{ primary_instance_name }}"
      when:                            ansible_hostname == primary_instance_name
      block:
        - name:                        "Configure filesystem resource in Pacemaker for HSR sites"
          ansible.builtin.shell: >
                                       pcs resource create fs_hana_shared_{{ item.site_code | lower }} --disabled ocf:heartbeat:Filesystem \
                                       device="{{ item.fs_mount }}" directory="{{ item.fs_dir }}" fstype="nfs" \
                                       options="{{ nfs_mount_options }}" \
                                       op monitor interval=20s on-fail=fence timeout=120s OCF_CHECK_LEVEL=20 \
                                       op start internal=0 timeout=120 op stop interval=0 timeout=120
          register:                    nfs_mounts_sites
          failed_when:                 false
          ignore_errors:               true
          loop:
            - { site_code: 'S1',fs_mount: '{{ hana_shared_mountpoint[0] }}', fs_dir: '/hana/shared' }
            - { site_code: 'S2',fs_mount: '{{ hana_shared_mountpoint[1] }}', fs_dir: '/hana/shared' }
          loop_control:
            loop_var:                  item
            index_var:                 my_idx

        - name:                        "Clone the /hana/shared file system resource for both sites"
          ansible.builtin.shell: >
                                       pcs resource clone fs_hana_shared_{{ item.site_code | lower}} meta clone-node-max=1 interleave=true
          register:                    nfs_mounts_clones
          failed_when:                 false
          ignore_errors:               true
          loop:
            - { site_code: 'S1' }
            - { site_code: 'S2' }
          loop_control:
            loop_var:                  item
            index_var:                 my_idx

        - name:                        "Configure location constraints and attribute resources"
          block:
          - name:                        "Configure site node attributes for primary site nodes"
            ansible.builtin.shell: >
                                         pcs node attribute {{ item.hostname }} NFS_SID_SITE=S1
            register:                    is_nfs_primary_site_configured
            failed_when:                 false
            ignore_errors:               true
            loop:
              - ansible_play_hosts_all[0::2]
            loop_control:
              loop_var:                  item

          - name:                        "Configure site node attributes for secondary site nodes"
            ansible.builtin.shell: >
                                         pcs node attribute {{ item.hostname }} NFS_SID_SITE=S2
            register:                    is_nfs_secondary_site_configured
            failed_when:                 false
            ignore_errors:               true
            loop:
              - ansible_play_hosts_all[1::2]
            loop_control:
              loop_var:                  item

          - name:                        "Configure location constraints"
            ansible.builtin.shell: >
                                         pcs constraint location fs_hana_shared_{{ item.site_code | lower }}-clone rule resource-discovery=never score=-INFINITY NFS_SID_SITE ne {{ item._site_code | upper }}
            register:                    nfs_location_constraints
            failed_when:                 false
            ignore_errors:               true
            loop:
              - { site_code: "S1" }
              - { site_code: "S2" }
            loop_control:
              loop_var:                  item
            when:                        is_nfs_secondary_configured and is_nfs_primary_configured

          - name:                        "Enable NFS resource constraint"
            ansible.builtin.shell: >
                                         pcs resource enable fs_hana_shared_{{ item.site_code | lower }}
            register:                    nfs_location_constraints_activation
            failed_when:                 false
            ignore_errors:               true
            loop:
              - { site_code: "S1" }
              - { site_code: "S2" }
            loop_control:
              loop_var:                  item
              index_var:                 my_idx
            when:                        is_nfs_secondary_site_configured and is_nfs_primary_site_configured

          - name:                        Configure the nfs attribute resources
            ansible.builtin.shell: >
                                         pcs resource create hana_nfs_{{ item.site_code | lower }}_active ocf:pacemaker:attribute active_value=true inactive_value=false name=hana_nfs_{{ item.site_code | lower }}_active
            loop:
              - { site_code: "S1" }
              - { site_code: "S2" }
            loop_control:
              loop_var:                  item

          - name:                        Clone the nfs attribute resources
            ansible.builtin.shell: >
                                        pcs resource clone hana_nfs_{{ item.site_code | lower }}_active meta clone-node-max=1 interleave=true
            loop:
              - { site_code: "S1" }
              - { site_code: "S2" }
            loop_control:
              loop_var:                  item

          - name:                        Configure the constraints for NFS attribute resources
            ansible.builtin.shell: >
                                        pcs constraint order fs_hana_shared_{{ item.site_code | lower }}-clone then hana_nfs_{{ item.site_code | lower }}_active-clone
            loop:
              - { site_code: "S1" }
              - { site_code: "S2" }
            loop_control:
              loop_var:                  item


          - name:                        "pause for 2 minutes"
            ansible.builtin.pause:
              seconds:                   120

          - name:                        "Enable filesystem resource in Pacemaker"
            ansible.builtin.shell: >
                                         pcs resource enable fs_hana_shared_{{ item.site_code | lower }}
            register:                    nfs_mounts_enable_node1
            failed_when:                 false
            ignore_errors:               true
            loop:
              - { site_code: 'S1' }
              - { site_code: 'S2' }
            loop_control:
              loop_var:                  item


    # validation tasks to be run on all HANA hosts for checking /hana/shared is accessible
    - name:                            "Validate /hana/shared is mounted on all HANA hosts"
      block:
        - name:                        "Check if NFS share is mounted on primary site nodes"
          ansible.builtin.shell: >
                                       nfsstat -m | grep "{{ target }}"
          register:                    nfs_mount_check_{{ ansible_hostname }}
          failed_when:                 nfs_mount_check.rc != 0
          vars:
            target:                    hana_shared_mountpoint[0]
          when:                        ansible_hostname in ansible_play_hosts_all[0::2]

        - name:                        "Check if NFS share is mounted on secondary site nodes"
          ansible.builtin.shell: >
                                       nfsstat -m | grep "{{ target }}"
          register:                    nfs_mount_check_{{ ansible_hostname }}
          failed_when:                 nfs_mount_check.rc != 0
          vars:
            target:                    hana_shared_mountpoint[1]
          when:                        ansible_hostname in ansible_play_hosts_all[1::2]

        # - name:                        "Fail when NFS share is not mounted on primary site nodes"
        #   ansible.builtin.fail:
        #     msg:                       "NFS share is not mounted on {{ ansible_hostname }}"
        #   when:                        nfs_mount_check_{{ ansible_hostname }}.rc != 0

    - name:                            Start HANA System on both nodes
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }} -function StartSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_started

    - name:                            Wait 5 minutes for SAP system to start
      ansible.builtin.pause:
        seconds:                       300
# End of HANA clustering resources
