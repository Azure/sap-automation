---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |  Implement the Python system replication hook SAPHanaSR-ScaleOut                    |
# |  Ref: https://learn.microsoft.com/en-us/azure/sap/workloads/sap-hana-high-availability-scale-out-hsr-suse#implement-hana-ha-hooks-saphanasrmultitarget-and-suschksrv
# |  Begin: configuration for SAPHanaSR-ScaleOut python hook                            |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- name:                                HANA 2.0 only - Implement the Python system replication hook SAPHanaSR-ScaleOut MultiTarget
  when:
    - hdb_version[0:2] == "2."
    - node_tier == 'hana'
    - db_scale_out
    - db_high_availability
  block:
    - name:                            Generate list of deployed packages on current host
      ansible.builtin.package_facts:

    # SAPHanaSR-ScaleOut conflicts with SAPHanaSR and dependencies
    - name:                            "Ensure SAPHanaSR package is absent"
      ansible.builtin.package:
        name:                          SAPHanaSR
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR'] is defined

    - name:                            "Ensure SAPHanaSR-doc package is absent"
      ansible.builtin.package:
        name:                          SAPHanaSR-doc
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-doc'] is defined

    - name:                            "Ensure yast2-sap-ha package is absent"
      ansible.builtin.package:
        name:                          yast2-sap-ha
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['yast2-sap-ha'] is defined

    # Ensure SAPHANA SR Scaleout package is installed
    - name:                            "Ensure SAPHanaSR-ScaleOut package is installed"
      ansible.builtin.package:
        name:                          SAPHanaSR-ScaleOut
        state:                         present
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-ScaleOut'] is not defined

    - name:                            "Ensure SAPHanaSR-ScaleOut-doc package is installed"
      ansible.builtin.package:
        name:                          SAPHanaSR-ScaleOut-doc
        state:                         present
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-ScaleOut-doc'] is not defined

    # for RHEL, ensure resource-agents-sap-hana-scaleout is installed
    - name:                            "Ensure resource-agents-sap-hana-scaleout  is installed (REDHAT)"
      ansible.builtin.package:
        name:                          resource-agents-sap-hana-scaleout
        state:                         present
      when:
        - ansible_os_family | upper == "REDHAT"
        - ansible_facts.packages['resource-agents-sap-hana-scaleout'] is not defined

    - name:                            "Verify SAPHanaSR-ScaleOut package version is greater than 0.180"
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['SAPHanaSR-ScaleOut'][0].version is version('0.180', '>=')
        fail_msg:                      "SAPHanaSR-ScaleOut version is not greater than 0.180"
        success_msg:                   "SAPHanaSR-ScaleOut version is greater than 0.180"
      register:                        saphanasr_scaleout_version
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-ScaleOut'] is defined

    - name:                            "HANA HSR: - Check HANA DB Version and register"
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         /hana/shared/{{ db_sid | upper }}/HDB{{ db_instance_number }}/HDB version
      register:                        hdb_version_output
      changed_when:                    false

    - name:                            "Extract SAP HANA version number"
      ansible.builtin.set_fact:
        hana_version_str: "{{ hdb_version_output.stdout | regex_search('version:\\s+([\\d\\.]+)', '\\1') | first }}"

    - name:                            "Assert SAP HANA version is greater than SAP HANA 2.0 SP5"
      ansible.builtin.assert:
        that:
          - hana_version_str is version('2.00.050', '>=')
        fail_msg:                      "Installed HANA version is not greater than SAP HANA 2.0 SP5"
        success_msg:                   "Installed HANA version is greater than SAP HANA 2.0 SP5"
      register:                        hana_sp_version
      when:
        - ansible_os_family | upper == "SUSE"
        - hdb_version_output.stdout is search("version")

    - name:                            "Set fact (is_susTkOver_ready) to determine if susTkOver is ready to be configured"
      ansible.builtin.set_fact:
        is_susTkOver_ready:            true
      when:
        - ansible_os_family | upper == "SUSE"
        - hdb_version_output.stdout is search("version")
        - saphanasr_scaleout_version is defined
        - saphanasr_scaleout_version is success
        - hana_sp_version is defined
        - hana_sp_version is success

    - name:                            "Set fact that susTkOver is ready to be configured"
      ansible.builtin.set_fact:
        configure_susTkOver:           "{{ (is_susTkOver_ready is defined and is_susTkOver_ready) | ternary(true, false) }}"

    - name:                            Check if "myHooks" file exists in /hana/shared directory
      ansible.builtin.stat:
        path:                          /hana/shared/myHooks
      register:                        my_hooks_stat

    - name:                            Stop HANA System on both sites
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }} -function StopSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_stopped
      when:
        - ansible_hostname == primary_instance_name or ansible_hostname == secondary_instance_name

    - name:                            Wait 2 minutes for SAP system to stop
      ansible.builtin.pause:
        seconds:                       120

# This is not needed any more as we are going to use the default path of the hook script installed by the package.
    # - name:                            copy SAPHanaSR-ScaleOut.py (SUSE)
    #   ansible.builtin.copy:
    #     src:                           /usr/share/SAPHanaSR-ScaleOut/SAPHanaSR-ScaleOut.py
    #     dest:                          /hana/shared/myHooks/
    #     remote_src:                    true
    #     owner:                         root
    #     group:                         root      # TODO - check the correct group once the python hook package is installed
    #     mode:                          '0644'
    #   when:
    #     - ansible_os_family | upper == "SUSE"
    #     - not my_hooks_stat.stat.exists

    - name:                            copy /usr/share/SAPHanaSR-ScaleOut/SAPHanaSR.py to /hana/shared/myHooks/ (RHEL)
      ansible.builtin.copy:
        src:                           /usr/share/SAPHanaSR-ScaleOut/SAPHanaSR.py
        dest:                          /hana/shared/myHooks/
        remote_src:                    true
        owner:                         root
        group:                         root      # TODO - check the correct group once the python hook package is installed
        mode:                          '0644'
      when:
        - ansible_os_family | upper == "REDHAT"
        - not my_hooks_stat.stat.exists

    - name:                            Change ownership of the directory
      ansible.builtin.file:
        path:                          /hana/shared/myHooks
        state:                         directory
        recurse:                       true
        owner:                         "{{ db_sid | lower }}adm"
        group:                         sapsys

    - name:                                "Prepare global.ini for host name resolution"
      community.general.ini_file:
        path:                              "/hana/shared/{{ db_sid | upper }}/global/hdb/custom/config/global.ini"
        section:                           "system_replication_hostname_resolution"
        mode:                              0644
        state:                             present
        option:                            "{{ hostvars[item].ansible_host }}"
        value:                             "{{ hostvars[item].virtual_host }}"
      with_items:
        - "{{ groups[(sap_sid | upper)~'_DB' ] }}"

# susTkOver is not available on REDHAT
    - name:                            Adjust global.ini on each cluster node ( RHEL without susChkSrv/susTkOver )
      ansible.builtin.blockinfile:
        path:                          /hana/shared/{{ db_sid | upper }}/global/hdb/custom/config/global.ini
        block: |
                                       [ha_dr_provider_SAPHanaSR]
                                       provider = SAPHanaSR
                                       path = /hana/shared/myHooks
                                       execution_order = 1

                                       [trace]
                                       ha_dr_saphanasr = info
      when:
        - not configure_susTkOver
        - ansible_os_family | upper == "RHEL"
        - ansible_hostname == primary_instance_name or ansible_hostname == secondary_instance_name

    - name:                            Adjust global.ini on each cluster node ( with susChkSrv/susTkOver )
      ansible.builtin.blockinfile:
        path:                          /hana/shared/{{ db_sid | upper }}/global/hdb/custom/config/global.ini
        block: |
                                       [ha_dr_provider_saphanasrmultitarget]
                                       provider = SAPHanaSrMultiTarget
                                       path = /usr/share/SAPHanaSR-ScaleOut/
                                       execution_order = 1

                                       [ha_dr_provider_sustkover]
                                       provider = susTkOver
                                       path = /usr/share/SAPHanaSR-ScaleOut/
                                       execution_order = 2
                                       sustkover_timeout = 30

                                       [trace]
                                       ha_dr_saphanasrmultitarget = info
                                       ha_dr_sustkover = info
      when:
        - configure_susTkOver
        - ansible_os_family | upper == "SUSE"
        - ansible_hostname == primary_instance_name or ansible_hostname == secondary_instance_name

    # Ref: https://documentation.suse.com/sbp/sap-15/html/SLES4SAP-hana-scaleOut-PerfOpt-15/index.html#id-integrating-sap-hana-with-the-cluster
    # Note: Azure documentation is outdated w.r.t to SAP HANA hook.
    - name:                            Create sudoers file for /etc/sudoers.d/20-saphana for SLES
      ansible.builtin.template:
        src:                               "20-saphana-suse.j2"
        dest:                              "/etc/sudoers.d/20-saphana"
        mode:                              "0440"
        owner:                             root
        group:                             root
        # validate:                          /usr/sbin/visudo -cf %s
      when:
        - ansible_os_family | upper == "SUSE"

    # Ref: https://learn.microsoft.com/en-us/azure/sap/workloads/sap-hana-high-availability-scale-out-hsr-rhel?tabs=lb-portal#create-sap-hana-cluster-resources
    - name:                            Create sudoers file for /etc/sudoers.d/20-saphana for RHEL
      ansible.builtin.template:
        src:                               "20-saphana-rhel.j2"
        dest:                              "/etc/sudoers.d/20-saphana"
        mode:                              "0440"
        owner:                             root
        group:                             root
        # validate:                          /usr/sbin/visudo -cf %s
      when:
        - ansible_os_family | upper == "REDHAT"



    - name:                            Start HANA System on both nodes
      become_user:                     "{{ db_sid | lower }}adm"
      become:                          true
      ansible.builtin.command:         "{{ sapcontrol_command }} -function StartSystem"
      failed_when:                     false
      changed_when:                    false
      register:                        hana_system_started

    - name:                            Wait 5 minutes for SAP system to start
      ansible.builtin.pause:
        seconds:                       300

    # - name:                            Start HANA Database
    #   ansible.builtin.import_tasks:   ../../../roles-misc/0.4-helpers/tasks/04.01-start_hana.yml
    #   when:
    #     - ansible_hostname == primary_instance_name or ansible_hostname == secondary_instance_name

    # old command:
    #     awk '/ha_dr_SAPHanaSR-ScaleOut.*crm_attribute/ { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_*
    # Verify that the SAPHanaSR-ScaleOut hook script is working as expected.
    - name:                            Pause to give HANA replication time to stabilize
      ansible.builtin.pause:
        seconds:                       "{{ hsr_status_report_wait_in_s }}"

# REDHAT only
# This needs to be run on all the nodes that HANA is running.
    - name:                            Verify that the hook script is working as expected (REDHAT)"
      when:
      # - inventory_hostname == primary_instance_name
      - ansible_os_family | upper == "REDHAT"
      block:
        - name:                        "Verify the hook Installation (REDHAT)"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       awk '/ha_dr_SAPHanaSR.*crm_attribute/ \
                                       { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_* | tail -n 1
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ primary_instance_name }}/trace
          register:                    saphanasr
          until:                       saphanasr.stdout is search("SOK")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name
      rescue:
        - name:                        "[Rescue] - Pause to give HANA replication time to stabilize"
          ansible.builtin.pause:
            seconds:                   "{{ rescue_hsr_status_report_wait_in_s }}"

        - name:                        "[Rescue] - Verify the hook Installation (REDHAT)"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       awk '/ha_dr_SAPHanaSR.*crm_attribute/ \
                                       { printf "%s %s %s %s\n",$2,$3,$5,$16 }' nameserver_* | tail -n 1
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ primary_instance_name }}/trace
          register:                    saphanasr
          until:                       saphanasr.stdout is search("SOK")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name


# SUSE only
# Check on all nodes, status of SAPHanaSrMultiTarget Hook
    - name:                            Verify that the hook script is working as expected (SUSE)"
      when:
      # - inventory_hostname == primary_instance_name
      - ansible_os_family | upper == "SUSE"
      block:
        - name:                        "Verify the hook Installation (SUSE)"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       grep SAPHanaSr.*init nameserver_*.trc | tail -3
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ inventory_hostname }}/trace
          register:                    SAPHanaSR_ScaleOut
          until:                       SAPHanaSR_ScaleOut.stdout is search("Running")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name
      rescue:
        - name:                        "[Rescue] - Pause to give HANA replication time to stabilize"
          ansible.builtin.pause:
            seconds:                   "{{ rescue_hsr_status_report_wait_in_s }}"

        - name:                        "[Rescue] - Verify the hook Installation (SUSE)"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       grep SAPHanaSr.*init nameserver_*.trc | tail -3
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ inventory_hostname }}/trace
          register:                    SAPHanaSR_ScaleOut
          until:                       SAPHanaSR_ScaleOut.stdout is search("Running")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name

# SUSE only
# Check on all nodes, status of susTkOver Hook
    - name:                            Verify that the susTkOver hook script is working as expected (SUSE)"
      when:
      # - inventory_hostname == primary_instance_name
      - ansible_os_family | upper == "SUSE"
      - is_susTkOver_ready is defined
      - is_susTkOver_ready == true
      block:
        - name:                        "Verify the hook Installation (SUSE)"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       grep HADR.*load.*susTkOver nameserver_*.trc | tail -3
                                       grep susTkOver.init nameserver_*.trc | tail -3
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ inventory_hostname }}/trace
          register:                    susTkOver
          until:                       susTkOver.stdout is search("susTkOver.init()")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name
      rescue:
        - name:                        "[Rescue] - Pause to give HANA replication time to stabilize"
          ansible.builtin.pause:
            seconds:                   "{{ rescue_hsr_status_report_wait_in_s }}"

        - name:                        "[Rescue] - Verify the hook Installation"
          become_user:                 "{{ db_sid | lower }}adm"
          become:                      true
          ansible.builtin.shell: |
                                       set -o pipefail
                                       grep HADR.*load.*susTkOver nameserver_*.trc | tail -3
                                       grep susTkOver.init nameserver_*.trc | tail -3
          args:
            chdir:                     /usr/sap/{{ db_sid | upper }}/HDB{{ db_instance_number }}/{{ inventory_hostname }}/trace
          register:                    susTkOver
          until:                       susTkOver.stdout is search("susTkOver.init()")
          retries:                     10
          delay:                       30
          # when:                        inventory_hostname == primary_instance_name


    - name:                            "Log that the hook script is working as expected"
      block:

        - name:                        "Debug (SAPHanaSR_ScaleOut)"
          ansible.builtin.debug:
            var:                       SAPHanaSR_ScaleOut
            verbosity:                 2

        - name:                        "set_fact (SAPHanaSR_ScaleOut)"
          ansible.builtin.set_fact:
            hsr_result:                SAPHanaSR_ScaleOut.stdout

        - name:                        "Debug (hsr_result)"
          ansible.builtin.debug:
            var:                       hsr_result
            verbosity:                 2

        - name:                        "Assert HSR Hook verification is successful"
          ansible.builtin.assert:
            that:
              - "'SFAIL' != hsr_result"
            fail_msg:                  "Unable to determine if HSR Hook is working"
      # when:                            inventory_hostname == primary_instance_name

    - name:                            Verify the hook Installation
      ansible.builtin.debug:
        var:                               SAPHanaSR_ScaleOut
        verbosity:                         2

- name:                                Majority Maker only - Implement the Python system replication hook SAPHanaSR-ScaleOut MultiTarget
  when:
    - node_tier == 'observer'
    - ansible_hostname == {{ }}
    - db_scale_out
    - db_high_availability
    - ansible_os_family | upper = "SUSE"
  block:
    - name:                            Generate list of deployed packages on current host
      ansible.builtin.package_facts:

    # SAPHanaSR-ScaleOut conflicts with SAPHanaSR and dependencies
    - name:                            "Ensure SAPHanaSR package is absent"
      ansible.builtin.package:
        name:                          SAPHanaSR
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR'] is defined

    - name:                            "Ensure SAPHanaSR-doc package is absent"
      ansible.builtin.package:
        name:                          SAPHanaSR-doc
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-doc'] is defined

    - name:                            "Ensure yast2-sap-ha package is absent"
      ansible.builtin.package:
        name:                          yast2-sap-ha
        state:                         absent
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['yast2-sap-ha'] is defined

    # Ensure SAPHANA SR Scaleout package is installed
    - name:                            "Ensure SAPHanaSR-ScaleOut package is installed"
      ansible.builtin.package:
        name:                          SAPHanaSR-ScaleOut
        state:                         present
      when:
        - ansible_os_family | upper == "SUSE"
        - ansible_facts.packages['SAPHanaSR-ScaleOut'] is not defined

    - name:                            "Ensure SAPHanaSR-ScaleOut-doc package is installed"

    # - name:                            "Ensure the cluster is started on all nodes"
    #   ansible.builtin.command:         pcs cluster start --all
    #   changed_when:                    false
    #   when:                            inventory_hostname == primary_instance_name
    - name:                            "Ensure resource-agents-sap-hana-scaleout  is installed (REDHAT)"
      ansible.builtin.package:
        name:                          resource-agents-sap-hana-scaleout
        state:                         present
      when:
        - ansible_os_family | upper == "REDHAT"
        - ansible_facts.packages['resource-agents-sap-hana-scaleout'] is not defined
# End of configuration for SAPHanaSR-ScaleOut python hook
