---

# Dynamically determine list of unique disk types associated with
# current node.
disktypes: >-
  {{ disks | selectattr('host', 'defined') |
      selectattr('host', 'equalto', inventory_hostname) |
      map(attribute='type') | sort | unique |
      list }}

multisids: >-
  {{ MULTI_SIDS | map(attribute='sid') | sort | unique | list }}

# Mapping table from disk type to volume group name suffix
disk_type_to_name_map:
  # sapdata1_sid1:  sapdata1_{{ ora_sid1 | lower }}
  # sapdata2_sid1:  sapdata2_{{ ora_sid1 | lower }}
  # sapdata3_sid1:  sapdata3_'{{ ora_sid1 | lower }}'
  # sapdata4_sid1:  sapdata4_'{{ ora_sid1 | lower }}'
  # origloga_sid1:  origlogA_'{{ ora_sid1 | lower }}'
  # origlogb_sid1:  origlogB_'{{ ora_sid1 | lower }}'
  # mirrloga_sid1:  mirrlogA_'{{ ora_sid1 | lower }}'
  # mirrlogb_sid1:  mirrlogB_'{{ ora_sid1 | lower }}'
  # oraarch_sid1:   oraarch_'{{ ora_sid1 | lower }}'
  # sapdata1_sid2:  sapdata1_'{{ ora_sid2 | lower }}'
  # sapdata2_sid2:  sapdata2_'{{ ora_sid2 | lower }}'
  # sapdata3_sid2:  sapdata3_'{{ ora_sid2 | lower }}'
  # sapdata4_sid2:  sapdata4_'{{ ora_sid2 | lower }}'
  # origloga_sid2:  origlogA_'{{ ora_sid2 | lower }}'
  # origlogb_sid2:  origlogB_'{{ ora_sid2 | lower }}'
  # mirrloga_sid2:  mirrlogA_'{{ ora_sid2 | lower }}'
  # mirrlogb_sid2:  mirrlogB_'{{ ora_sid2 | lower }}'
  # oraarch_sid2:   oraarch_'{{ ora_sid2 | lower }}'


# Dynamically determine list of volume groups associated with
# the current node.
volume_groups: "{{ lookup('template', 'volume_groups.j2') }}"

logical_volume_groups: "{{ lookup('template', 'logical_volume_group.j2') }}"


# Table of possible logical volumes that need to be managed.
#
# Each table entry must have the following attributes:
#
#   node_tier:
#       the node tier associated with the entry
#   lv:
#       the name of the LV
#   vg:
#       the name of the VG hosting the LV
#   size:
#       the size of the LV
#
# Optionally table entries can contain the following attributes:
#
#   stripesize:
#       the size of the stripe to use; the stripe count will be
#       dynamically determined from the number of PVs associated
#       with the VG.
#
#   fstype:
#       the type of file system that the LV should be formatted
#       as; if not specified then no file system will be created
#       on the LV.
#
#   fsopts:
#       additional options, if any, that should be passed to the
#       mkfs command when formatting the file system.
#
# logical_volumes:
#   - tier:       'sapos'
#     node_tier:  'all'
#     vg:         'vg_sap'
#     lv:         'lv_usrsap'
#     size:       '64g'
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'web'
#     vg:         'vg_sap'
#     lv:         'lv_sapmnt'
#     size:       '1g'
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'scs'
#     vg:         'vg_sap'
#     lv:         'lv_sapmnt'
#     size:       '128g'
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'scs'
#     vg:         'vg_sap'
#     lv:         'lv_usrsapinstall'
#     size:       '100%FREE'
#     fstype:     'xfs'

# # Adding Tier and disk types for Oracle multi-sid installation non-ASM.
#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         vg_'{{ ora_sid1| lower }}'_sapdata1
#     lv:         lv_'{{ ora_sid1| lower }}'_sapdata1
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         vg_'{{ ora_sid1| lower }}'_sapdata2
#     lv:         lv_'{{ ora_sid1| lower }}'_sapdata2
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'


#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         vg_'{{ ora_sid1| lower }}'_sapdata3
#     lv:         lv_'{{ ora_sid1| lower }}'_sapdata3
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         vg_'{{ ora_sid1| lower }}'_sapdata4
#     lv:         lv_'{{ ora_sid1| lower }}'_sapdata4
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid1| lower }}_origlogA'
#     lv:         'lv_{{ ora_sid1| lower }}_origlogA'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid1| lower }}_origlogB'
#     lv:         'lv_{{ ora_sid1| lower }}_origlogB'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid1| lower }}_mirrlogA'
#     lv:         'lv_{{ ora_sid1| lower }}_mirrlogA'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid1| lower }}_mirrlogB'
#     lv:         'lv_{{ ora_sid1| lower }}_mirrlogB'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid1| lower }}_oraarch'
#     lv:         'lv_{{ ora_sid1| lower }}_oraarch'
#     size:       '100%FREE'
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_sapdata1'
#     lv:         'lv_{{ ora_sid2| lower }}_sapdata1'
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_sapdata2'
#     lv:         'lv_{{ ora_sid2| lower }}_sapdata2'
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'


#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_sapdata3'
#     lv:         'lv_{{ ora_sid2| lower }}_sapdata3'
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_sapdata4'
#     lv:         'lv_{{ ora_sid2| lower }}_sapdata4'
#     size:       '100%FREE'
#     stripesize: 256
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_origlogA'
#     lv:         'lv_{{ ora_sid2| lower }}_origlogA'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_origlogB'
#     lv:         'lv_{{ ora_sid2| lower }}_origlogB'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_mirrlogA'
#     lv:         'lv_{{ ora_sid2| lower }}_mirrlogA'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_mirrlogB'
#     lv:         'lv_{{ ora_sid2| lower }}_mirrlogB'
#     size:       '100%FREE'
#     stripesize: 128
#     fstype:     'xfs'

#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_{{ ora_sid2| lower }}_oraarch'
#     lv:         'lv_{{ ora_sid2| lower }}_oraarch'
#     size:       '100%FREE'
#     fstype:     'xfs'


#   - tier:       'sapos'
#     node_tier:  'oracle-multi-sid'
#     vg:         'vg_oracle'
#     lv:         'lv_oracle'
#     size:       '64g'
#     fstype:     'xfs'

# Define a dynamic expression based upon the 'item' fact that can
# only be used within a loop, that determines the number of PVs
# in associated with the associated VG.
vg_stripecount_from_lv_item: >-
  {{ ((volume_groups | default([{}]) |
       selectattr('vg', 'equalto', item.vg) |
       list | first).pvs | default([])) | count }}

# Define a dynamic expression based upon the 'item' fact that can
# only be used within a loop, that determines the options string
# to pass to the lvol action's opts argument. Will evaluate to
# '-i <num_vg_pvs> -I <stripesize>' only when the LV 'item' has
# stripesize specified, otherwise it will be an empty string.
lvol_opts_from_lv_item: >-
  {{ ('stripesize' in item) |
     ternary('-i ' ~ vg_stripecount_from_lv_item ~
             ' -I ' ~ (item.stripesize | default(0)),
             '') }}

# Define a dynamic expression based upon the 'item' fact that can
# only be used within a loop, that determines the device path for
# a LV device.
dev_path_from_lv_item: >-
  {{ ['/dev', item.vg, item.lv] | join('/') }}
