---

# Dynamically determine list of unique disk types associated with
# current node.
disktypes: >-
  {{ disks | selectattr('host', 'defined') |
      selectattr('host', 'equalto', inventory_hostname) |
      map(attribute='type') | sort | unique |
      list }}

# Dynamically determine list of volume groups associated with
# the current node.
volume_groups: "{{ lookup ('template', 'volume_groups.j2') }}"

# Mapping table from disk type to volume group name suffix
disk_type_to_name_map:
  data:      '{{ node_tier | lower }}_data'
  log:       '{{ node_tier | lower }}_log'
  backup:    '{{ node_tier | lower }}_backup'
  shared:    '{{ node_tier | lower }}_shared'
  sapdata1:  '{{ node_tier | lower }}_sapdata1'
  sapdata2:  '{{ node_tier | lower }}_sapdata2'
  sapdata3:  '{{ node_tier | lower }}_sapdata3'
  sapdata4:  '{{ node_tier | lower }}_sapdata4'
  origloga:  '{{ node_tier | lower }}_origlogA'
  origlogb:  '{{ node_tier | lower }}_origlogB'
  mirrloga:  '{{ node_tier | lower }}_mirrlogA'
  mirrlogb:  '{{ node_tier | lower }}_mirrlogB'
  oraarch:   '{{ node_tier | lower }}_oraarch'
  # ------------------- Begin - disktypes required for Sybase -------------------8
  saplog1:   '{{ node_tier | lower }}_saplog1'
  sybsystem:  '{{ node_tier | lower }}_sybsystem'
  sybsecurity:  '{{ node_tier | lower }}_sybsecurity'
  sybtemp:  '{{ node_tier | lower }}_sybtemp'
  saptemp:  '{{ node_tier | lower }}_saptemp'
  sapdiag:   '{{ node_tier | lower }}_sapdiag'
  sybbackup:    '{{ node_tier | lower }}_sybbackup'
   # ------------------- End - disktypes required for Sybase ---------------------8
#
# Table of possible logical volumes that need to be managed.
#
# Each table entry must have the following attributes:
#
#   node_tier:
#       the node tier associated with the entry
#   lv:
#       the name of the LV
#   vg:
#       the name of the VG hosting the LV
#   size:
#       the size of the LV
#
# Optionally table entries can contain the following attributes:
#
#   stripesize:
#       the size of the stripe to use; the stripe count will be
#       dynamically determined from the number of PVs associated
#       with the VG.
#
#   fstype:
#       the type of file system that the LV should be formatted
#       as; if not specified then no file system will be created
#       on the LV.
#
#   fsopts:
#       additional options, if any, that should be passed to the
#       mkfs command when formatting the file system.
#
logical_volumes:
# --------------------- Begin - disks required for usrsap -------------------8
  - tier:       'sapos'
    node_tier:  "{% if scs_high_availability %}[pas, app]{% else %}all{% endif %}"
    vg:         'vg_sap'
    lv:         'lv_usrsap'
    size:       '31g'
    fstype:     'xfs'
# ---------------------- End - disks required for usrsap --------------------8

# ---------------------- Begin - disks required for WD  ---------------------8
  - tier:       'sapos'
    node_tier:  'web'
    vg:         'vg_sap'
    lv:         'lv_sapmnt'
    size:       '1g'
    fstype:     'xfs'
# ----------------------- End - disks required for WD  ----------------------8

# --------------------- Begin - disks required for HANA ---------------------8
  - tier:       'sapos'
    node_tier:  'hana'
    vg:         'vg_hana_data'
    lv:         'lv_hana_data'
    size:       '100%FREE'
    stripesize: 256
    fstype:     'xfs'
  
  - tier:       'sapos'
    node_tier:  'hana'
    vg:         'vg_hana_log'
    lv:         'lv_hana_log'
    size:       '100%FREE'
    stripesize: 64
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'hana'
    vg:         'vg_hana_backup'
    lv:         'lv_hana_backup'
    size:       '100%FREE'
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'hana'
    vg:         "{% if shareddisk == '1' %}vg_hana_shared{% else %}vg_sap{% endif %}"
    lv:         'lv_hana_shared'
    size:       "{% if shareddisk == '1' %}100%FREE{% else %}32g{% endif %}"
    fstype:     'xfs'
# ---------------------- End - disks required for HANA ---------------------8

 # --------------- Begin - disks required for Oracle(non-ASM) ---------------8
 # Adding Tier and disk types for Oracle installation non-ASM.
  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_sapdata1'
    lv:         'lv_oracle_sapdata1'
    size:       '100%FREE'
    stripesize: 256
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_sapdata2'
    lv:         'lv_oracle_sapdata2'
    size:       '100%FREE'
    stripesize: 256
    fstype:     'xfs'


  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_sapdata3'
    lv:         'lv_oracle_sapdata3'
    size:       '100%FREE'
    stripesize: 256
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_sapdata4'
    lv:         'lv_oracle_sapdata4'
    size:       '100%FREE'
    stripesize: 256
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_origlogA'
    lv:         'lv_oracle_origlogA'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_origlogB'
    lv:         'lv_oracle_origlogB'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_mirrlogA'
    lv:         'lv_oracle_mirrlogA'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_mirrlogB'
    lv:         'lv_oracle_mirrlogB'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle_oraarch'
    lv:         'lv_oracle_oraarch'
    size:       '100%FREE'
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'oracle'
    vg:         'vg_oracle'
    lv:         'lv_oracle'
    size:       '64g'
    fstype:     'xfs'
# ---------------- End - disks required for Oracle(non-ASM) ----------------8

# --------------------- Begin - disks required for Sybase ---------------------8
# Adding Tier and disk types for sybase installation.
  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sapdata1'
    lv:         'lv_sybase_sapdata1'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'
  
  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sapdata2'
    lv:         'lv_sybase_sapdata2'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sapdata3'
    lv:         'lv_sybase_sapdata3'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sapdata4'
    lv:         'lv_sybase_sapdata4'
    size:       '100%FREE'
    stripesize: 128
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_saplog1'
    lv:         'lv_sybase_saplog1'
    size:       '100%FREE'
    stripesize: 64
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sybsystem'
    lv:         'lv_sybase_sybsystem'
    size:       '100%FREE'
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sybtemp'
    lv:         'lv_sybase_sybtemp'
    size:       '100%FREE'
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sybsecurity'
    lv:         'lv_sybase_sybsecurity'
    size:       '100%FREE'
    fstype:     'xfs'
    
  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_saptemp'
    lv:         'lv_sybase_saptemp'
    size:       '100%FREE'
    fstype:     'xfs'
 
  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sapdiag'
    lv:         'lv_sybase_sapdiag'
    size:       '100%FREE'
    fstype:     'xfs'

  - tier:       'sapos'
    node_tier:  'sybase'
    vg:         'vg_sybase_sybbackup'
    lv:         'lv_sybase_sybbackup'
    size:       '100%FREE'
    fstype:     'xfs'

# ----------------------- End - disks required for Sybase ----------------------8


# ---------------------- Begin - disks required for SCS ---------------------8
logical_volumes_sapmnt:
  - tier:       'sapos'
    node_tier:  'scs'
    vg:         'vg_sap'
    lv:         'lv_sapmnt'
    size:       '32g'
    fstype:     'xfs'

logical_volumes_install:
  - tier:       'sapos'
    node_tier:  'scs'
    vg:         'vg_sap'
    lv:         'lv_usrsapinstall'
    size:       '100%FREE'
    fstype:     'xfs'
# ----------------------- End - disks required for SCS ----------------------8

# Define a dynamic expression bsybased upon the 'item' fact that can
# only be used within a loop, that determines the number of PVs
# in associated with the associated VG.
vg_stripecount_from_lv_item: >-
  {{ ((volume_groups | default([{}]) |
       selectattr('vg', 'equalto', item.vg) |
       list | first).pvs | default([])) | count }}

# Define a dynamic expression bsybased upon the 'item' fact that can
# only be used within a loop, that determines the options string
# to pass to the lvol action's opts argument. Will evaluate to
# '-i <num_vg_pvs> -I <stripesize>' only when the LV 'item' has
# stripesize specified, otherwise it will be an empty string.
lvol_opts_from_lv_item: >-
  {{ ('stripesize' in item) |
     ternary('-i ' ~ vg_stripecount_from_lv_item ~
             ' -I ' ~ (item.stripesize | default(0)),
             '') }}

# Define a dynamic expression bsybased upon the 'item' fact that can
# only be used within a loop, that determines the device path for
# a LV device.
dev_path_from_lv_item: >-
  {{ ['/dev', item.vg, item.lv] | join('/') }}
