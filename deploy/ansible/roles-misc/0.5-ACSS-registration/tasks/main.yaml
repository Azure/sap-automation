---

# Validate that the SCS cluster is working as expected
- name:                                "0.5.1 acss registration: - Set Python version {{ distribution_id }}"
  ansible.builtin.set_fact:
    python_version: "python3"
  when: (ansible_distribution | lower ~ ansible_distribution_major_version) in ['sles_sap12']

- name:                                "0.5.1 acss registration: - Determine if SCS is running on {{ ansible_hostname }}"
  become_user:                         "{{ sap_sid | lower }}adm"
  become:                              true
  when:
    - "'scs' in supported_tiers or 'ers' in supported_tiers"
  block:
    - name:                            "0.5.1 acss registration: - Get sapcontrol path"
      ansible.builtin.find:
        paths:                         "/usr/sap/{{ sap_sid | upper }}"
        file_type:                     file
        patterns:                      'sapcontrol'
        recurse:                       true
        follow:                        true
      register:                        sapcontrol_file

    - name:                            "0.5.1 acss registration: - Set sapcontrol path"
      ansible.builtin.set_fact:
        sapcontrol_path:               "{{ sapcontrol_file.files[0].path }}"
      when:
        - sapcontrol_file | length > 0

    # {{ sapcontrol_path }} -nr {{ scs_instance_number }} -function GetProcessList | grep MessageServer | awk '{split($0,result,", "); print result[1],result[3] }'
    - name:                            "0.5.1 acss registration: - Determine if SCS is running on {{ ansible_hostname }}"
      ansible.builtin.command:         "{{ sapcontrol_path }} -nr {{ scs_instance_number }} -function GetProcessList"
      changed_when:                    false
      failed_when:                     false
      register:                        is_running
      vars:
        allow_world_readable_tmpfiles: true
        ansible_python_interpreter:    "{{ python_version }}"
      args:
        chdir:                         "{{ sapcontrol_path | dirname }}"
      environment:
        ANSIBLE_REMOTE_TEMP:           "{{ tmp_directory }}/{{ sap_sid | upper }}"
        TEMPDIR:                       "{{ tmp_directory }}/{{ sap_sid | upper }}"
        PATH:                          /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/sap/{{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64:/usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/home/{{ sap_sid | lower }}adm
        DIR_LIBRARY:                   /usr/sap/{{ sap_sid | upper }}/SYS/exe/run
        LD_LIBRARY_PATH:               /usr/sap/{{ sap_sid | upper }}/SYS/exe/run:/usr/sap/{ sap_sid | upper }}/SYS/exe/uc/linuxx86_64
        SAPSYSTEMNAME:                 "{{ sap_sid | upper }}"
      tags:
        - skip_ansible_lint

    - name:                            "0.5.1 acss registration: - Show if SCS is running on {{ ansible_hostname }}"
      ansible.builtin.debug:
        var:                           is_running

    - name:                            "0.5.1 acss registration: - Validate that SCS is running on {{ ansible_hostname }}"
      ansible.builtin.set_fact:
        scs_running_on:                "{{ ansible_hostname }}"
      when:
        - is_running.rc == 3
        - is_running.stdout | regex_search('MessageServer')

- name:                                "0.5.1 acss registration: - Check cluster Group and get the metadata"
  become:                              true
  become_user:                         root
  when:
    - hostvars[ansible_hostname]['scs_running_on'] is defined
    - ansible_hostname == hostvars[ansible_hostname]['scs_running_on']
  block:
    # - name:                            "0.5.1 acss registration: - Check where the cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} is running"
    #   ansible.builtin.shell: >-
    #     set -o pipefail;
    #     crm_resource --resource g-{{ sap_sid | upper }}_{{ instance_type | upper }} --locate | cut -d ':' -f 2| cut -d " " -f 2
    #   when:
    #     - scs_high_availability
    #     - ansible_os_family | upper == 'SUSE'
    #   register:                        cluster_group_location
    #   failed_when:                     cluster_group_location.stdout != hostvars[ansible_hostname]['scs_running_on']
    #   tags:
    #     - skip_ansible_lint

    # - name:                            "0.5.1 acss registration: - Check where the cluster group g-{{ sap_sid | upper }}_{{ instance_type | upper }} is running"
    #   ansible.builtin.shell: >-
    #     set -o pipefail;
    #     pcs constraint location show resources g-{{ sap_sid | upper }}_{{ instance_type | upper }} | grep "Node" | awk '{print $2}'
    #   when:
    #     - scs_high_availability
    #     - ansible_os_family | upper == 'REDHAT'
    #   register:                        cluster_group_location
    #   failed_when:                     cluster_group_location.stdout != hostvars[ansible_hostname]['scs_running_on']
    #   tags:
    #     - skip_ansible_lint

    - name:                            "0.5.1 acss registration: - Get Azure instance metadata"
      ansible.builtin.uri:
        url:                           http://169.254.169.254/metadata/instance?api-version=2021-02-01
        use_proxy:                     false
        headers:
          Metadata:                    true
      register:                        azure_metadata

    - name:                               "Set information"
      ansible.builtin.set_fact:
        acss_resource_group:              "{{ azure_metadata.json.compute.resourceGroupName }}"
        acss_resource_id:                 "{{ azure_metadata.json.compute.resourceId }}"
        acss_subscription_id:             "{{ azure_metadata.json.compute.subscriptionId }}"
        acss_location:                    "{{ azure_metadata.json.compute.location }}"

    # - name:                            "0.5.1 acss registration: - Set variables from Azure IMDS"
    #   delegate_facts:                  true
    #   delegate_to:                     localhost
    #   ansible.builtin.command: >-
    #           "az extension add --name workloads --yes || exit 1"
    #   tags:
    #     - skip_ansible_lint

    - name:                            "0.5.1 acss registration: - Create [ACSS] virtual instance"
      ansible.builtin.uri:
        url:                           "https://management.azure.com/subscriptions/{{ acss_subscription_id }}/resourceGroups/{{ acss_resource_group }}/providers/Microsoft.Workloads/sapVirtualInstances/{{ sap_sid | upper }}?api-version=2023-04-01"
        method:                        PUT
        body_format:                   json
        body: |
                                       {
                                         "properties": {
                                           "environment": "{{ acss_environment }}",
                                           "sapProduct": "{{ acss_sap_product }}",
                                           "configuration": {
                                             "configurationType": "Discovery",
                                             "centralServerVmId": "{{ acss_resource_id }}"
                                           }
                                         },
                                         "location": "{{ acss_location }}"
                                       }
        # status_code:                   [200, 201]
        headers:
          Authorization:               "Bearer {{ acss_access_token }}"
          x-ms-rpaas-new-resource:     "true"
          x-ms-client-request-id:      "SDAF-{{ acss_guid }}"
      register:                        create_vis_response
      failed_when:                     create_vis_response.json.properties.provisioningState != 'Accepted' and create_vis_response.json.properties.provisioningState != 'Succeeded'
      no_log:                          false

    - name:                            "0.5.1 acss registration: - Debug [ACSS] virtual instance creation response"
      ansible.builtin.debug:
        msg:                           "{{ create_vis_response }}"
      tags:
        - skip_ansible_lint

...
