##########################################################################################################################################################################################
#                                                                                                                                                                                        #
# Installation service 'SAP NetWeaver 7.5 > SAP HANA Database > Installation > Application Server ABAP > Distributed System > Database Instance', product id 'NW_ABAP_DB:NW750.HDB.ABAP' #
#                                                                                                                                                                                        #
##########################################################################################################################################################################################

# Location of download_basket\CD_EXPORT CD
SAPINST.CD.PACKAGE.HDBCLIENT                                = {{ sap_cd_package_hdbclient }}
SAPINST.CD.PACKAGE.CD1                                      = {{ sap_cd_package_cd1 }}
SAPINST.CD.PACKAGE.CD2                                      = {{ sap_cd_package_cd2 }}
SAPINST.CD.PACKAGE.CD3                                      = {{ sap_cd_package_cd3 }}
SAPINST.CD.PACKAGE.CD4                                      = {{ sap_cd_package_cd4 }}
SAPINST.CD.PACKAGE.CD5                                      = {{ sap_cd_package_cd5 }}
archives.downloadBasket                                     = {{ download_basket_dir }}
SAPINST.CD.PACKAGE.CD1                                      = {{ target_media_location }}/CD_EXPORT/DATA_UNITS

# Password for the Diagnostics Agent specific <dasid>adm user. Provided value may be encoded.
# DiagnosticsAgent.dasidAdmPassword                         =

# Windows domain in which the Diagnostics Agent users must be created. This is an optional property (Windows only).
# DiagnosticsAgent.domain                                   =

# Windows only: Password for the Diagnostics Agent specific 'SAPService<DASID>' user.
# DiagnosticsAgent.sapServiceDASIDPassword                  =

# Specify whether Software Provisioning Manager is to drop the schema if it exists.
# HDB_Schema_Check_Dialogs.dropSchema                       = false

# The name of the database schema.
HDB_Schema_Check_Dialogs.schemaName                         = SAPABAP1

# The password of the database schema.
HDB_Schema_Check_Dialogs.schemaPassword                     = {{ main_password }}

# Specify whether Software Provisioning Manager is to validate the schema name. The schema name must only contain numbers and capital letters. It  must not start with '_' . It cannot be 'SYS' or 'SYSTEM'.
# HDB_Schema_Check_Dialogs.validateSchemaName               = true

# Use SAP HANA Media on CD, do not ask for SAR archives
HDB_Software_Dialogs.useMediaCD                             = true

# Name for container (folder) for the HANA Userstore files.
# HDB_Userstore.HDB_USE_IDENT                               =

# Database hostnames that will be set directly in hdbuserstore without resolving them in HANA. Comma separated. Example (host1,host2)
# HDB_Userstore.doNotResolveHostnames                       =


# Alternative port for SystemDB to be used in hdbuserstore
# HDB_Userstore.systemDBPort                                =

# Use ABAP secure store instead of HANA userstore. Default: false for HANA user store.
# HDB_Userstore.useABAPSSFS                                 = false

# Specify whether you want to decluster during the import.
# InitDeclusteringForImport.decluster                       =

# SAP HANA: import tasks to omit. To be used in combination with HDB_IMPORT_WITH_SDI=true.
# NW_ABAP_Import.hdbOmitTasksForSDI                         = TPIV

# SAP code page. Value for Unicode is: '4103' on little endian (intel), '4102' on big endian. Value for Non-Unicode is: '1100' or country specific.
NW_ABAP_Import_Dialog.dbCodepage                            = 4103

# Communication port for the Migration Monitor.
# NW_ABAP_Import_Dialog.migmonComPort                       =

# Communication type for the Migration Monitor. Possible values are: 'EXCHANGE', 'SOCKETS', none
# NW_ABAP_Import_Dialog.migmonComType                       = EXCHANGE

# Exchange directory for the Migration Monitor
# NW_ABAP_Import_Dialog.migmonExchangeDir                   =

# Number of parallel Migration Monitor jobs
NW_ABAP_Import_Dialog.migmonJobNum                          = 12

# Additional 'R3load' arguments for the LOAD phase
NW_ABAP_Import_Dialog.migmonLoadArgs                        = -c 100000 -rowstorelist /tmp/scsstack/rowstorelist.txt

# Additional 'R3load' arguments for the TASK phase
# NW_ABAP_Import_Dialog.migmonTaskArgs                      =

# Migration key.
# NW_ABAP_Import_Dialog.migrationKey                        =

# Enables setting advanced 'R3load' options.
# NW_ABAP_Import_Dialog.useAdvancedLoadConfig               = false

# Enables setting attribues for parallel export/import.
# NW_ABAP_Import_Dialog.useParallelExportImport             = false


# System copy AS Java with product instance Process Integration and/or Development Infrastructure: Specify whether the target system should replace the source system. Possible values are  'true' or 'false'.
# NW_CreateDBandLoad.movePVCforUsagePiAndDi                 =

# Specify whether the all operating system users are to be removed from group 'sapinst' after the execution of Software Provisioning Manager has completed.
NW_Delete_Sapinst_Users.removeUsers                         = true

# Master password
NW_GetMasterPassword.masterPwd                              = {{ main_password }}

# ABAP schema name
NW_HDB_DB.abapSchemaName                                    = SAPABAP1

# Password of the ABAP schema user
NW_HDB_DB.abapSchemaPassword                                = {{ main_password }}

# Password of the DBACOCKPIT user
NW_HDB_DB.dbacockpitPassword                                = {{ main_password }}

# JAVA schema name
# NW_HDB_DB.javaSchemaName                                  =

# Password of the JAVA schema user
# NW_HDB_DB.javaSchemaPassword                              =

# Skip checking if creating a HANA user store is needed. Default value is 'true'. If set to 'false', a valid HANA userstore must exists.
# NW_HDB_DBClient.checkCreateUserstore                      = true

# Install the SAP HANA database client in a central or local directory. Possible values are: 'SAPCPE', 'LOCAL'
# NW_HDB_DBClient.clientPathStrategy                        = LOCAL

# Data has already been loaded.
# NW_HDB_getDBInfo.dataAlreadyLoaded                        = false

# The DB admin user for SAP HANA tenant database. Default value: SYSTEM
# NW_HDB_getDBInfo.dbadmin                                  = SYSTEM

# Database host
NW_HDB_getDBInfo.dbhost                                     = {{ sap_db_hostname }}

# Database system ID
NW_HDB_getDBInfo.dbsid                                      = {{ db_sid | upper }}


# The instance number of the SAP HANA database server
NW_HDB_getDBInfo.instanceNumber                             = {{ db_instance_number }}

# Password of user 'SYSTEM' within the 'SystemDB' tenant in an SAP HANA MultiDB server
# NW_HDB_getDBInfo.systemDbPassword                         =

# Password of  SAP HANA administration database user.'
NW_HDB_getDBInfo.systemPassword                             = {{ main_password }}

# Password of user 'SYSTEM' inside the SAP HANA database server from a backup
# NW_HDB_getDBInfo.systemPasswordBackup                     =

# SAP HANA system ID
NW_HDB_getDBInfo.systemid                                   = {{ db_sid | upper }}

# A dedicated OS group for the tenant database, required for SAP HANA multitenant database containers with high isolation level.
# NW_HDB_getDBInfo.tenantOsGroup                            =

# A dedicated OS user for the tenant database, required for SAP HANA multitenant database containers with high isolation level.
# NW_HDB_getDBInfo.tenantOsUser                             =

# The SQL port for SAP HANA tenant database
# NW_HDB_getDBInfo.tenantPort                               =

# Connect using SSL/TLS. Default value: false.
NW_HDB_getDBInfo.usingSSL                                   = true

# DEPRECATED, DO NOT USE!
# NW_SAPCrypto.SAPCryptoFile                                =

# SAP INTERNAL USE ONLY
# NW_System.installSAPHostAgent                             = true

# DEPRECATED, DO NOT USE!
# NW_Unpack.dbaToolsSar                                     =

# DEPRECATED, DO NOT USE!
# NW_Unpack.igsExeSar                                       =

# DEPRECATED, DO NOT USE!
# NW_Unpack.igsHelperSar                                    =

# DEPRECATED, DO NOT USE!
NW_Unpack.sapExeDbSar                                       = {{ download_basket_dir }}/SAPEXEDB_1100-80002572.SAR

# DEPRECATED, DO NOT USE!
# NW_Unpack.sapExeSar                                       =

# DEPRECATED, DO NOT USE!
# NW_Unpack.sapJvmSar                                       =

# DEPRECATED, DO NOT USE!
# NW_Unpack.xs2Sar                                          =

# SAP INTERNAL USE ONLY
# NW_adaptProfile.templateFiles                             =

# ABAP message server port for connecting to the message server, leave empty for default
# NW_checkMsgServer.abapMSPort                              =

# SAP INTERNAL USE ONLY
# NW_getFQDN.resolve                                        = true

# Manual configuration and execution of Migration Monitor or manual native database copy method.
# NW_getLoadType.importManuallyExecuted                     = false

# The load type chosen by the user. Valid values are: 'SAP', 'STD', 'OBR', 'HCP', 'FLASHCOPY', 'MDA', 'HBR', 'SBR'
NW_getLoadType.loadType                                     = SAP

# Provide  'profile' directory of SAP Netweaver-based system.
NW_readProfileDir.profileDir                                = /usr/sap/{{ sap_sid | upper }}/SYS/profile

# Enter the path of the existing 'profile' directory.
# NW_readProfileDir.profilesAvailable                       = true


# Specify whether a Landscape Reorg Check Procedures file 'HdbLandscapeReorgCheckProcedure.SQL' is to be used. Possible values are 'USEFILE', 'DONOTUSEFILE','DONOTRUN'. Default value is 'USEFILE'.
# hanadb.landscape.reorg.useCheckProcedureFile              = USEFILE

# Specify whether a Table Placement Parameters file 'HdbTablePlacementParameters.SQL' is to be used. Possible values are 'USEFILE', 'DONOTUSEFILE'. Default value is 'USEFILE'.
hanadb.landscape.reorg.useParameterFile                     = DONOTUSEFILE


# DBACOCKPIT user is to be created. Default value is 'false'.
# hdb.create.dbacockpit.user                                = false

# Windows only: The domain of the SAP Host Agent user
# hostAgent.domain                                          =

# Password for the 'sapadm' user of the SAP Host Agent
# hostAgent.sapAdmPassword                                  =

# Windows only: The domain of all users of this SAP system. Leave empty for default.
# nwUsers.sapDomain                                         =

# Windows only: The password of the 'SAPServiceSID' user
# nwUsers.sapServiceSIDPassword                             =

# UNIX only: The user ID of the 'sapadm' user, leave empty for default. The ID is ignored if the user already exists.
nwUsers.sapadmUID                                                     = {{ sapadm_uid }}

# UNIX only: The group id of the 'sapsys' group, leave empty for default. The ID is ignored if the group already exists.
nwUsers.sapsysGID                                                     = {{ sapsys_gid }}

# UNIX only: The user id of the <sapsid>adm user, leave empty for default. The ID is ignored if the user already exists.
nwUsers.sidAdmUID                                                     = {{ sidadm_uid }}

# The password of the '<sapsid>adm' user
nwUsers.sidadmPassword                                                = {{ main_password }}

# ABAP schema password
# storageBasedCopy.abapSchemaPassword                                 =

# Sets the SAP<SAPSID>DB schema password using a  parameter file.
# storageBasedCopy.javaSchemaPassword                                 =
