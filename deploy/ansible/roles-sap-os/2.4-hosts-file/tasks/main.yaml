# Tasks:
#   OS: hosts file, Entries - /etc/hosts
#
# TODO:

---


# -------------------------------------+---------------------------------------8
#
# Description:  Validation for Prerequisites
#
- name:                                "2.4 Hosts: - import pre_checks"
  ansible.builtin.import_tasks:        pre_checks.yaml
# -------------------------------------+---------------------------------------8

#   OS: hosts file, Entries - /etc/hosts
- name:                                "2.4 Hosts: - OS: Common, Entries - /etc/hosts"
  ansible.builtin.blockinfile:
    path:                              /etc/hosts
    mode:                              0644
    create:                            true
    backup:                            true
    state:                             present
    block:                             "{{ lookup('file', 'hosts.block') }}"
    marker:                            "# {mark} ANSIBLE MANAGED BLOCK - COMMON"


- name:                                "2.4 Hosts: - OS: SID, Entries - /etc/hosts"
  ansible.builtin.blockinfile:
    path:                              /etc/hosts
    mode:                              0644
    create:                            true
    state:                             present
    block:                             "{{ lookup('template', 'hosts.j2') }}"
    marker:                            "# {mark} ANSIBLE MANAGED BLOCK - {{ sap_sid | upper }}"


- name:                                "2.4 Hosts - Set the SCS Virtual Instance hostname"
  ansible.builtin.set_fact:
    scs_virtual_hostname:              "{{ custom_scs_virtual_hostname | default(sap_sid | lower ~ 'scs' ~ scs_instance_number ~ 'cl1', true) }}"
  when:
    - scs_high_availability

- name:                                "2.4 Hosts - Set the ERS Virtual Instance hostname"
  ansible.builtin.set_fact:
    ers_virtual_hostname:              "{{ custom_ers_virtual_hostname | default(sap_sid | lower ~ 'ers' ~ ers_instance_number ~ 'cl2', true) }}"
  when:
    - scs_high_availability

- name:                            "Backward Compatibility - Check required Database HA variables"
  ansible.builtin.set_fact:
    database_high_availability:    "{{ db_high_availability | default(false) }}"
  when:
    - db_high_availability is defined
    - database_high_availability is not defined

- name:                                "2.4 Hosts: - Set the DB Virtual Instance hostname"
  ansible.builtin.set_fact:
    db_virtual_hostname:               "{{ custom_db_virtual_hostname | default(sap_sid | lower ~ db_sid | lower ~ 'db' ~ db_instance_number ~ 'cl', true) }}"
  when:
    - database_high_availability

- name:                                "2.4 Hosts: - Get the Server name list"
  ansible.builtin.set_fact:
    scs_server_list:                   "{{ scs_server_list | default([]) + [item] }}"
  with_items:
    - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_SCS') }}"

- name:                                "2.4 Hosts: - Setup Virtual host name resolution - SCS & ERS"
  ansible.builtin.blockinfile:
    path:                              /etc/hosts
    mode:                              0644
    create:                            true
    state:                             present
    block: |
      {{ '%-19s' | format(scs_lb_ip) }} {{ '%-50s' | format(scs_virtual_hostname + '.' + sap_fqdn) }} {{ '%-21s' | format(scs_virtual_hostname) }}
      {{ '%-19s' | format(ers_lb_ip) }} {{ '%-50s' | format(ers_virtual_hostname + '.' + sap_fqdn) }} {{ '%-21s' | format(ers_virtual_hostname) }}
    marker:                            "# {mark} ASCS/ERS Entries {{ scs_virtual_hostname }}"
  when:
    - scs_high_availability
    - scs_server_list | length > 0

- name:                                "2.4 Hosts: - Setup Virtual host name resolution - DB"
  ansible.builtin.blockinfile:
    path:                              /etc/hosts
    mode:                              0644
    create:                            true
    state:                             present
    block: |
      {{ '%-19s' | format(database_loadbalancer_ip) }} {{ '%-50s' | format(db_virtual_hostname + '.' + sap_fqdn) }} {{ '%-21s' | format(db_virtual_hostname) }}
    marker:                            "# {mark} DB Entries {{ db_virtual_hostname }}"
  when:
    - database_high_availability
    - platform == 'HANA'

- name:                                "2.4 Hosts: - Setup Virtual host name resolution - DB"
  ansible.builtin.blockinfile:
    path:                              /etc/hosts
    mode:                              0644
    create:                            true
    state:                             present
    block: |
      {{ '%-19s' | format(database_loadbalancer_ip) }} {{ '%-50s' | format(db_virtual_hostname + '.' + sap_fqdn) }} {{ '%-21s' | format(db_virtual_hostname) }}
    marker:                            "# {mark} DB Entries {{ db_virtual_hostname }}"
  when:
    - database_high_availability
    - platform == 'DB2'

- name:                                "2.4 Hosts: Process pas_hostname variable and update host file when it is defined"
  block:

    - name:                            "2.4 Hosts: Set virtual_host fact from the fetched PAS server list"
      ansible.builtin.set_fact:
        pas_server_temp:               "{{ pas_server_temp | default([]) + [item] }}"
      with_items:
                                       - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_PAS') }}"
                                       - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_SCS') }}"
                                       - "{{ query('inventory_hostnames', '{{ sap_sid | upper }}_DB') }}"
      when:
                                       - "'pas' in hostvars[item]['supported_tiers']"

    - name:                            "2.4 Hosts: - Set fact for the PAS if pas_hostname is defined"
      ansible.builtin.set_fact:
        pas_virtualhost_from_inventory: "{{ pas_server_temp | first }}"
        pas_virtual_hostname:           "{{ custom_pas_virtual_hostname | default( pas_server_temp | first , true) }}"
      when:
        - pas_server_temp | length > 0

    - name:                            "2.4 Hosts: - Display the variables being used"
      ansible.builtin.debug:
        msg:
          - "pas_virtual_hostname:     {{ pas_virtual_hostname }} "
          - "custom_pas_hostname:      {{ custom_pas_virtual_hostname }} "
          - "virtualhost_in_inventory: {{ pas_virtualhost_from_inventory }}"
      when:
        - pas_server_temp | length > 0

    - name:                            "2.4 Hosts: - Get the line from /etc/hosts with virtual_host"
      ansible.builtin.slurp:
        src:                           /etc/hosts
      register: hosts_content

    - name:                            "2.4 Hosts: - Extract the line with virtual_host"
      ansible.builtin.set_fact:
        virtual_host_line:             "{{ (hosts_content['content'] | b64decode).split('\n') | select('search', pas_virtualhost_from_inventory) | first }}"
      when:
        - pas_virtualhost_from_inventory is defined

    - name:                            "2.4 Hosts: - Duplicate the line with virtual_host and replace with pas_virtual_hostname in /etc/hosts"
      when:
        - virtual_host_line is defined
        - pas_virtual_hostname is defined
      ansible.builtin.lineinfile:
        path:                          /etc/hosts
        line:                          "{{ virtual_host_line | replace(pas_virtualhost_from_inventory, pas_virtual_hostname) }}"
        insertbefore:                  "{{ virtual_host_line }}"

- name:                                "2.4 Hosts: - Setup iSCSI host name resolution"
  ansible.builtin.lineinfile:
    path:                              /etc/hosts
    line:
      "{{ '%-19s' | format(iscsi_server.ip) }} {{ '%-50s' | format(iscsi_server.host + '.' + sap_fqdn) }} {{ '%-21s' | format(iscsi_server.host) }}"
  loop:                                           "{{ iscsi_servers }}"
  loop_control:
    loop_var:                          iscsi_server
  when:                                iscsi_servers is defined

- name:                                "2.4 Hosts: - Remove duplicate lines from /etc/hosts"
  block:
    - name:                            "2.4 Hosts: - Get the line from /etc/hosts with virtual_host"
      ansible.builtin.slurp:
        src:                           /etc/hosts
      register:                        hosts_content_after

    - name:                            "2.4 Hosts: - Get unique lines from /etc/hosts"
      ansible.builtin.set_fact:
        unique_lines:                  "{{ (hosts_content_after['content'] | b64decode).split('\n') | unique }}"

    - name:                            "2.4 Hosts: - Write unique lines back to /etc/hosts"
      ansible.builtin.copy:
        dest:                          /etc/hosts
        content:                       "{{ unique_lines | join('\n') }}"
        mode:                          0644
        backup:                        true
      when: (hosts_content_after['content'] | b64decode).split('\n') | unique | length != (hosts_content_after['content'] | b64decode).split('\n') | length

...
