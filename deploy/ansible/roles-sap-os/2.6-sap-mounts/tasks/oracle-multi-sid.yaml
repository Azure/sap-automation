---

- name: Gather Logical volumes created in 1.5.2-disk-setup-ora-msid
  include_vars: disks_config_ora_msid.yml

- name: Load logical volumes
  set_fact: 
    logical_volume_groups: "{{ lookup ('template', 'roles-os/1.5.2-disk-setup-ora-msid/templates/logical_volume_group.j2') }}"

# - debug:
#     var:    "{{ lv_groups }}"

# - fail: msg="mount-error-here"                      

- name: Check if LVs exists.
  stat:
    path: "{{ dev_path_from_lv_item }}"
  loop: "{{ logical_volume_groups }}"
  register: oravgstat

- debug:
    var:                         oravgstat

- name: Gather existing LVs 
  set_fact:
    lvexists: "{{ oravgstat.results | selectattr('stat.exists','equalto',true) | map(attribute='item.lv') |list }}"


- debug:
    var:                         lvexists

#- fail: msg="here"

#Mount Oracle File System before mounting the sub-directories.
- name:                                Mount oracle Filesystem
  ansible.builtin.mount:
    src:                               "{{ item.src }}"
    path:                              "{{ item.path }}"
    fstype:                            "{{ item.type }}"
    opts:                              defaults
    state:                             mounted
  loop:
    - { node_tier: 'oracle-multi-sid',  type: 'xfs',   src: '/dev/vg_oracle/lv_oracle',      path: '/oracle'         }
    - { node_tier: 'oracle-multi-sid',  type: 'xfs',   src: '/dev/vg_sap/lv_usrsap',      path: '/usr/sap'         }
  when:         
    -  item.node_tier == "oracle-multi-sid"


# Mount Filesystems
- name:     "Mount Filesystems for Oracle"
  mount:
    src:    "{{ dev_path_from_lv_item }}"
    #path:   "{{ ['/'~item.lv|split('_')[-2], anydb_sid|upper, item.lv|split('_')[-1]] | join('/') }}"
    path: >-
        {%- set lv_parts = item.lv.split('_') -%}
        {%- if lv_parts| length == 2 -%}
        {%- set _path = '/' ~ lv_parts[-1] -%}
        {%- else -%}
        {%- set _path = ['/oracle/' ~ lv_parts[-1] | upper  ~ '/' ~ lv_parts[-2]] | join('/') -%}
        {%- endif -%}
        {{- _path -}} 
    fstype: "{{ item.fstype }}"
    opts:   defaults
    state:  mounted
  loop: "{{ logical_volume_groups |sort(attribute='lv') }}"
  when:         
              #- item.tier == "ora"
              - item.node_tier == "oracle-multi-sid" 
              - item.lv in  lvexists
              - item.lv != 'lv_usrsap'
              - item.lv != 'lv_oracle'
  register:  oraclefilesystemmounts


# Mount Filesystems
- name:     "Mount SAP Filesystems on Database for installation"
  mount:
    src:    "{{ item.src }}"
    path:   "{{ item.path }}"
    fstype: "{{ item.type }}"
    opts:   defaults
    state:  mounted
  vars:
    # Get all the hostnames in <SID>_SCS group and return only the first hostname
    nfs_server:   "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_SCS') | first }}"
  loop:
    - { tier: 'sapos',          type: 'xfs',   src: '/dev/vg_sap/lv_usrsap',                             path: '/usr/sap' }
    - { tier: 'ora',            type: 'nfs4',    src: '{{ nfs_server }}:/usr/sap/install',               path: '/usr/sap/install' }                # Special Install Structure; Destroy on Completion
  when:         
                item.tier == "sapos" or 
                item.tier == "ora"


- name:     "Mount SAP Filesystems on Database for installation"
  mount:
    src: '{{ nfs_server }}:/sapmnt/{{ item.sid|upper }}'
    path: '/sapmnt/{{ item.sid|upper }}'
    fstype: 'nfs4'
    opts:   defaults
    state:  mounted
  vars:
    # Get all the hostnames in <SID>_SCS group and return only the first hostname
    nfs_server:   "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_SCS') | first }}"
  loop: "{{ MULTI_SIDS }}"
  when:         
    - node_tier == "oracle-multi-sid"


# Create Run Flag Directory
- name:     "Create run flag directory"
  become:         true
  become_user:    root
  ansible.builtin.file:
    path:   /etc/sap_deployment_automation
    state:  directory
    mode:   0755
    owner:  oracle
    group:  oinstall


# ORACLE should be the owner of the file systems /oracle directories. 
#.PARAMS folder is not required for oracle install as we are not passing any parameters files.

- name:                                "ORACLE: Make orasid:dba as owners for Oracle directories - check flag file"          
  ansible.builtin.stat:
    path:                              /etc/sap_deployment_automation/filepermission.txt   
  register:                            oracle_permissions_set

- name:                                "ORACLE: Make orasid:dba as owners for Oracle directories"          
  become:                              true
  become_user:                         root
  ansible.builtin.file:
    path:                              "{{ item.path }}"
    state:                             directory
    owner:                             "{{ item.owner }}"
    group:                             "{{ item.group }}"
    recurse:                           true
  loop:
    - { path: '/oracle',       group: 'oinstall',   owner: 'oracle'}
  when:
     - not oracle_permissions_set.stat.exists

- name:                                "ORACLE: Create filepermission.txt"          
  become:                              true
  become_user:                         root
  ansible.builtin.file:
    path:                              /etc/sap_deployment_automation/filepermission.txt   
    state:                             touch

#Debug for testing
- name:                           "Print oracle filesystems"
  debug:
    var:                         oraclefilesystemmounts