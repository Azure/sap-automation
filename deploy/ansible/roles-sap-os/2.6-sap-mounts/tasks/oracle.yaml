---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                Perform the Disk system mounts                              |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# Mount Filesystems

- name:                                "ORACLE: Gather Logical volumes created in 1.5"
  ansible.builtin.include_vars:        disks_config.yml

- name:                                Set the NFS Server name list
  ansible.builtin.set_fact:
    nfs_server_temp:                   "{{ nfs_server_temp | default([]) + [item] }}"
  with_items:
    - "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_SCS') }}"
    - "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_DB') }}"

- name:                                Set the NFS Server name
  ansible.builtin.set_fact:
    nfs_server:                        "{{ nfs_server_temp | first }}"
  when:                                NFS_provider == "NONE"

- name:                                "ORACLE: Check if LVs exists."
  ansible.builtin.stat:
    path:                              "{{ dev_path_from_lv_item }}"
  loop:                                "{{ logical_volumes }}"
  register:                            oravgstat

- name:                                "ORACLE: Show oravgstat"
  ansible.builtin.debug:
    var:                               oravgstat
    verbosity:                         2

- name:                                "ORACLE: Gather existing LVs"
  ansible.builtin.set_fact:
    lvexists:                          "{{ oravgstat.results | selectattr('stat.exists','equalto',true) | map(attribute='item.lv') |list }}"

- name:                                "ORACLE: Show lvexists"
  ansible.builtin.debug:
    var:                               lvexists
    verbosity:                         2

# Mount Filesystems
- name:                                "ORACLE: Mount Filesystems for Oracle"
  ansible.builtin.mount:
    src:                               "{{ dev_path_from_lv_item }}"
    path: >-
                                       {%- set lv_parts = item.lv.split('_') -%}
                                       {%- if lv_parts| length == 2 -%}
                                       {%- set _path = '/' ~ lv_parts[-1] -%}
                                       {%- else -%}
                                       {%- set _path = ['/' ~ lv_parts[-2], db_sid | upper, lv_parts[-1]] | join('/') -%}
                                       {%- endif -%}
                                       {{- _path -}}
    fstype:                            "{{ item.fstype }}"
    opts:                              defaults
    state:                             mounted
  loop:                                "{{ logical_volumes |sort(attribute='lv') }}"
  register:  oracle_filesystem_mounts
  when:
    - item.node_tier == "oracle"
    - item.lv in lvexists

# Debug for testing
- name:                                "ORACLE: Print oracle filesystems"
  ansible.builtin.debug:
    var:                               oracle_filesystem_mounts
    verbosity:                         2


- name:                                "ORACLE: Create sap_deployment_automation folder"
  ansible.builtin.file:
    path:                              /etc/sap_deployment_automation
    mode:                              0755
    state:                             directory


# - name:                                "ORACLE: Make orasid:dba as owners for Oracle directories - check flag file"
#   ansible.builtin.stat:
#     path:                              /etc/sap_deployment_automation/filepermission.txt
#   register:                            oracle_permissions_set

- name:                                "ORACLE: Make orasid:dba as owners for Oracle directories"
  become:                              true
  become_user:                         root
  ansible.builtin.file:
    path:                              "{{ item.path }}"
    state:                             directory
    owner:                             "{{ item.owner }}"
    group:                             "{{ item.group }}"
    recurse:                           true
  loop:
    - { path: '/oracle',           group: 'oinstall',   owner: 'oracle'}
    - { path: '/usr/sap/install',  group: 'oinstall',   owner: 'oracle'}
  # when:
  #   - not oracle_permissions_set.stat.exists

# # Mount Filesystems
# - name:     "Mount SAP Filesystems on Database for installation"
#   mount:
#     src:    "{{ item.src }}"
#     path:   "{{ item.path }}"
#     fstype: "{{ item.type }}"
#     opts:   defaults
#     state:  mounted
#   loop:
#     - { tier: 'ora',            type: 'nfs4',    src: '{{ nfs_server }}:/sapmnt/{{ sap_sid|upper }}',    path: '/sapmnt/{{ sap_sid|upper }}' }
#   when:
#     - item.tier == "ora"


# - name:                             "File permissions updated"
#   ansible.builtin.file:
#     path:                              /etc/sap_deployment_automation/filepermission.txt
#     state:                             touch
