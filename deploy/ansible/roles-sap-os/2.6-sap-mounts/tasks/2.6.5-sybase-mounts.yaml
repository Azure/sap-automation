---

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                Perform the Disk system mounts                              |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

# Mount Filesystems

- name:                                "Sybase ASE: Gather Logical volumes created in 1.5"
  ansible.builtin.include_vars:        disks_config.yml

- name:                                Set the NFS Server name list
  ansible.builtin.set_fact:
    nfs_server_temp:                   "{{ nfs_server_temp | default([]) + [item] }}"
  with_items:
    - "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_SCS') }}"
    - "{{ query('inventory_hostnames', '{{ sap_sid|upper }}_DB') }}"

- name:                                Set the NFS Server name
  ansible.builtin.set_fact:
    nfs_server:                        "{{ nfs_server_temp | first }}"
  when:                                NFS_provider == "NONE"

- name:                                "Sybase ASE: Check if LVs exists."
  ansible.builtin.stat:
    path:                              "{{ dev_path_from_lv_item }}"
  loop:                                "{{ logical_volumes }}"
  register:                            asevgstat

- name:                                "Sybase ASE: Show asevgstat"
  ansible.builtin.debug:
    var:                               asevgstat
    verbosity:                         2

- name:                                "Sybase ASE: Gather existing LVs" 
  set_fact:
    lvexists:                          "{{ asevgstat.results | selectattr('stat.exists','equalto',true) | map(attribute='item.lv') |list }}" 

- name:                                "Sybase ASE: Show lvexists"
  ansible.builtin.debug:
    var:                               lvexists
    verbosity:                         2

# Mount Filesystems
- name:                                "2.6 Sybase Mounts: - Mount local sap file systems"
  ansible.builtin.mount:
    src:                               "{{ item.src }}"
    path:                              "{{ item.path }}"
    fstype:                            "{{ item.type }}"
    opts:                              defaults
    state:                             mounted
 loop:
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_system/lv_sybase_system',          path: '/sybase/{{ db_sid|upper }}'         }
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_sapdata/lv_sybase_sapdata',        path: '/sybase/{{ db_sid|upper }}/sapdata_1'       }
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_saplog/lv_sybase_saplog',          path: '/sybase/{{ db_sid|upper }}/saplog_1'        }
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_backup/lv_sybase_backup',          path: '/sybase/{{ db_sid|upper }}/backup'     }
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_saptemp/lv_sybase_saptemp',        path: '/sybase/{{ db_sid|upper }}/saptemp'        }
    - { node_tier: 'sybase', type: 'xfs',   src: '/dev/vg_sybase_sapdiag/lv_sybase_sapdiag',        path: '/sybase/{{ db_sid|upper }}/sapdiag'     }
  when:
    - (item.node_tier == "sybase" or item.node_tier == node_tier)
  
# Mount Filesystems
#- name:                                "Sybase ASE: Mount Filesystems for sybase"
#  ansible.builtin.mount:
#    src:                               "{{ dev_path_from_lv_item }}"
#    path: >-
#                                       {%- set lv_parts = item.lv.split('_') -%}
#                                       {%- if lv_parts| length == 2 -%}
#                                       {%- set _path = '/' ~ lv_parts[-1] -%}
#                                       {%- else -%}
#                                       {%- set _path = ['/' ~ lv_parts[-2], db_sid | upper, lv_parts[-1]] | join('/') -%}
#                                       {%- endif -%}
#                                       {{- _path -}} 
#    fstype:                            "{{ item.fstype }}"
#    opts:                              defaults
#    state:                             mounted
#  loop:                                "{{ logical_volumes |sort(attribute='lv') }}"
#  register:  asefilesystemmounts
#  when:         
#    - item.node_tier == "sybase" 
#    - item.lv in  lvexists

- name:                                "Sybase ASE: Create sybase_install_automation folder"          
  ansible.builtin.file:
    path:                              /etc/sybase_install_automation
    mode:                              0755
    state:                             directory

- name:                                "Sybase ASE: Create responsefile.txt"          
  become:                              true
  become_user:                         root
  ansible.builtin.file:
    path:                              /etc/sybase_install_automation/responsefile.txt  
    state:                             touch

- name:                                "Sybase ASE: Make dbsidadm:sapsys as owners for Sybase directories - check flag file"          
  ansible.builtin.stat:
    path:                              /etc/sybase_install_automation/filepermission.txt   
  register:                            ase_permissions_set

#- name:                                "Sybase ASE: Make orasid:dba as owners for Sybase directories"          
#  ansible.builtin.file:
#    path:                              "{{ item.path }}"
#    state:                             directory
#    owner:                             "{{ item.owner }}"
#    group:                             "{{ item.group }}"
#    recurse:                           true
#  loop:
#    - { path: '/oracle',       group: 'sapsys',   owner: 'oracle'}
#  when:
#     - not oracle_permissions_set.stat.exists

- name:                                "Sybase ASE: Create sybase_install_automation folder"          
  ansible.builtin.file:
    path:                              /etc/sybase_install_automation
    mode:                              0755
    state:                             directory

- name:                                "Sybase ASE: Create filepermission.txt"          
  become:                              true
  become_user:                         root
  ansible.builtin.file:
    path:                              /etc/sybase_install_automation/filepermission.txt   
    state:                             touch

# Mount Filesystems
# - name:     "Mount SAP Filesystems on Database for installation"
#  mount:
#    src:    "{{ item.src }}"
#    path:   "{{ item.path }}"
#   fstype: "{{ item.type }}"
#    opts:   defaults
#    state:  mounted
#  loop:
#    - { tier: 'sapos',          type: 'xfs',   src: '/dev/vg_sap/lv_usrsap', 
#    - { tier: 'ase',            type: 'nfs4',    src: '{{ nfs_server }}:/sapmnt/{{ sap_sid|upper }}',    path: '/sapmnt/{{ sap_sid|upper }}' }
#  
#  when:         
#    - item.node_tier == "ase"
#    - item.lv in lvexists


# - name:                             "File permissions updated"
#   ansible.builtin.file:
#     path:                              /etc/sap_deployment_automation/filepermission.txt
#     state:                             touch

#Debug for testing
- name:                                "Sybase ASE: Print sybase filesystems"
  ansible.builtin.debug:
    var:                               sybasefilesystemmounts
    verbosity:                         2