---

# /*----------------------------------------------------------------------------8
# |                                                                            |
# |                      Prepare for DB Install for Scale out configurations   |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
# Note: This playbook will only process HANA tier:
# Note2: This playbook will only install Scale-Out with ANF or Scale-Out with HSR.


- hosts:                               localhost
  name:                                "Database Installation Playbook: - Initialization"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                               # API Input template with defaults

  tasks:
    - name:                            "Database Installation Playbook: - Create Progress folder"
      ansible.builtin.file:
        path:                          "{{ _workspace_directory }}/.progress"
        state:                         directory
        mode:                          0755

    - name:                            "Database Installation Playbook: - Create Progress db folder"
      ansible.builtin.file:
        path:                          "{{ _workspace_directory }}/.progress/db"
        state:                         directory
        mode:                          0755

    - name:                            "Database Installation Playbook: - Remove db-install-done flag"
      ansible.builtin.file:
        path:                          "{{ _workspace_directory }}/.progress/db-install-done"
        state:                          absent

    - name:                            "Database Installation Playbook: - Set hdb fact"
      ansible.builtin.set_fact:
        tier:                          hdb

    - name:                            "Database Installation Playbook: - Read/Create passwords"
      ansible.builtin.include_role:
        name:                          roles-misc/0.1-passwords
        public:                        true
      tags:
        - 0.1-passwords

    - name:                            "Database Installation Playbook: - Read password"
      ansible.builtin.include_role:
        name:                          roles-misc/0.1-passwords
        tasks_from:                    windows.yaml
        public:                        true
      when: platform == "SQLSERVER"
      tags:
        - 0.1-win-passwords

    - name:                            "Backward Compatibility - Check required Database HA variables"
      ansible.builtin.set_fact:
        database_high_availability:    "{{ db_high_availability | default(false) }}"
      when:
        - db_high_availability is defined
        - database_high_availability is not defined

    - name:                            "Database Installation Playbook: - Read/Create key vault secrets"
      ansible.builtin.include_role:
        name:                               roles-misc/0.2-kv-secrets
        public:                             true
      vars:
        # tier:                               fencing
        operation:                          fencing
      when:                                 (database_high_availability and database_cluster_type == "AFA")
      tags:
                                            - 0.2-kv-secrets

    - name:                            "Database Installation Playbook: - Read storage account details"
      ansible.builtin.include_role:
        name:                          roles-misc/0.3.sap-installation-media-storage-details
        public:                        true
      vars:
        tier:                          bom_download
      tags:
        - kv-sap-installation-media-storage-details

    - name:                            "Database Installation Playbook: - Generate root password"
      ansible.builtin.set_fact:
        root_password:                 "{{ lookup('ansible.builtin.password', '/dev/null', seed=inventory_hostname) }}"


    - name:                            "Database Installation Playbook: - Show Root password"
      ansible.builtin.debug:
        msg:                           "{{ root_password }}"
        # verbosity:                      4
# /*----------------------------------------------------------------------------8
# |                                                                            |
# |                      Playbook for HANA DB Install                           |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

- hosts:                               "{{ sap_sid | upper }}_DB"
  name:                                DB Installation - login configuration
  remote_user:                         "{{ orchestration_ansible_user }}"
  gather_facts:                        true
  any_errors_fatal:                    true
  vars_files:
    - vars/ansible-input-api.yaml
  tasks:
    - name:                           "Configure root credential"
      block:
        - name:                            Reset root password
          become:                          true
          ansible.builtin.user:
            name:                          root
            update_password:               always
            password:                      "{{ hostvars.localhost.root_password | password_hash('sha512') }}"
    
        - name:                            Enable {{ item.key }} in /etc/ssh/sshd_config
          become:                          true
          lineinfile:
            path:                          "/etc/ssh/sshd_config"
            regex:                         "^(# *)?{{ item.key }}"
            line:                          "{{ item.key }} {{ item.value }}"
            state:                         present
          loop:
            - { key: "PermitRootLogin", value: "yes" }
            - { key: "PasswordAuthentication", value: "yes" }
            - { key: "ChallengeResponseAuthentication", value: "yes" }
          notify:
            - restart sshd
      when:
        - db_high_availability | default(false) == false
        - db_scale_out | default(false)  == true



- hosts:                               "{{ sap_sid | upper }}_DB"
  name:                                DB Installation - HANA
  remote_user:                         "{{ orchestration_ansible_user }}"
  gather_facts:                        true                                    # Important to collect hostvars information
  any_errors_fatal:                    true
  vars_files:
    - vars/ansible-input-api.yaml                                              # API Input template with defaults
  tasks:
    - name:                            "Backward Compatibility - Check required Database HA variables"
      ansible.builtin.set_fact:
        database_high_availability:    "{{ db_high_availability | default(false) }}"
      when:
        - db_high_availability is defined
        - database_high_availability is not defined

    - name:                            "Database Installation Playbook: - Install HANA"
      become:                          true
      when: node_tier == 'hana'
      block:
        - name:                        "Database Installation Playbook: - Setting the DB facts"
          ansible.builtin.set_fact:
            tier:                      hdb                                     # Actions for HANA DB Serve
            main_password:             "{{ hostvars.localhost.sap_password }}"
            sapbits_location_base_path: "{{ hostvars.localhost.sapbits_location_base_path }}"
            sapbits_sas_token:         "{{ hostvars.localhost.sapbits_sas_token }}"
            root_password:             "{{ hostvars.localhost.root_password }}"
          tags:
            - always

        - name:                        "Database Installation Playbook: - Show SAP password"
          ansible.builtin.debug:
            msg:                       "{{ hostvars.localhost.sap_password }}"
            verbosity:                 4

        - name:                        "Run the Database installation Playbook"
          block:
            - name:                    "Database Installation Playbook: - run HANA installation"
              ansible.builtin.include_role:
                name:                  roles-db/4.0.3-hdb-install-scaleout

            - name:                    "Database Installation Playbook: - Create db-install-done flag"
              delegate_to:             localhost
              become:                  false
              ansible.builtin.file:
                path:                  "{{ _workspace_directory }}/.progress/db/db-install-done{{ ansible_hostname }}"
                state:                 touch
                mode:                  0755
              when:
                - hana_already_installed is defined or (hana_installation.rc is defined and hana_installation.rc == 0)
                - db_scale_out | default(false) == true

          always:
            - name:                    "Database Installation Playbook: - Get the Error lines from installation output"
              ansible.builtin.set_fact:
                error_lines:           "{{ error_lines | default([]) + [item] }}"
              with_items:              "{{ hana_installation.stdout_lines }}"
              when:
                - hana_installation is defined
                - hana_installation.stdout_lines is defined
                - '"ERROR" in item'

            - name:                    "Database Installation Playbook: - Run post installation routines"
              ansible.builtin.include_role:
                name:                  roles-sap/7.0.0-post-install
              vars:
                suffix:                "_DB"
                tier:                  'hana'

            - name:                    "Database Installation Playbook: - Show errors from HANA installation"
              ansible.builtin.debug:
                msg:                   "{{ error_lines }}"
              when:
                - error_lines is defined

          tags:
            - 4.0.0-hdb-install
      when:
        - node_tier == 'hana'
        - db_scale_out | default(false) == true

    - name:                            "Database Installation Playbook: - Install Pacemaker (base)"
      become:                          true
      when:
        # - db_high_availability
        - database_high_availability | default(false) == true
        - node_tier == 'hana'
        - db_scale_out | default(false) == true
      block:
        - name:                         "Database Installation Playbook: - Setting the facts"
          ansible.builtin.set_fact:
            tier:                       ha
            main_password:              "{{ hostvars.localhost.sap_password }}"
            password_ha_db_cluster:     "{{ hostvars.localhost.db_cluster_password }}"
            primary_instance_name:      "{{ ansible_play_hosts_all[0] }}"         # Setting up Primary Instance Name
            secondary_instance_name:    "{{ ansible_play_hosts_all[1] }}"         # Setting up Secondary Instance Name
            # fencing_spn_client_id:     "{% if not use_msi_for_clusters %}{{ hostvars.localhost.sap_fencing_spn_client_id }}{% endif %}"
            # fencing_spn_client_pwd:    "{% if not use_msi_for_clusters %}{{ hostvars.localhost.sap_fencing_spn_pwd }}{%- endif %}"
            # fencing_spn_tenant_id:     "{% if not use_msi_for_clusters %}{{ hostvars.localhost.sap_fencing_spn_tenant_id }}{%- endif %}"

        - name:                         "Database Installation Playbook: - Setting the facts for fencing"
          ansible.builtin.set_fact:
            fencing_spn_client_id:      "{{ hostvars.localhost.sap_fencing_spn_client_id }}"
            fencing_spn_client_pwd:     "{{ hostvars.localhost.sap_fencing_spn_pwd }}"
            fencing_spn_tenant_id:      "{{ hostvars.localhost.sap_fencing_spn_tenant_id }}"
          when:
                                        - database_cluster_type == "AFA"
                                        - not use_msi_for_clusters

        - name:                        "Database Installation Playbook: - Ensure the correct repositories are set"
          ansible.builtin.include_role:
            name:                      roles-os/1.3-repository
          tags:
            - 1.3-repository

        - name:                        "Database Installation Playbook: - Ensure the correct packages are installed"
          ansible.builtin.include_role:
            name:                      roles-os/1.4-packages
          tags:
            - 1.4-packages

        # Setup the kernel parameters required for pacemaker cluster VMs
        - name:                        "Database Installation Playbook: - Ensure the correct kernel parameters are set"
          ansible.builtin.include_role:
            name:                      roles-os/1.9-kernelparameters
          tags:
            - 1.9-kernelparameters

        - name:                        "Database Installation Playbook: - Ensure the needed services are enabled/disabled"
          ansible.builtin.include_role:
            name:                      roles-os/1.16-services
          tags:
            - 1.16-services

        - name:                        "Database Installation Playbook: - Ensure the accounts are present"
          ansible.builtin.include_role:
            name:                      roles-os/1.11-accounts
          tags:
            - 1.11-accounts

        - name:                        "Database Installation Playbook: - Install Pacemaker"
          ansible.builtin.include_role:
            name:                      roles-os/1.17-generic-pacemaker                         # Configures the Pacemaker cluster with Azure fence agent
            apply:
              tags:
                - 1.17-generic-pacemaker
              become:                  true
              become_user:             root
          when:
            - node_tier != 'oracle'
            - node_tier != 'oracle-asm'
          tags:
            - 1.17-generic-pacemaker

        - name:                        "Database Installation Playbook: - Create pacemaker-install-done flag"
          delegate_to:                 localhost
          become:                      false
          ansible.builtin.file:
            path:                      "{{ _workspace_directory }}/.progress/pacemaker-install-done"
            state:                     touch
            mode:                      0755
      when:
        - db_scale_out | default(false) == true
        - db_high_availability | default(false) == true

# # /*----------------------------------------------------------------------------8
# # |                                                                            |
# # |                         PLAYBOOK FOR DB LOGGING                       |
# # |                                                                            |
# # +------------------------------------4--------------------------------------*/
# - name:                        "Database Installation Playbook: - Create db-install-done flag"
#   delegate_to:                 localhost
#   become:                      false
#   ansible.builtin.file:
#     path:                      "{{ _workspace_directory }}/.progress/db-install-done"
#     state:                     touch
#     mode:                      0755

# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                    Playbook for Validating DB Install                      |
# |                                                                            |
# +------------------------------------4--------------------------------------*/


- hosts:                               "{{ sap_sid | upper }}_DB"

  name:                                SAP Post Installation - DB
  remote_user:                         "{{ orchestration_ansible_user }}"
  gather_facts:                        true
  vars_files:
    - vars/ansible-input-api.yaml                                               # API Input template with defaults
  # -------------------------------------+---------------------------------------8
  #
  # Build the list of tasks to be executed in order here.
  #
  # -------------------------------------+---------------------------------------8
  tasks:
    - name:                            "DB Playbook - Post Install: Check for files in progress folder"
      ansible.builtin.find:
        path:                          "{{ _workspace_directory }}/.progress/db"
        patterns:                      "*"
      register:                        find_progress_files
      delegate_to:                     localhost
      become:                          false

    - name:                            "DB Playbook - Post Install: - Create db-install-done flag"
      delegate_to:                     localhost
      become:                          false
      ansible.builtin.file:
        path:                          "{{ _workspace_directory }}/.progress/db-install-done"
        state:                         touch
        mode:                          0755
      when:                            find_progress_files.matched == (ansible_play_hosts | length)

...
# /*----------------------------------------------------------------------------8
# |                                    END                                      |
# +------------------------------------4--------------------------------------*/
