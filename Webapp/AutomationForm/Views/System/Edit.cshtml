@model AutomationForm.Models.SystemViewModel;

@{
    ViewBag.Title = "Edit system";
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        var retainedValues = {
            workloadzone: '@Model.System.workload_zone',
            environment: '@Model.System.environment',
            location: '@Model.System.location',
            subscription: '@Model.System.subscription',
            rg: '@Model.System.resourcegroup_arm_id',
            network: '@Model.System.network_address_arm_id',
            adminsubnetarmid: '@Model.System.admin_subnet_arm_id',
            dbsubnetarmid: '@Model.System.db_subnet_arm_id',
            appsubnetarmid: '@Model.System.app_subnet_arm_id',
            websubnetarmid: '@Model.System.web_subnet_arm_id',
        }
        setModelData(retainedValues);
        initializeDropdowns();
        initializeWorkloadZones();

        var retainedListValues = [
            {
                id: 'proximityplacementgroup_names',
                data: @Json.Serialize(@Model.System.proximityplacementgroup_names)
            },
            {
                id: 'proximityplacementgroup_arm_ids',
                data: @Json.Serialize(@Model.System.proximityplacementgroup_arm_ids)
            },
            {
                id: 'database_vm_avset_arm_ids',
                data: @Json.Serialize(@Model.System.database_vm_avset_arm_ids)
            },
            {
                id: 'database_tags',
                data: @Json.Serialize(@Model.System.database_tags)
            },
            {
                id: 'application_server_zones',
                data: @Json.Serialize(@Model.System.application_server_zones)
            },
            {
                id: 'application_server_app_nic_ips',
                data: @Json.Serialize(@Model.System.application_server_app_nic_ips)
            },
            {
                id: 'application_server_app_admin_nic_ips',
                data: @Json.Serialize(@Model.System.application_server_app_admin_nic_ips)
            },
            {
                id: 'application_server_tags',
                data: @Json.Serialize(@Model.System.application_server_tags)
            },
            {
                id: 'scs_server_zones',
                data: @Json.Serialize(@Model.System.scs_server_zones)
            },
            {
                id: 'scs_server_app_nic_ips',
                data: @Json.Serialize(@Model.System.scs_server_app_nic_ips)
            },
            {
                id: 'scs_server_app_admin_nic_ips',
                data: @Json.Serialize(@Model.System.scs_server_app_admin_nic_ips)
            },
            {
                id: 'scs_server_loadbalancer_ips',
                data: @Json.Serialize(@Model.System.scs_server_loadbalancer_ips)
            },
            {
                id: 'scs_server_tags',
                data: @Json.Serialize(@Model.System.scs_server_tags)
            },
            {
                id: 'webdispatcher_server_zones',
                data: @Json.Serialize(@Model.System.webdispatcher_server_zones)
            },
            {
                id: 'webdispatcher_server_app_nic_ips',
                data: @Json.Serialize(@Model.System.webdispatcher_server_app_nic_ips)
            },
            {
                id: 'webdispatcher_server_app_admin_nic_ips',
                data: @Json.Serialize(@Model.System.webdispatcher_server_app_admin_nic_ips)
            },
            {
                id: 'webdispatcher_server_loadbalancer_ips',
                data: @Json.Serialize(@Model.System.webdispatcher_server_loadbalancer_ips)
            },
            {
                id: 'webdispatcher_server_tags',
                data: @Json.Serialize(@Model.System.webdispatcher_server_tags)
            }
        ]
        initializeLists(retainedListValues);
    });

    window.onload = function () {
        $(".js-example-placeholder-single").select2({
            placeholder: "Search...",
            allowClear: true,
            tags: true
        });
        $(".js-example-placeholder-multiple").select2({
            placeholder: "Add items...",
            tags: true
        });

        var PivotElements = document.querySelectorAll(".ms-Pivot");
        for (var i = 0; i < PivotElements.length; i++) {
          new fabric['Pivot'](PivotElements[i]);
        }
        $("#Basic-pivot").addClass("is-selected");
    }
    
    var submitting = false;
    window.onbeforeunload = function(){
        if (!submitting) {
            return "";
        }
    };

</script>

<fluent-breadcrumb>
    <fluent-breadcrumb-item href="@Url.Action("Index", "Home")">Home</fluent-breadcrumb-item>
    <fluent-breadcrumb-item href="@Url.Action("Index", "System")">Systems</fluent-breadcrumb-item>
    <fluent-breadcrumb-item href="#">Edit</fluent-breadcrumb-item>
</fluent-breadcrumb>

<div>

    <div class="text-center">
        <h2 style="text-align: center">System parameters </h2>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="notificationContainer" style="display: flex; background: rgb(253, 231, 233);">
            <div class="notificationInner">
                <span class="notificationText">
                    @Html.ValidationSummary(false)
                </span>
            </div>
        </div>
    }

    <form class="wrapper" asp-controller="system" asp-action="edit">
        @Html.AntiForgeryToken()

        <div class="ms-Pivot ms-Pivot--large">

            <ul class="ms-Pivot-links" style="text-align: center">
                @foreach (ParameterGroupingModel pg in Model.ParameterGroupings)
                {
                    <li class="ms-Pivot-link" id="@pg.Tab-pivot" data-content="@pg.Tab" title="@pg.Tab" tabindex="2">
                        @pg.Tab
                    </li>
                }
            </ul>

            @foreach (ParameterGroupingModel pg in Model.ParameterGroupings)
            {
                <div class="ms-Pivot-content" data-content="@pg.Tab">
                    <fieldset id="@pg.Tab">

                        @foreach (Grouping g in pg.Groupings)
                        {
                            <h2 class="ms-fontSize-20 grouping"> @g.Section</h2>
                            <div class="parameters">

                                @foreach (ParameterModel p in g.Parameters)
                                {
                                    var required = (@p.Required) ? "required" : "";
                                    var value = Model.System.GetType().GetProperty(p.Name).GetValue(Model.System);

                                    <div class="ms-TextField">
                                        
                                        <div class="left-input">
                                            @Html.Label(p.Name, p.Name, new { @class = $"ms-Label {required}" })
                                            <p>@p.Description</p>
                                        </div>

                                        <div class="right-input">
                                            @if (@p.Type == "field")
                                            {
                                                @Html.TextBox(p.Name, value, new { @class = "ms-TextField-field", @onchange = $"overrulesHandler({p.Name}, {p.Overrules})" })
                                            }
                                            else if (@p.Type == "lookup")
                                            {
                                                @Html.DropDownList(p.Name, p.Options, new { @class = "js-example-placeholder-single", @style = "width: 100%;", @onchange = $"overrulesHandler({p.Name}, {p.Overrules})" })
                                            }
                                            else if (@p.Type == "list")
                                            {
                                                @Html.ListBox(p.Name, p.Options, new { @class = "js-example-placeholder-multiple", @style = "width: 100%;", @multiple = "multiple" })
                                            }
                                            else if (@p.Type == "image")
                                            {
                                                Image img = (Image)value;
                                                if (img == null) img = new Image(); 

                                                <div class="image-container">
                                                    <span>
                                                        @Html.Label("os_type", "os_type", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".os_type", img.os_type, new { @class = "ms-TextField-field image-input" })
                                                    </span>

                                                    <span>
                                                        @Html.Label("source_image_id", "source_image_id", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".source_image_id", img.source_image_id, new { @class = "ms-TextField-field image-input" })
                                                    </span>

                                                    <span>
                                                        @Html.Label("publisher", "publisher", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".publisher", img.publisher, new { @class = "ms-TextField-field image-input" })
                                                    </span>

                                                    <span>
                                                        @Html.Label("offer", "offer", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".offer", img.offer, new { @class = "ms-TextField-field image-input" })
                                                    </span>

                                                    <span>
                                                        @Html.Label("sku", "sku", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".sku", img.sku, new { @class = "ms-TextField-field image-input" })
                                                    </span>

                                                    <span>
                                                        @Html.Label("version", "version", new { @class = $"ms-Label image-label" })
                                                        @Html.TextBox(p.Name + ".version", img.version, new { @class = "ms-TextField-field image-input" })
                                                    </span>
                                                </div>
                                            }
                                            else
                                            {
                                                <p>Invalid parameter</p>
                                            }

                                            @Html.ValidationMessage(p.Name)
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </fieldset>
                </div>
            }
        </div>

        <fluent-button appearance="accent" style="margin-top: 15px" type="submit" onclick="submitting=true">
            <i class="ms-Icon ms-Icon--Save" aria-hidden="true"></i> Save
        </fluent-button>

        <fluent-anchor href="@Url.Action("Index", "System")">
            Cancel
        </fluent-anchor>

        <fluent-button appearance="accent" style="margin-top: 15px; float: right" type="submit" onclick="submitting=true" formaction="/System/SubmitNew">
            Save as new system
        </fluent-button>

    </form>
</div>