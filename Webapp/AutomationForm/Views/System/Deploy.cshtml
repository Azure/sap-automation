@model AutomationForm.Models.SystemModel

@{
    ViewBag.Title = "Deploy system";
    IEnumerable<SelectListItem> environments = ViewBag.Environments;
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">

    window.onload = function () {
        $(".js-example-placeholder-single").select2({
            placeholder: "Search...",
            allowClear: true,
            tags: true
        });
    }

</script>

<fluent-breadcrumb>
    <fluent-breadcrumb-item href="@Url.Action("Index", "Home")">Home</fluent-breadcrumb-item>
    <fluent-breadcrumb-item href="@Url.Action("Index", "System")">Systems</fluent-breadcrumb-item>
    <fluent-breadcrumb-item href="#">Deploy</fluent-breadcrumb-item>
</fluent-breadcrumb>

<div class="text-center">
    <h2>Deploy a system</h2>
</div>

<h4>Are you sure you want to deploy this?</h4>
<div>
    <hr />
    <dl class="dl-horizontal">
        @foreach (var prop in ViewData.ModelMetadata.Properties)
        {
            string value = Html.DisplayText(prop.PropertyName);

            if (prop.ModelType == typeof(Image))
            {
                Image img = (Image)Model.GetType().GetProperty(prop.PropertyName).GetValue(Model);
                if (img != null && (img.IsInitialized))
                {
                    <dt>
                        @Html.DisplayName(prop.GetDisplayName())
                    </dt>

                    <dd>
                        <p>
                            os_type:         @img.os_type <br>
                            source_image_id: @img.source_image_id <br>
                            publisher:       @img.publisher <br>
                            offer:           @img.offer <br>
                            sku:             @img.sku <br>
                            version:         @img.version
                        </p>
                    </dd>
                }
            }
            else if (value.Length != 0)
            {
                <dt>
                    @Html.DisplayName(prop.GetDisplayName())
                </dt>

                <dd>
                    @if (prop.IsEnumerableType)
                    {
                        var tmp = (string[])Model.GetType().GetProperty(prop.PropertyName).GetValue(Model);
                        foreach (var t in tmp)
                        {
                             @t <br>
                        }
                    }
                    else
                    {
                        @value
                    }
                </dd>
            }
        }
    </dl>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="ms-TextField">                 
            <div class="left-input">
                @Html.Label("workload_environment", "Workload Environment", new { @class = $"ms-Label required" })
                <p>Please specify the workload environment to deploy to (DEV, QA, PRD, ...)</p>
            </div>

            <div class="right-input">
                @Html.DropDownList("workload_environment", environments, new { @class = "js-example-placeholder-single", @style = "width: 100%;", @onchange = $"toggleDisableViaOneInput('workload_environment', 'confirm-deploy-system-checkbox')" })
            </div>
        </div>

        <fluent-checkbox id="confirm-deploy-system-checkbox" onchange="toggleDisableViaCheckbox(this, 'deploy-system-button')" disabled>I confirm that I wish to deploy this system</fluent-checkbox><br />

        <fluent-button id="deploy-system-button" appearance="accent" value="Deploy" type="submit" disabled>
            <i class="ms-Icon ms-Icon--Send" aria-hidden="true"></i> Deploy
        </fluent-button>

        <fluent-anchor href="@Url.Action("Index", "System")">
            Cancel
        </fluent-anchor>

    }
</div>